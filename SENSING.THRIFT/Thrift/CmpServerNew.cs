/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class CmpServerNew {
  /// <summary>
  /// *end 20170412**
  /// </summary>
  public interface Iface {
    int CompareTwoFeaNew(byte[] Feature1, byte[] Feature2);
    #if SILVERLIGHT
    IAsyncResult Begin_CompareTwoFeaNew(AsyncCallback callback, object state, byte[] Feature1, byte[] Feature2);
    int End_CompareTwoFeaNew(IAsyncResult asyncResult);
    #endif
    int DelFaceObjNew(string id);
    #if SILVERLIGHT
    IAsyncResult Begin_DelFaceObjNew(AsyncCallback callback, object state, string id);
    int End_DelFaceObjNew(IAsyncResult asyncResult);
    #endif
    int DelFaceTemplateNew(string id);
    #if SILVERLIGHT
    IAsyncResult Begin_DelFaceTemplateNew(AsyncCallback callback, object state, string id);
    int End_DelFaceTemplateNew(IAsyncResult asyncResult);
    #endif
    List<CmpResult> CompareNew(byte[] Feature, int nThreshold, int nMaxCount);
    #if SILVERLIGHT
    IAsyncResult Begin_CompareNew(AsyncCallback callback, object state, byte[] Feature, int nThreshold, int nMaxCount);
    List<CmpResult> End_CompareNew(IAsyncResult asyncResult);
    #endif
    List<CmpResult> Compare2New(byte[] Feature, int nThreshold, int nMaxCount, int type, int sst);
    #if SILVERLIGHT
    IAsyncResult Begin_Compare2New(AsyncCallback callback, object state, byte[] Feature, int nThreshold, int nMaxCount, int type, int sst);
    List<CmpResult> End_Compare2New(IAsyncResult asyncResult);
    #endif
    int AddFaceObjNew(CmpServerFaceObj obj);
    #if SILVERLIGHT
    IAsyncResult Begin_AddFaceObjNew(AsyncCallback callback, object state, CmpServerFaceObj obj);
    int End_AddFaceObjNew(IAsyncResult asyncResult);
    #endif
    int AddFaceTemplateNew(FaceTemplateEx obj);
    #if SILVERLIGHT
    IAsyncResult Begin_AddFaceTemplateNew(AsyncCallback callback, object state, FaceTemplateEx obj);
    int End_AddFaceTemplateNew(IAsyncResult asyncResult);
    #endif
    List<CmpResultMulti> CompareNewMulti(List<FeaInfo> fealist, int nThreshold, int nMaxCount);
    #if SILVERLIGHT
    IAsyncResult Begin_CompareNewMulti(AsyncCallback callback, object state, List<FeaInfo> fealist, int nThreshold, int nMaxCount);
    List<CmpResultMulti> End_CompareNewMulti(IAsyncResult asyncResult);
    #endif
    List<ScoreInfo> AnalysisCmpRecordC(byte[] capfea, byte[] objfea, List<CapListCfg> capfealist, int nThreshold);
    #if SILVERLIGHT
    IAsyncResult Begin_AnalysisCmpRecordC(AsyncCallback callback, object state, byte[] capfea, byte[] objfea, List<CapListCfg> capfealist, int nThreshold);
    List<ScoreInfo> End_AnalysisCmpRecordC(IAsyncResult asyncResult);
    #endif
    List<ScoreInfoA> TargetFeatureAnalysis(byte[] capfea, int threshold, int maxcount, List<FeaInfoLBS> fealist);
    #if SILVERLIGHT
    IAsyncResult Begin_TargetFeatureAnalysis(AsyncCallback callback, object state, byte[] capfea, int threshold, int maxcount, List<FeaInfoLBS> fealist);
    List<ScoreInfoA> End_TargetFeatureAnalysis(IAsyncResult asyncResult);
    #endif
    List<AppearCount> NoTargetFeatureAnalysis(byte[] capfea, int threshold, int maxcount, List<FeaInfoLBS> fealist);
    #if SILVERLIGHT
    IAsyncResult Begin_NoTargetFeatureAnalysis(AsyncCallback callback, object state, byte[] capfea, int threshold, int maxcount, List<FeaInfoLBS> fealist);
    List<AppearCount> End_NoTargetFeatureAnalysis(IAsyncResult asyncResult);
    #endif
    List<FaceInfo> DetectImgNew(byte[] img);
    #if SILVERLIGHT
    IAsyncResult Begin_DetectImgNew(AsyncCallback callback, object state, byte[] img);
    List<FaceInfo> End_DetectImgNew(IAsyncResult asyncResult);
    #endif
    CResultCfg CmpVisitorNew(byte[] IdImg, byte[] Img);
    #if SILVERLIGHT
    IAsyncResult Begin_CmpVisitorNew(AsyncCallback callback, object state, byte[] IdImg, byte[] Img);
    CResultCfg End_CmpVisitorNew(IAsyncResult asyncResult);
    #endif
    List<CompareImgResult> VisitorVerifiCmpNew(List<byte[]> Img);
    #if SILVERLIGHT
    IAsyncResult Begin_VisitorVerifiCmpNew(AsyncCallback callback, object state, List<byte[]> Img);
    List<CompareImgResult> End_VisitorVerifiCmpNew(IAsyncResult asyncResult);
    #endif
  }

  /// <summary>
  /// *end 20170412**
  /// </summary>
  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_CompareTwoFeaNew(AsyncCallback callback, object state, byte[] Feature1, byte[] Feature2)
    {
      return send_CompareTwoFeaNew(callback, state, Feature1, Feature2);
    }

    public int End_CompareTwoFeaNew(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_CompareTwoFeaNew();
    }

    #endif

    public int CompareTwoFeaNew(byte[] Feature1, byte[] Feature2)
    {
      #if !SILVERLIGHT
      send_CompareTwoFeaNew(Feature1, Feature2);
      return recv_CompareTwoFeaNew();

      #else
      var asyncResult = Begin_CompareTwoFeaNew(null, null, Feature1, Feature2);
      return End_CompareTwoFeaNew(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_CompareTwoFeaNew(AsyncCallback callback, object state, byte[] Feature1, byte[] Feature2)
    #else
    public void send_CompareTwoFeaNew(byte[] Feature1, byte[] Feature2)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("CompareTwoFeaNew", TMessageType.Call, seqid_));
      CompareTwoFeaNew_args args = new CompareTwoFeaNew_args();
      args.Feature1 = Feature1;
      args.Feature2 = Feature2;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_CompareTwoFeaNew()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      CompareTwoFeaNew_result result = new CompareTwoFeaNew_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CompareTwoFeaNew failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_DelFaceObjNew(AsyncCallback callback, object state, string id)
    {
      return send_DelFaceObjNew(callback, state, id);
    }

    public int End_DelFaceObjNew(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_DelFaceObjNew();
    }

    #endif

    public int DelFaceObjNew(string id)
    {
      #if !SILVERLIGHT
      send_DelFaceObjNew(id);
      return recv_DelFaceObjNew();

      #else
      var asyncResult = Begin_DelFaceObjNew(null, null, id);
      return End_DelFaceObjNew(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_DelFaceObjNew(AsyncCallback callback, object state, string id)
    #else
    public void send_DelFaceObjNew(string id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("DelFaceObjNew", TMessageType.Call, seqid_));
      DelFaceObjNew_args args = new DelFaceObjNew_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_DelFaceObjNew()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      DelFaceObjNew_result result = new DelFaceObjNew_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DelFaceObjNew failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_DelFaceTemplateNew(AsyncCallback callback, object state, string id)
    {
      return send_DelFaceTemplateNew(callback, state, id);
    }

    public int End_DelFaceTemplateNew(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_DelFaceTemplateNew();
    }

    #endif

    public int DelFaceTemplateNew(string id)
    {
      #if !SILVERLIGHT
      send_DelFaceTemplateNew(id);
      return recv_DelFaceTemplateNew();

      #else
      var asyncResult = Begin_DelFaceTemplateNew(null, null, id);
      return End_DelFaceTemplateNew(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_DelFaceTemplateNew(AsyncCallback callback, object state, string id)
    #else
    public void send_DelFaceTemplateNew(string id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("DelFaceTemplateNew", TMessageType.Call, seqid_));
      DelFaceTemplateNew_args args = new DelFaceTemplateNew_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_DelFaceTemplateNew()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      DelFaceTemplateNew_result result = new DelFaceTemplateNew_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DelFaceTemplateNew failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_CompareNew(AsyncCallback callback, object state, byte[] Feature, int nThreshold, int nMaxCount)
    {
      return send_CompareNew(callback, state, Feature, nThreshold, nMaxCount);
    }

    public List<CmpResult> End_CompareNew(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_CompareNew();
    }

    #endif

    public List<CmpResult> CompareNew(byte[] Feature, int nThreshold, int nMaxCount)
    {
      #if !SILVERLIGHT
      send_CompareNew(Feature, nThreshold, nMaxCount);
      return recv_CompareNew();

      #else
      var asyncResult = Begin_CompareNew(null, null, Feature, nThreshold, nMaxCount);
      return End_CompareNew(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_CompareNew(AsyncCallback callback, object state, byte[] Feature, int nThreshold, int nMaxCount)
    #else
    public void send_CompareNew(byte[] Feature, int nThreshold, int nMaxCount)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("CompareNew", TMessageType.Call, seqid_));
      CompareNew_args args = new CompareNew_args();
      args.Feature = Feature;
      args.NThreshold = nThreshold;
      args.NMaxCount = nMaxCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpResult> recv_CompareNew()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      CompareNew_result result = new CompareNew_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CompareNew failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_Compare2New(AsyncCallback callback, object state, byte[] Feature, int nThreshold, int nMaxCount, int type, int sst)
    {
      return send_Compare2New(callback, state, Feature, nThreshold, nMaxCount, type, sst);
    }

    public List<CmpResult> End_Compare2New(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_Compare2New();
    }

    #endif

    public List<CmpResult> Compare2New(byte[] Feature, int nThreshold, int nMaxCount, int type, int sst)
    {
      #if !SILVERLIGHT
      send_Compare2New(Feature, nThreshold, nMaxCount, type, sst);
      return recv_Compare2New();

      #else
      var asyncResult = Begin_Compare2New(null, null, Feature, nThreshold, nMaxCount, type, sst);
      return End_Compare2New(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_Compare2New(AsyncCallback callback, object state, byte[] Feature, int nThreshold, int nMaxCount, int type, int sst)
    #else
    public void send_Compare2New(byte[] Feature, int nThreshold, int nMaxCount, int type, int sst)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("Compare2New", TMessageType.Call, seqid_));
      Compare2New_args args = new Compare2New_args();
      args.Feature = Feature;
      args.NThreshold = nThreshold;
      args.NMaxCount = nMaxCount;
      args.Type = type;
      args.Sst = sst;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpResult> recv_Compare2New()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      Compare2New_result result = new Compare2New_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Compare2New failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_AddFaceObjNew(AsyncCallback callback, object state, CmpServerFaceObj obj)
    {
      return send_AddFaceObjNew(callback, state, obj);
    }

    public int End_AddFaceObjNew(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_AddFaceObjNew();
    }

    #endif

    public int AddFaceObjNew(CmpServerFaceObj obj)
    {
      #if !SILVERLIGHT
      send_AddFaceObjNew(obj);
      return recv_AddFaceObjNew();

      #else
      var asyncResult = Begin_AddFaceObjNew(null, null, obj);
      return End_AddFaceObjNew(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_AddFaceObjNew(AsyncCallback callback, object state, CmpServerFaceObj obj)
    #else
    public void send_AddFaceObjNew(CmpServerFaceObj obj)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("AddFaceObjNew", TMessageType.Call, seqid_));
      AddFaceObjNew_args args = new AddFaceObjNew_args();
      args.Obj = obj;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_AddFaceObjNew()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      AddFaceObjNew_result result = new AddFaceObjNew_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddFaceObjNew failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_AddFaceTemplateNew(AsyncCallback callback, object state, FaceTemplateEx obj)
    {
      return send_AddFaceTemplateNew(callback, state, obj);
    }

    public int End_AddFaceTemplateNew(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_AddFaceTemplateNew();
    }

    #endif

    public int AddFaceTemplateNew(FaceTemplateEx obj)
    {
      #if !SILVERLIGHT
      send_AddFaceTemplateNew(obj);
      return recv_AddFaceTemplateNew();

      #else
      var asyncResult = Begin_AddFaceTemplateNew(null, null, obj);
      return End_AddFaceTemplateNew(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_AddFaceTemplateNew(AsyncCallback callback, object state, FaceTemplateEx obj)
    #else
    public void send_AddFaceTemplateNew(FaceTemplateEx obj)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("AddFaceTemplateNew", TMessageType.Call, seqid_));
      AddFaceTemplateNew_args args = new AddFaceTemplateNew_args();
      args.Obj = obj;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_AddFaceTemplateNew()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      AddFaceTemplateNew_result result = new AddFaceTemplateNew_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddFaceTemplateNew failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_CompareNewMulti(AsyncCallback callback, object state, List<FeaInfo> fealist, int nThreshold, int nMaxCount)
    {
      return send_CompareNewMulti(callback, state, fealist, nThreshold, nMaxCount);
    }

    public List<CmpResultMulti> End_CompareNewMulti(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_CompareNewMulti();
    }

    #endif

    public List<CmpResultMulti> CompareNewMulti(List<FeaInfo> fealist, int nThreshold, int nMaxCount)
    {
      #if !SILVERLIGHT
      send_CompareNewMulti(fealist, nThreshold, nMaxCount);
      return recv_CompareNewMulti();

      #else
      var asyncResult = Begin_CompareNewMulti(null, null, fealist, nThreshold, nMaxCount);
      return End_CompareNewMulti(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_CompareNewMulti(AsyncCallback callback, object state, List<FeaInfo> fealist, int nThreshold, int nMaxCount)
    #else
    public void send_CompareNewMulti(List<FeaInfo> fealist, int nThreshold, int nMaxCount)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("CompareNewMulti", TMessageType.Call, seqid_));
      CompareNewMulti_args args = new CompareNewMulti_args();
      args.Fealist = fealist;
      args.NThreshold = nThreshold;
      args.NMaxCount = nMaxCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpResultMulti> recv_CompareNewMulti()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      CompareNewMulti_result result = new CompareNewMulti_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CompareNewMulti failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_AnalysisCmpRecordC(AsyncCallback callback, object state, byte[] capfea, byte[] objfea, List<CapListCfg> capfealist, int nThreshold)
    {
      return send_AnalysisCmpRecordC(callback, state, capfea, objfea, capfealist, nThreshold);
    }

    public List<ScoreInfo> End_AnalysisCmpRecordC(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_AnalysisCmpRecordC();
    }

    #endif

    public List<ScoreInfo> AnalysisCmpRecordC(byte[] capfea, byte[] objfea, List<CapListCfg> capfealist, int nThreshold)
    {
      #if !SILVERLIGHT
      send_AnalysisCmpRecordC(capfea, objfea, capfealist, nThreshold);
      return recv_AnalysisCmpRecordC();

      #else
      var asyncResult = Begin_AnalysisCmpRecordC(null, null, capfea, objfea, capfealist, nThreshold);
      return End_AnalysisCmpRecordC(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_AnalysisCmpRecordC(AsyncCallback callback, object state, byte[] capfea, byte[] objfea, List<CapListCfg> capfealist, int nThreshold)
    #else
    public void send_AnalysisCmpRecordC(byte[] capfea, byte[] objfea, List<CapListCfg> capfealist, int nThreshold)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("AnalysisCmpRecordC", TMessageType.Call, seqid_));
      AnalysisCmpRecordC_args args = new AnalysisCmpRecordC_args();
      args.Capfea = capfea;
      args.Objfea = objfea;
      args.Capfealist = capfealist;
      args.NThreshold = nThreshold;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<ScoreInfo> recv_AnalysisCmpRecordC()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      AnalysisCmpRecordC_result result = new AnalysisCmpRecordC_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AnalysisCmpRecordC failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_TargetFeatureAnalysis(AsyncCallback callback, object state, byte[] capfea, int threshold, int maxcount, List<FeaInfoLBS> fealist)
    {
      return send_TargetFeatureAnalysis(callback, state, capfea, threshold, maxcount, fealist);
    }

    public List<ScoreInfoA> End_TargetFeatureAnalysis(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_TargetFeatureAnalysis();
    }

    #endif

    public List<ScoreInfoA> TargetFeatureAnalysis(byte[] capfea, int threshold, int maxcount, List<FeaInfoLBS> fealist)
    {
      #if !SILVERLIGHT
      send_TargetFeatureAnalysis(capfea, threshold, maxcount, fealist);
      return recv_TargetFeatureAnalysis();

      #else
      var asyncResult = Begin_TargetFeatureAnalysis(null, null, capfea, threshold, maxcount, fealist);
      return End_TargetFeatureAnalysis(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_TargetFeatureAnalysis(AsyncCallback callback, object state, byte[] capfea, int threshold, int maxcount, List<FeaInfoLBS> fealist)
    #else
    public void send_TargetFeatureAnalysis(byte[] capfea, int threshold, int maxcount, List<FeaInfoLBS> fealist)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("TargetFeatureAnalysis", TMessageType.Call, seqid_));
      TargetFeatureAnalysis_args args = new TargetFeatureAnalysis_args();
      args.Capfea = capfea;
      args.Threshold = threshold;
      args.Maxcount = maxcount;
      args.Fealist = fealist;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<ScoreInfoA> recv_TargetFeatureAnalysis()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      TargetFeatureAnalysis_result result = new TargetFeatureAnalysis_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TargetFeatureAnalysis failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_NoTargetFeatureAnalysis(AsyncCallback callback, object state, byte[] capfea, int threshold, int maxcount, List<FeaInfoLBS> fealist)
    {
      return send_NoTargetFeatureAnalysis(callback, state, capfea, threshold, maxcount, fealist);
    }

    public List<AppearCount> End_NoTargetFeatureAnalysis(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_NoTargetFeatureAnalysis();
    }

    #endif

    public List<AppearCount> NoTargetFeatureAnalysis(byte[] capfea, int threshold, int maxcount, List<FeaInfoLBS> fealist)
    {
      #if !SILVERLIGHT
      send_NoTargetFeatureAnalysis(capfea, threshold, maxcount, fealist);
      return recv_NoTargetFeatureAnalysis();

      #else
      var asyncResult = Begin_NoTargetFeatureAnalysis(null, null, capfea, threshold, maxcount, fealist);
      return End_NoTargetFeatureAnalysis(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_NoTargetFeatureAnalysis(AsyncCallback callback, object state, byte[] capfea, int threshold, int maxcount, List<FeaInfoLBS> fealist)
    #else
    public void send_NoTargetFeatureAnalysis(byte[] capfea, int threshold, int maxcount, List<FeaInfoLBS> fealist)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("NoTargetFeatureAnalysis", TMessageType.Call, seqid_));
      NoTargetFeatureAnalysis_args args = new NoTargetFeatureAnalysis_args();
      args.Capfea = capfea;
      args.Threshold = threshold;
      args.Maxcount = maxcount;
      args.Fealist = fealist;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<AppearCount> recv_NoTargetFeatureAnalysis()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      NoTargetFeatureAnalysis_result result = new NoTargetFeatureAnalysis_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "NoTargetFeatureAnalysis failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_DetectImgNew(AsyncCallback callback, object state, byte[] img)
    {
      return send_DetectImgNew(callback, state, img);
    }

    public List<FaceInfo> End_DetectImgNew(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_DetectImgNew();
    }

    #endif

    public List<FaceInfo> DetectImgNew(byte[] img)
    {
      #if !SILVERLIGHT
      send_DetectImgNew(img);
      return recv_DetectImgNew();

      #else
      var asyncResult = Begin_DetectImgNew(null, null, img);
      return End_DetectImgNew(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_DetectImgNew(AsyncCallback callback, object state, byte[] img)
    #else
    public void send_DetectImgNew(byte[] img)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("DetectImgNew", TMessageType.Call, seqid_));
      DetectImgNew_args args = new DetectImgNew_args();
      args.Img = img;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<FaceInfo> recv_DetectImgNew()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      DetectImgNew_result result = new DetectImgNew_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DetectImgNew failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_CmpVisitorNew(AsyncCallback callback, object state, byte[] IdImg, byte[] Img)
    {
      return send_CmpVisitorNew(callback, state, IdImg, Img);
    }

    public CResultCfg End_CmpVisitorNew(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_CmpVisitorNew();
    }

    #endif

    public CResultCfg CmpVisitorNew(byte[] IdImg, byte[] Img)
    {
      #if !SILVERLIGHT
      send_CmpVisitorNew(IdImg, Img);
      return recv_CmpVisitorNew();

      #else
      var asyncResult = Begin_CmpVisitorNew(null, null, IdImg, Img);
      return End_CmpVisitorNew(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_CmpVisitorNew(AsyncCallback callback, object state, byte[] IdImg, byte[] Img)
    #else
    public void send_CmpVisitorNew(byte[] IdImg, byte[] Img)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("CmpVisitorNew", TMessageType.Call, seqid_));
      CmpVisitorNew_args args = new CmpVisitorNew_args();
      args.IdImg = IdImg;
      args.Img = Img;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public CResultCfg recv_CmpVisitorNew()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      CmpVisitorNew_result result = new CmpVisitorNew_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CmpVisitorNew failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_VisitorVerifiCmpNew(AsyncCallback callback, object state, List<byte[]> Img)
    {
      return send_VisitorVerifiCmpNew(callback, state, Img);
    }

    public List<CompareImgResult> End_VisitorVerifiCmpNew(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_VisitorVerifiCmpNew();
    }

    #endif

    public List<CompareImgResult> VisitorVerifiCmpNew(List<byte[]> Img)
    {
      #if !SILVERLIGHT
      send_VisitorVerifiCmpNew(Img);
      return recv_VisitorVerifiCmpNew();

      #else
      var asyncResult = Begin_VisitorVerifiCmpNew(null, null, Img);
      return End_VisitorVerifiCmpNew(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_VisitorVerifiCmpNew(AsyncCallback callback, object state, List<byte[]> Img)
    #else
    public void send_VisitorVerifiCmpNew(List<byte[]> Img)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("VisitorVerifiCmpNew", TMessageType.Call, seqid_));
      VisitorVerifiCmpNew_args args = new VisitorVerifiCmpNew_args();
      args.Img = Img;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CompareImgResult> recv_VisitorVerifiCmpNew()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      VisitorVerifiCmpNew_result result = new VisitorVerifiCmpNew_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "VisitorVerifiCmpNew failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["CompareTwoFeaNew"] = CompareTwoFeaNew_Process;
      processMap_["DelFaceObjNew"] = DelFaceObjNew_Process;
      processMap_["DelFaceTemplateNew"] = DelFaceTemplateNew_Process;
      processMap_["CompareNew"] = CompareNew_Process;
      processMap_["Compare2New"] = Compare2New_Process;
      processMap_["AddFaceObjNew"] = AddFaceObjNew_Process;
      processMap_["AddFaceTemplateNew"] = AddFaceTemplateNew_Process;
      processMap_["CompareNewMulti"] = CompareNewMulti_Process;
      processMap_["AnalysisCmpRecordC"] = AnalysisCmpRecordC_Process;
      processMap_["TargetFeatureAnalysis"] = TargetFeatureAnalysis_Process;
      processMap_["NoTargetFeatureAnalysis"] = NoTargetFeatureAnalysis_Process;
      processMap_["DetectImgNew"] = DetectImgNew_Process;
      processMap_["CmpVisitorNew"] = CmpVisitorNew_Process;
      processMap_["VisitorVerifiCmpNew"] = VisitorVerifiCmpNew_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void CompareTwoFeaNew_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      CompareTwoFeaNew_args args = new CompareTwoFeaNew_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      CompareTwoFeaNew_result result = new CompareTwoFeaNew_result();
      result.Success = iface_.CompareTwoFeaNew(args.Feature1, args.Feature2);
      oprot.WriteMessageBegin(new TMessage("CompareTwoFeaNew", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void DelFaceObjNew_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      DelFaceObjNew_args args = new DelFaceObjNew_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      DelFaceObjNew_result result = new DelFaceObjNew_result();
      result.Success = iface_.DelFaceObjNew(args.Id);
      oprot.WriteMessageBegin(new TMessage("DelFaceObjNew", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void DelFaceTemplateNew_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      DelFaceTemplateNew_args args = new DelFaceTemplateNew_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      DelFaceTemplateNew_result result = new DelFaceTemplateNew_result();
      result.Success = iface_.DelFaceTemplateNew(args.Id);
      oprot.WriteMessageBegin(new TMessage("DelFaceTemplateNew", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void CompareNew_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      CompareNew_args args = new CompareNew_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      CompareNew_result result = new CompareNew_result();
      result.Success = iface_.CompareNew(args.Feature, args.NThreshold, args.NMaxCount);
      oprot.WriteMessageBegin(new TMessage("CompareNew", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void Compare2New_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      Compare2New_args args = new Compare2New_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      Compare2New_result result = new Compare2New_result();
      result.Success = iface_.Compare2New(args.Feature, args.NThreshold, args.NMaxCount, args.Type, args.Sst);
      oprot.WriteMessageBegin(new TMessage("Compare2New", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void AddFaceObjNew_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      AddFaceObjNew_args args = new AddFaceObjNew_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      AddFaceObjNew_result result = new AddFaceObjNew_result();
      result.Success = iface_.AddFaceObjNew(args.Obj);
      oprot.WriteMessageBegin(new TMessage("AddFaceObjNew", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void AddFaceTemplateNew_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      AddFaceTemplateNew_args args = new AddFaceTemplateNew_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      AddFaceTemplateNew_result result = new AddFaceTemplateNew_result();
      result.Success = iface_.AddFaceTemplateNew(args.Obj);
      oprot.WriteMessageBegin(new TMessage("AddFaceTemplateNew", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void CompareNewMulti_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      CompareNewMulti_args args = new CompareNewMulti_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      CompareNewMulti_result result = new CompareNewMulti_result();
      result.Success = iface_.CompareNewMulti(args.Fealist, args.NThreshold, args.NMaxCount);
      oprot.WriteMessageBegin(new TMessage("CompareNewMulti", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void AnalysisCmpRecordC_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      AnalysisCmpRecordC_args args = new AnalysisCmpRecordC_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      AnalysisCmpRecordC_result result = new AnalysisCmpRecordC_result();
      result.Success = iface_.AnalysisCmpRecordC(args.Capfea, args.Objfea, args.Capfealist, args.NThreshold);
      oprot.WriteMessageBegin(new TMessage("AnalysisCmpRecordC", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void TargetFeatureAnalysis_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      TargetFeatureAnalysis_args args = new TargetFeatureAnalysis_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      TargetFeatureAnalysis_result result = new TargetFeatureAnalysis_result();
      result.Success = iface_.TargetFeatureAnalysis(args.Capfea, args.Threshold, args.Maxcount, args.Fealist);
      oprot.WriteMessageBegin(new TMessage("TargetFeatureAnalysis", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void NoTargetFeatureAnalysis_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      NoTargetFeatureAnalysis_args args = new NoTargetFeatureAnalysis_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      NoTargetFeatureAnalysis_result result = new NoTargetFeatureAnalysis_result();
      result.Success = iface_.NoTargetFeatureAnalysis(args.Capfea, args.Threshold, args.Maxcount, args.Fealist);
      oprot.WriteMessageBegin(new TMessage("NoTargetFeatureAnalysis", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void DetectImgNew_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      DetectImgNew_args args = new DetectImgNew_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      DetectImgNew_result result = new DetectImgNew_result();
      result.Success = iface_.DetectImgNew(args.Img);
      oprot.WriteMessageBegin(new TMessage("DetectImgNew", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void CmpVisitorNew_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      CmpVisitorNew_args args = new CmpVisitorNew_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      CmpVisitorNew_result result = new CmpVisitorNew_result();
      result.Success = iface_.CmpVisitorNew(args.IdImg, args.Img);
      oprot.WriteMessageBegin(new TMessage("CmpVisitorNew", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void VisitorVerifiCmpNew_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      VisitorVerifiCmpNew_args args = new VisitorVerifiCmpNew_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      VisitorVerifiCmpNew_result result = new VisitorVerifiCmpNew_result();
      result.Success = iface_.VisitorVerifiCmpNew(args.Img);
      oprot.WriteMessageBegin(new TMessage("VisitorVerifiCmpNew", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CompareTwoFeaNew_args : TBase
  {
    private byte[] _Feature1;
    private byte[] _Feature2;

    public byte[] Feature1
    {
      get
      {
        return _Feature1;
      }
      set
      {
        __isset.Feature1 = true;
        this._Feature1 = value;
      }
    }

    public byte[] Feature2
    {
      get
      {
        return _Feature2;
      }
      set
      {
        __isset.Feature2 = true;
        this._Feature2 = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Feature1;
      public bool Feature2;
    }

    public CompareTwoFeaNew_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Feature1 = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Feature2 = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CompareTwoFeaNew_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Feature1 != null && __isset.Feature1) {
          field.Name = "Feature1";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Feature1);
          oprot.WriteFieldEnd();
        }
        if (Feature2 != null && __isset.Feature2) {
          field.Name = "Feature2";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Feature2);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CompareTwoFeaNew_args(");
      bool __first = true;
      if (Feature1 != null && __isset.Feature1) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Feature1: ");
        __sb.Append(Feature1);
      }
      if (Feature2 != null && __isset.Feature2) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Feature2: ");
        __sb.Append(Feature2);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CompareTwoFeaNew_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public CompareTwoFeaNew_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CompareTwoFeaNew_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CompareTwoFeaNew_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelFaceObjNew_args : TBase
  {
    private string _id;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public DelFaceObjNew_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelFaceObjNew_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelFaceObjNew_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelFaceObjNew_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public DelFaceObjNew_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelFaceObjNew_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelFaceObjNew_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelFaceTemplateNew_args : TBase
  {
    private string _id;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public DelFaceTemplateNew_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelFaceTemplateNew_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelFaceTemplateNew_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelFaceTemplateNew_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public DelFaceTemplateNew_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelFaceTemplateNew_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelFaceTemplateNew_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CompareNew_args : TBase
  {
    private byte[] _Feature;
    private int _nThreshold;
    private int _nMaxCount;

    public byte[] Feature
    {
      get
      {
        return _Feature;
      }
      set
      {
        __isset.Feature = true;
        this._Feature = value;
      }
    }

    public int NThreshold
    {
      get
      {
        return _nThreshold;
      }
      set
      {
        __isset.nThreshold = true;
        this._nThreshold = value;
      }
    }

    public int NMaxCount
    {
      get
      {
        return _nMaxCount;
      }
      set
      {
        __isset.nMaxCount = true;
        this._nMaxCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Feature;
      public bool nThreshold;
      public bool nMaxCount;
    }

    public CompareNew_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Feature = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                NThreshold = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                NMaxCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CompareNew_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Feature != null && __isset.Feature) {
          field.Name = "Feature";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Feature);
          oprot.WriteFieldEnd();
        }
        if (__isset.nThreshold) {
          field.Name = "nThreshold";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NThreshold);
          oprot.WriteFieldEnd();
        }
        if (__isset.nMaxCount) {
          field.Name = "nMaxCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NMaxCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CompareNew_args(");
      bool __first = true;
      if (Feature != null && __isset.Feature) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Feature: ");
        __sb.Append(Feature);
      }
      if (__isset.nThreshold) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NThreshold: ");
        __sb.Append(NThreshold);
      }
      if (__isset.nMaxCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NMaxCount: ");
        __sb.Append(NMaxCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CompareNew_result : TBase
  {
    private List<CmpResult> _success;

    public List<CmpResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public CompareNew_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpResult>();
                  TList _list52 = iprot.ReadListBegin();
                  for( int _i53 = 0; _i53 < _list52.Count; ++_i53)
                  {
                    CmpResult _elem54;
                    _elem54 = new CmpResult();
                    _elem54.Read(iprot);
                    Success.Add(_elem54);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CompareNew_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpResult _iter55 in Success)
              {
                _iter55.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CompareNew_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Compare2New_args : TBase
  {
    private byte[] _Feature;
    private int _nThreshold;
    private int _nMaxCount;
    private int _type;
    private int _sst;

    public byte[] Feature
    {
      get
      {
        return _Feature;
      }
      set
      {
        __isset.Feature = true;
        this._Feature = value;
      }
    }

    public int NThreshold
    {
      get
      {
        return _nThreshold;
      }
      set
      {
        __isset.nThreshold = true;
        this._nThreshold = value;
      }
    }

    public int NMaxCount
    {
      get
      {
        return _nMaxCount;
      }
      set
      {
        __isset.nMaxCount = true;
        this._nMaxCount = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Sst
    {
      get
      {
        return _sst;
      }
      set
      {
        __isset.sst = true;
        this._sst = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Feature;
      public bool nThreshold;
      public bool nMaxCount;
      public bool type;
      public bool sst;
    }

    public Compare2New_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Feature = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                NThreshold = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                NMaxCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Sst = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Compare2New_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Feature != null && __isset.Feature) {
          field.Name = "Feature";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Feature);
          oprot.WriteFieldEnd();
        }
        if (__isset.nThreshold) {
          field.Name = "nThreshold";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NThreshold);
          oprot.WriteFieldEnd();
        }
        if (__isset.nMaxCount) {
          field.Name = "nMaxCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NMaxCount);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.sst) {
          field.Name = "sst";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Sst);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Compare2New_args(");
      bool __first = true;
      if (Feature != null && __isset.Feature) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Feature: ");
        __sb.Append(Feature);
      }
      if (__isset.nThreshold) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NThreshold: ");
        __sb.Append(NThreshold);
      }
      if (__isset.nMaxCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NMaxCount: ");
        __sb.Append(NMaxCount);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.sst) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sst: ");
        __sb.Append(Sst);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Compare2New_result : TBase
  {
    private List<CmpResult> _success;

    public List<CmpResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public Compare2New_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpResult>();
                  TList _list56 = iprot.ReadListBegin();
                  for( int _i57 = 0; _i57 < _list56.Count; ++_i57)
                  {
                    CmpResult _elem58;
                    _elem58 = new CmpResult();
                    _elem58.Read(iprot);
                    Success.Add(_elem58);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Compare2New_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpResult _iter59 in Success)
              {
                _iter59.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Compare2New_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddFaceObjNew_args : TBase
  {
    private CmpServerFaceObj _obj;

    public CmpServerFaceObj Obj
    {
      get
      {
        return _obj;
      }
      set
      {
        __isset.obj = true;
        this._obj = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool obj;
    }

    public AddFaceObjNew_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Obj = new CmpServerFaceObj();
                Obj.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddFaceObjNew_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Obj != null && __isset.obj) {
          field.Name = "obj";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Obj.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddFaceObjNew_args(");
      bool __first = true;
      if (Obj != null && __isset.obj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Obj: ");
        __sb.Append(Obj== null ? "<null>" : Obj.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddFaceObjNew_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public AddFaceObjNew_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddFaceObjNew_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddFaceObjNew_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddFaceTemplateNew_args : TBase
  {
    private FaceTemplateEx _obj;

    public FaceTemplateEx Obj
    {
      get
      {
        return _obj;
      }
      set
      {
        __isset.obj = true;
        this._obj = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool obj;
    }

    public AddFaceTemplateNew_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Obj = new FaceTemplateEx();
                Obj.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddFaceTemplateNew_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Obj != null && __isset.obj) {
          field.Name = "obj";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Obj.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddFaceTemplateNew_args(");
      bool __first = true;
      if (Obj != null && __isset.obj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Obj: ");
        __sb.Append(Obj== null ? "<null>" : Obj.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddFaceTemplateNew_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public AddFaceTemplateNew_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddFaceTemplateNew_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddFaceTemplateNew_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CompareNewMulti_args : TBase
  {
    private List<FeaInfo> _fealist;
    private int _nThreshold;
    private int _nMaxCount;

    public List<FeaInfo> Fealist
    {
      get
      {
        return _fealist;
      }
      set
      {
        __isset.fealist = true;
        this._fealist = value;
      }
    }

    public int NThreshold
    {
      get
      {
        return _nThreshold;
      }
      set
      {
        __isset.nThreshold = true;
        this._nThreshold = value;
      }
    }

    public int NMaxCount
    {
      get
      {
        return _nMaxCount;
      }
      set
      {
        __isset.nMaxCount = true;
        this._nMaxCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool fealist;
      public bool nThreshold;
      public bool nMaxCount;
    }

    public CompareNewMulti_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Fealist = new List<FeaInfo>();
                  TList _list60 = iprot.ReadListBegin();
                  for( int _i61 = 0; _i61 < _list60.Count; ++_i61)
                  {
                    FeaInfo _elem62;
                    _elem62 = new FeaInfo();
                    _elem62.Read(iprot);
                    Fealist.Add(_elem62);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                NThreshold = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                NMaxCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CompareNewMulti_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Fealist != null && __isset.fealist) {
          field.Name = "fealist";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Fealist.Count));
            foreach (FeaInfo _iter63 in Fealist)
            {
              _iter63.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.nThreshold) {
          field.Name = "nThreshold";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NThreshold);
          oprot.WriteFieldEnd();
        }
        if (__isset.nMaxCount) {
          field.Name = "nMaxCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NMaxCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CompareNewMulti_args(");
      bool __first = true;
      if (Fealist != null && __isset.fealist) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Fealist: ");
        __sb.Append(Fealist);
      }
      if (__isset.nThreshold) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NThreshold: ");
        __sb.Append(NThreshold);
      }
      if (__isset.nMaxCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NMaxCount: ");
        __sb.Append(NMaxCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CompareNewMulti_result : TBase
  {
    private List<CmpResultMulti> _success;

    public List<CmpResultMulti> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public CompareNewMulti_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpResultMulti>();
                  TList _list64 = iprot.ReadListBegin();
                  for( int _i65 = 0; _i65 < _list64.Count; ++_i65)
                  {
                    CmpResultMulti _elem66;
                    _elem66 = new CmpResultMulti();
                    _elem66.Read(iprot);
                    Success.Add(_elem66);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CompareNewMulti_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpResultMulti _iter67 in Success)
              {
                _iter67.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CompareNewMulti_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AnalysisCmpRecordC_args : TBase
  {
    private byte[] _capfea;
    private byte[] _objfea;
    private List<CapListCfg> _capfealist;
    private int _nThreshold;

    public byte[] Capfea
    {
      get
      {
        return _capfea;
      }
      set
      {
        __isset.capfea = true;
        this._capfea = value;
      }
    }

    public byte[] Objfea
    {
      get
      {
        return _objfea;
      }
      set
      {
        __isset.objfea = true;
        this._objfea = value;
      }
    }

    public List<CapListCfg> Capfealist
    {
      get
      {
        return _capfealist;
      }
      set
      {
        __isset.capfealist = true;
        this._capfealist = value;
      }
    }

    public int NThreshold
    {
      get
      {
        return _nThreshold;
      }
      set
      {
        __isset.nThreshold = true;
        this._nThreshold = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool capfea;
      public bool objfea;
      public bool capfealist;
      public bool nThreshold;
    }

    public AnalysisCmpRecordC_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Capfea = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Objfea = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Capfealist = new List<CapListCfg>();
                  TList _list68 = iprot.ReadListBegin();
                  for( int _i69 = 0; _i69 < _list68.Count; ++_i69)
                  {
                    CapListCfg _elem70;
                    _elem70 = new CapListCfg();
                    _elem70.Read(iprot);
                    Capfealist.Add(_elem70);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                NThreshold = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AnalysisCmpRecordC_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Capfea != null && __isset.capfea) {
          field.Name = "capfea";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Capfea);
          oprot.WriteFieldEnd();
        }
        if (Objfea != null && __isset.objfea) {
          field.Name = "objfea";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Objfea);
          oprot.WriteFieldEnd();
        }
        if (Capfealist != null && __isset.capfealist) {
          field.Name = "capfealist";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Capfealist.Count));
            foreach (CapListCfg _iter71 in Capfealist)
            {
              _iter71.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.nThreshold) {
          field.Name = "nThreshold";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NThreshold);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AnalysisCmpRecordC_args(");
      bool __first = true;
      if (Capfea != null && __isset.capfea) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Capfea: ");
        __sb.Append(Capfea);
      }
      if (Objfea != null && __isset.objfea) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Objfea: ");
        __sb.Append(Objfea);
      }
      if (Capfealist != null && __isset.capfealist) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Capfealist: ");
        __sb.Append(Capfealist);
      }
      if (__isset.nThreshold) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NThreshold: ");
        __sb.Append(NThreshold);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AnalysisCmpRecordC_result : TBase
  {
    private List<ScoreInfo> _success;

    public List<ScoreInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public AnalysisCmpRecordC_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ScoreInfo>();
                  TList _list72 = iprot.ReadListBegin();
                  for( int _i73 = 0; _i73 < _list72.Count; ++_i73)
                  {
                    ScoreInfo _elem74;
                    _elem74 = new ScoreInfo();
                    _elem74.Read(iprot);
                    Success.Add(_elem74);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AnalysisCmpRecordC_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ScoreInfo _iter75 in Success)
              {
                _iter75.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AnalysisCmpRecordC_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TargetFeatureAnalysis_args : TBase
  {
    private byte[] _capfea;
    private int _threshold;
    private int _maxcount;
    private List<FeaInfoLBS> _fealist;

    public byte[] Capfea
    {
      get
      {
        return _capfea;
      }
      set
      {
        __isset.capfea = true;
        this._capfea = value;
      }
    }

    public int Threshold
    {
      get
      {
        return _threshold;
      }
      set
      {
        __isset.threshold = true;
        this._threshold = value;
      }
    }

    public int Maxcount
    {
      get
      {
        return _maxcount;
      }
      set
      {
        __isset.maxcount = true;
        this._maxcount = value;
      }
    }

    public List<FeaInfoLBS> Fealist
    {
      get
      {
        return _fealist;
      }
      set
      {
        __isset.fealist = true;
        this._fealist = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool capfea;
      public bool threshold;
      public bool maxcount;
      public bool fealist;
    }

    public TargetFeatureAnalysis_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Capfea = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Threshold = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Maxcount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Fealist = new List<FeaInfoLBS>();
                  TList _list76 = iprot.ReadListBegin();
                  for( int _i77 = 0; _i77 < _list76.Count; ++_i77)
                  {
                    FeaInfoLBS _elem78;
                    _elem78 = new FeaInfoLBS();
                    _elem78.Read(iprot);
                    Fealist.Add(_elem78);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TargetFeatureAnalysis_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Capfea != null && __isset.capfea) {
          field.Name = "capfea";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Capfea);
          oprot.WriteFieldEnd();
        }
        if (__isset.threshold) {
          field.Name = "threshold";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Threshold);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxcount) {
          field.Name = "maxcount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Maxcount);
          oprot.WriteFieldEnd();
        }
        if (Fealist != null && __isset.fealist) {
          field.Name = "fealist";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Fealist.Count));
            foreach (FeaInfoLBS _iter79 in Fealist)
            {
              _iter79.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TargetFeatureAnalysis_args(");
      bool __first = true;
      if (Capfea != null && __isset.capfea) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Capfea: ");
        __sb.Append(Capfea);
      }
      if (__isset.threshold) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Threshold: ");
        __sb.Append(Threshold);
      }
      if (__isset.maxcount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Maxcount: ");
        __sb.Append(Maxcount);
      }
      if (Fealist != null && __isset.fealist) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Fealist: ");
        __sb.Append(Fealist);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TargetFeatureAnalysis_result : TBase
  {
    private List<ScoreInfoA> _success;

    public List<ScoreInfoA> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public TargetFeatureAnalysis_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ScoreInfoA>();
                  TList _list80 = iprot.ReadListBegin();
                  for( int _i81 = 0; _i81 < _list80.Count; ++_i81)
                  {
                    ScoreInfoA _elem82;
                    _elem82 = new ScoreInfoA();
                    _elem82.Read(iprot);
                    Success.Add(_elem82);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TargetFeatureAnalysis_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ScoreInfoA _iter83 in Success)
              {
                _iter83.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TargetFeatureAnalysis_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NoTargetFeatureAnalysis_args : TBase
  {
    private byte[] _capfea;
    private int _threshold;
    private int _maxcount;
    private List<FeaInfoLBS> _fealist;

    public byte[] Capfea
    {
      get
      {
        return _capfea;
      }
      set
      {
        __isset.capfea = true;
        this._capfea = value;
      }
    }

    public int Threshold
    {
      get
      {
        return _threshold;
      }
      set
      {
        __isset.threshold = true;
        this._threshold = value;
      }
    }

    public int Maxcount
    {
      get
      {
        return _maxcount;
      }
      set
      {
        __isset.maxcount = true;
        this._maxcount = value;
      }
    }

    public List<FeaInfoLBS> Fealist
    {
      get
      {
        return _fealist;
      }
      set
      {
        __isset.fealist = true;
        this._fealist = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool capfea;
      public bool threshold;
      public bool maxcount;
      public bool fealist;
    }

    public NoTargetFeatureAnalysis_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Capfea = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Threshold = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Maxcount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Fealist = new List<FeaInfoLBS>();
                  TList _list84 = iprot.ReadListBegin();
                  for( int _i85 = 0; _i85 < _list84.Count; ++_i85)
                  {
                    FeaInfoLBS _elem86;
                    _elem86 = new FeaInfoLBS();
                    _elem86.Read(iprot);
                    Fealist.Add(_elem86);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("NoTargetFeatureAnalysis_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Capfea != null && __isset.capfea) {
          field.Name = "capfea";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Capfea);
          oprot.WriteFieldEnd();
        }
        if (__isset.threshold) {
          field.Name = "threshold";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Threshold);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxcount) {
          field.Name = "maxcount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Maxcount);
          oprot.WriteFieldEnd();
        }
        if (Fealist != null && __isset.fealist) {
          field.Name = "fealist";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Fealist.Count));
            foreach (FeaInfoLBS _iter87 in Fealist)
            {
              _iter87.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NoTargetFeatureAnalysis_args(");
      bool __first = true;
      if (Capfea != null && __isset.capfea) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Capfea: ");
        __sb.Append(Capfea);
      }
      if (__isset.threshold) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Threshold: ");
        __sb.Append(Threshold);
      }
      if (__isset.maxcount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Maxcount: ");
        __sb.Append(Maxcount);
      }
      if (Fealist != null && __isset.fealist) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Fealist: ");
        __sb.Append(Fealist);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NoTargetFeatureAnalysis_result : TBase
  {
    private List<AppearCount> _success;

    public List<AppearCount> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public NoTargetFeatureAnalysis_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<AppearCount>();
                  TList _list88 = iprot.ReadListBegin();
                  for( int _i89 = 0; _i89 < _list88.Count; ++_i89)
                  {
                    AppearCount _elem90;
                    _elem90 = new AppearCount();
                    _elem90.Read(iprot);
                    Success.Add(_elem90);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("NoTargetFeatureAnalysis_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (AppearCount _iter91 in Success)
              {
                _iter91.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NoTargetFeatureAnalysis_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DetectImgNew_args : TBase
  {
    private byte[] _img;

    public byte[] Img
    {
      get
      {
        return _img;
      }
      set
      {
        __isset.img = true;
        this._img = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool img;
    }

    public DetectImgNew_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Img = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DetectImgNew_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Img != null && __isset.img) {
          field.Name = "img";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Img);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DetectImgNew_args(");
      bool __first = true;
      if (Img != null && __isset.img) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Img: ");
        __sb.Append(Img);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DetectImgNew_result : TBase
  {
    private List<FaceInfo> _success;

    public List<FaceInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public DetectImgNew_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<FaceInfo>();
                  TList _list92 = iprot.ReadListBegin();
                  for( int _i93 = 0; _i93 < _list92.Count; ++_i93)
                  {
                    FaceInfo _elem94;
                    _elem94 = new FaceInfo();
                    _elem94.Read(iprot);
                    Success.Add(_elem94);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DetectImgNew_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (FaceInfo _iter95 in Success)
              {
                _iter95.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DetectImgNew_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CmpVisitorNew_args : TBase
  {
    private byte[] _IdImg;
    private byte[] _Img;

    public byte[] IdImg
    {
      get
      {
        return _IdImg;
      }
      set
      {
        __isset.IdImg = true;
        this._IdImg = value;
      }
    }

    public byte[] Img
    {
      get
      {
        return _Img;
      }
      set
      {
        __isset.Img = true;
        this._Img = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool IdImg;
      public bool Img;
    }

    public CmpVisitorNew_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IdImg = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Img = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CmpVisitorNew_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IdImg != null && __isset.IdImg) {
          field.Name = "IdImg";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(IdImg);
          oprot.WriteFieldEnd();
        }
        if (Img != null && __isset.Img) {
          field.Name = "Img";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Img);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CmpVisitorNew_args(");
      bool __first = true;
      if (IdImg != null && __isset.IdImg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdImg: ");
        __sb.Append(IdImg);
      }
      if (Img != null && __isset.Img) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Img: ");
        __sb.Append(Img);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CmpVisitorNew_result : TBase
  {
    private CResultCfg _success;

    public CResultCfg Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public CmpVisitorNew_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new CResultCfg();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CmpVisitorNew_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CmpVisitorNew_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class VisitorVerifiCmpNew_args : TBase
  {
    private List<byte[]> _Img;

    public List<byte[]> Img
    {
      get
      {
        return _Img;
      }
      set
      {
        __isset.Img = true;
        this._Img = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Img;
    }

    public VisitorVerifiCmpNew_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Img = new List<byte[]>();
                  TList _list96 = iprot.ReadListBegin();
                  for( int _i97 = 0; _i97 < _list96.Count; ++_i97)
                  {
                    byte[] _elem98;
                    _elem98 = iprot.ReadBinary();
                    Img.Add(_elem98);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("VisitorVerifiCmpNew_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Img != null && __isset.Img) {
          field.Name = "Img";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Img.Count));
            foreach (byte[] _iter99 in Img)
            {
              oprot.WriteBinary(_iter99);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("VisitorVerifiCmpNew_args(");
      bool __first = true;
      if (Img != null && __isset.Img) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Img: ");
        __sb.Append(Img);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class VisitorVerifiCmpNew_result : TBase
  {
    private List<CompareImgResult> _success;

    public List<CompareImgResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public VisitorVerifiCmpNew_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CompareImgResult>();
                  TList _list100 = iprot.ReadListBegin();
                  for( int _i101 = 0; _i101 < _list100.Count; ++_i101)
                  {
                    CompareImgResult _elem102;
                    _elem102 = new CompareImgResult();
                    _elem102.Read(iprot);
                    Success.Add(_elem102);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("VisitorVerifiCmpNew_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CompareImgResult _iter103 in Success)
              {
                _iter103.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("VisitorVerifiCmpNew_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
