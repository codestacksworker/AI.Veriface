/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class LastRecordInfo : TBase
{
  private List<RealtimeCapInfoLBS> _caplist;
  private List<RealtimeCmpInfoLBS> _cmplist;

  public List<RealtimeCapInfoLBS> Caplist
  {
    get
    {
      return _caplist;
    }
    set
    {
      __isset.caplist = true;
      this._caplist = value;
    }
  }

  public List<RealtimeCmpInfoLBS> Cmplist
  {
    get
    {
      return _cmplist;
    }
    set
    {
      __isset.cmplist = true;
      this._cmplist = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool caplist;
    public bool cmplist;
  }

  public LastRecordInfo() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Caplist = new List<RealtimeCapInfoLBS>();
                TList _list32 = iprot.ReadListBegin();
                for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                {
                  RealtimeCapInfoLBS _elem34;
                  _elem34 = new RealtimeCapInfoLBS();
                  _elem34.Read(iprot);
                  Caplist.Add(_elem34);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Cmplist = new List<RealtimeCmpInfoLBS>();
                TList _list35 = iprot.ReadListBegin();
                for( int _i36 = 0; _i36 < _list35.Count; ++_i36)
                {
                  RealtimeCmpInfoLBS _elem37;
                  _elem37 = new RealtimeCmpInfoLBS();
                  _elem37.Read(iprot);
                  Cmplist.Add(_elem37);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("LastRecordInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Caplist != null && __isset.caplist) {
        field.Name = "caplist";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Caplist.Count));
          foreach (RealtimeCapInfoLBS _iter38 in Caplist)
          {
            _iter38.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Cmplist != null && __isset.cmplist) {
        field.Name = "cmplist";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Cmplist.Count));
          foreach (RealtimeCmpInfoLBS _iter39 in Cmplist)
          {
            _iter39.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("LastRecordInfo(");
    bool __first = true;
    if (Caplist != null && __isset.caplist) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Caplist: ");
      __sb.Append(Caplist);
    }
    if (Cmplist != null && __isset.cmplist) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Cmplist: ");
      __sb.Append(Cmplist);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

