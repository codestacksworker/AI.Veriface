/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class AllAreaStatInfo : TBase
{
  private int _areacount;
  private int _visitorcount;
  private List<AreaStatInfo> _asvec;

  public int Areacount
  {
    get
    {
      return _areacount;
    }
    set
    {
      __isset.areacount = true;
      this._areacount = value;
    }
  }

  public int Visitorcount
  {
    get
    {
      return _visitorcount;
    }
    set
    {
      __isset.visitorcount = true;
      this._visitorcount = value;
    }
  }

  public List<AreaStatInfo> Asvec
  {
    get
    {
      return _asvec;
    }
    set
    {
      __isset.asvec = true;
      this._asvec = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool areacount;
    public bool visitorcount;
    public bool asvec;
  }

  public AllAreaStatInfo() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Areacount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Visitorcount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Asvec = new List<AreaStatInfo>();
                TList _list20 = iprot.ReadListBegin();
                for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                {
                  AreaStatInfo _elem22;
                  _elem22 = new AreaStatInfo();
                  _elem22.Read(iprot);
                  Asvec.Add(_elem22);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("AllAreaStatInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.areacount) {
        field.Name = "areacount";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Areacount);
        oprot.WriteFieldEnd();
      }
      if (__isset.visitorcount) {
        field.Name = "visitorcount";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Visitorcount);
        oprot.WriteFieldEnd();
      }
      if (Asvec != null && __isset.asvec) {
        field.Name = "asvec";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Asvec.Count));
          foreach (AreaStatInfo _iter23 in Asvec)
          {
            _iter23.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("AllAreaStatInfo(");
    bool __first = true;
    if (__isset.areacount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Areacount: ");
      __sb.Append(Areacount);
    }
    if (__isset.visitorcount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Visitorcount: ");
      __sb.Append(Visitorcount);
    }
    if (Asvec != null && __isset.asvec) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Asvec: ");
      __sb.Append(Asvec);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

