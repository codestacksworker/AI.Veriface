/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TrackInfo : TBase
{
  private string _tcChannelID;
  private string _name;
  private int _channel_type;
  private string _typestr;
  private string _channel_address;
  private string _longitude;
  private string _latitude;
  private List<CapCount> _capimg;

  public string TcChannelID
  {
    get
    {
      return _tcChannelID;
    }
    set
    {
      __isset.tcChannelID = true;
      this._tcChannelID = value;
    }
  }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public int Channel_type
  {
    get
    {
      return _channel_type;
    }
    set
    {
      __isset.channel_type = true;
      this._channel_type = value;
    }
  }

  public string Typestr
  {
    get
    {
      return _typestr;
    }
    set
    {
      __isset.typestr = true;
      this._typestr = value;
    }
  }

  public string Channel_address
  {
    get
    {
      return _channel_address;
    }
    set
    {
      __isset.channel_address = true;
      this._channel_address = value;
    }
  }

  public string Longitude
  {
    get
    {
      return _longitude;
    }
    set
    {
      __isset.longitude = true;
      this._longitude = value;
    }
  }

  public string Latitude
  {
    get
    {
      return _latitude;
    }
    set
    {
      __isset.latitude = true;
      this._latitude = value;
    }
  }

  public List<CapCount> Capimg
  {
    get
    {
      return _capimg;
    }
    set
    {
      __isset.capimg = true;
      this._capimg = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool tcChannelID;
    public bool name;
    public bool channel_type;
    public bool typestr;
    public bool channel_address;
    public bool longitude;
    public bool latitude;
    public bool capimg;
  }

  public TrackInfo() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TcChannelID = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Channel_type = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Typestr = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Channel_address = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Longitude = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Latitude = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                Capimg = new List<CapCount>();
                TList _list44 = iprot.ReadListBegin();
                for( int _i45 = 0; _i45 < _list44.Count; ++_i45)
                {
                  CapCount _elem46;
                  _elem46 = new CapCount();
                  _elem46.Read(iprot);
                  Capimg.Add(_elem46);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TrackInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TcChannelID != null && __isset.tcChannelID) {
        field.Name = "tcChannelID";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TcChannelID);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.channel_type) {
        field.Name = "channel_type";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Channel_type);
        oprot.WriteFieldEnd();
      }
      if (Typestr != null && __isset.typestr) {
        field.Name = "typestr";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Typestr);
        oprot.WriteFieldEnd();
      }
      if (Channel_address != null && __isset.channel_address) {
        field.Name = "channel_address";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Channel_address);
        oprot.WriteFieldEnd();
      }
      if (Longitude != null && __isset.longitude) {
        field.Name = "longitude";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Longitude);
        oprot.WriteFieldEnd();
      }
      if (Latitude != null && __isset.latitude) {
        field.Name = "latitude";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Latitude);
        oprot.WriteFieldEnd();
      }
      if (Capimg != null && __isset.capimg) {
        field.Name = "capimg";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Capimg.Count));
          foreach (CapCount _iter47 in Capimg)
          {
            _iter47.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TrackInfo(");
    bool __first = true;
    if (TcChannelID != null && __isset.tcChannelID) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TcChannelID: ");
      __sb.Append(TcChannelID);
    }
    if (Name != null && __isset.name) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Name: ");
      __sb.Append(Name);
    }
    if (__isset.channel_type) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Channel_type: ");
      __sb.Append(Channel_type);
    }
    if (Typestr != null && __isset.typestr) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Typestr: ");
      __sb.Append(Typestr);
    }
    if (Channel_address != null && __isset.channel_address) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Channel_address: ");
      __sb.Append(Channel_address);
    }
    if (Longitude != null && __isset.longitude) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Longitude: ");
      __sb.Append(Longitude);
    }
    if (Latitude != null && __isset.latitude) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Latitude: ");
      __sb.Append(Latitude);
    }
    if (Capimg != null && __isset.capimg) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Capimg: ");
      __sb.Append(Capimg);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

