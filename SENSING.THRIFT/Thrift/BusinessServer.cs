/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class BusinessServer {
  public interface Iface {
    int UpLoadCapFace(FaceInfo fi, int nFeaLen, byte[] Feature, int nImgLen, byte[] Image);
    #if SILVERLIGHT
    IAsyncResult Begin_UpLoadCapFace(AsyncCallback callback, object state, FaceInfo fi, int nFeaLen, byte[] Feature, int nImgLen, byte[] Image);
    int End_UpLoadCapFace(IAsyncResult asyncResult);
    #endif
    int UpLoadCapFace1(string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis);
    #if SILVERLIGHT
    IAsyncResult Begin_UpLoadCapFace1(AsyncCallback callback, object state, string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis);
    int End_UpLoadCapFace1(IAsyncResult asyncResult);
    #endif
    int OpenChannel(string channelID);
    #if SILVERLIGHT
    IAsyncResult Begin_OpenChannel(AsyncCallback callback, object state, string channelID);
    int End_OpenChannel(IAsyncResult asyncResult);
    #endif
    int CloseChannel(string channelID);
    #if SILVERLIGHT
    IAsyncResult Begin_CloseChannel(AsyncCallback callback, object state, string channelID);
    int End_CloseChannel(IAsyncResult asyncResult);
    #endif
    List<string> OpenAllChannel();
    #if SILVERLIGHT
    IAsyncResult Begin_OpenAllChannel(AsyncCallback callback, object state);
    List<string> End_OpenAllChannel(IAsyncResult asyncResult);
    #endif
    List<string> CloseAllChannel();
    #if SILVERLIGHT
    IAsyncResult Begin_CloseAllChannel(AsyncCallback callback, object state);
    List<string> End_CloseAllChannel(IAsyncResult asyncResult);
    #endif
    int AddChannel(ChannelCfg cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_AddChannel(AsyncCallback callback, object state, ChannelCfg cfg);
    int End_AddChannel(IAsyncResult asyncResult);
    #endif
    int DelChannel(string channelID);
    #if SILVERLIGHT
    IAsyncResult Begin_DelChannel(AsyncCallback callback, object state, string channelID);
    int End_DelChannel(IAsyncResult asyncResult);
    #endif
    int ModifyChannel(ChannelCfg cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_ModifyChannel(AsyncCallback callback, object state, ChannelCfg cfg);
    int End_ModifyChannel(IAsyncResult asyncResult);
    #endif
    List<ChannelCfg> QueryAllChannel();
    #if SILVERLIGHT
    IAsyncResult Begin_QueryAllChannel(AsyncCallback callback, object state);
    List<ChannelCfg> End_QueryAllChannel(IAsyncResult asyncResult);
    #endif
    ChannelCfg QueryChannel(string channelID);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryChannel(AsyncCallback callback, object state, string channelID);
    ChannelCfg End_QueryChannel(IAsyncResult asyncResult);
    #endif
    List<CapObjImg> QueryCapDetails(string id);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapDetails(AsyncCallback callback, object state, string id);
    List<CapObjImg> End_QueryCapDetails(IAsyncResult asyncResult);
    #endif
    List<CapFaceLog> QueryCapLog(string channel, long btime, long etime, int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapLog(AsyncCallback callback, object state, string channel, long btime, long etime, int nPageFirstNum, int nPageNum);
    List<CapFaceLog> End_QueryCapLog(IAsyncResult asyncResult);
    #endif
    List<byte[]> QueryCapLogImage(string ID);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapLogImage(AsyncCallback callback, object state, string ID);
    List<byte[]> End_QueryCapLogImage(IAsyncResult asyncResult);
    #endif
    int QueryCapRecordTotalCount(string channel, long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapRecordTotalCount(AsyncCallback callback, object state, string channel, long btime, long etime);
    int End_QueryCapRecordTotalCount(IAsyncResult asyncResult);
    #endif
    List<CapFaceLogWithImg> QueryCapLogWithImg(string channel, long btime, long etime, int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapLogWithImg(AsyncCallback callback, object state, string channel, long btime, long etime, int nPageFirstNum, int nPageNum);
    List<CapFaceLogWithImg> End_QueryCapLogWithImg(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLog> QueryCmpLog(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLog(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum);
    List<CmpFaceLog> End_QueryCmpLog(IAsyncResult asyncResult);
    #endif
    SCountInfoAndCmpFaceLog QueryCmpLogAndCount(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag, int queryType);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogAndCount(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag, int queryType);
    SCountInfoAndCmpFaceLog End_QueryCmpLogAndCount(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLog> QueryCmpLogByObjId(string objid, long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogByObjId(AsyncCallback callback, object state, string objid, long btime, long etime);
    List<CmpFaceLog> End_QueryCmpLogByObjId(IAsyncResult asyncResult);
    #endif
    List<SCountInfo> QueryCmpLogCountByObjId(string objid, long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogCountByObjId(AsyncCallback callback, object state, string objid, long btime, long etime);
    List<SCountInfo> End_QueryCmpLogCountByObjId(IAsyncResult asyncResult);
    #endif
    List<byte[]> QueryCmpLogImage(string ID);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogImage(AsyncCallback callback, object state, string ID);
    List<byte[]> End_QueryCmpLogImage(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLogWidthImg> QueryCmpLogWidthImg(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogWidthImg(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum);
    List<CmpFaceLogWidthImg> End_QueryCmpLogWidthImg(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLogWidthImg> QueryCmpByCapIdWidthImg(string ID);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpByCapIdWidthImg(AsyncCallback callback, object state, string ID);
    List<CmpFaceLogWidthImg> End_QueryCmpByCapIdWidthImg(IAsyncResult asyncResult);
    #endif
    int QueryCmpRecordTotalCount(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpRecordTotalCount(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime);
    int End_QueryCmpRecordTotalCount(IAsyncResult asyncResult);
    #endif
    List<CompareImgResult> CompareImg(byte[] image, int nThreshold, int nMaxCount);
    #if SILVERLIGHT
    IAsyncResult Begin_CompareImg(AsyncCallback callback, object state, byte[] image, int nThreshold, int nMaxCount);
    List<CompareImgResult> End_CompareImg(IAsyncResult asyncResult);
    #endif
    List<FaceObj> QueryFaceObj(string id, string name, int bage, int eage, int gender, int type, long btime, long etime, int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryFaceObj(AsyncCallback callback, object state, string id, string name, int bage, int eage, int gender, int type, long btime, long etime, int nPageFirstNum, int nPageNum);
    List<FaceObj> End_QueryFaceObj(IAsyncResult asyncResult);
    #endif
    List<FaceObj> QueryFaceObjByImg(byte[] image, int nThreshold, int nMaxCount);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryFaceObjByImg(AsyncCallback callback, object state, byte[] image, int nThreshold, int nMaxCount);
    List<FaceObj> End_QueryFaceObjByImg(IAsyncResult asyncResult);
    #endif
    int QueryFaceObjTotalCount(string id, string name, int bage, int eage, int gender, int type, long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryFaceObjTotalCount(AsyncCallback callback, object state, string id, string name, int bage, int eage, int gender, int type, long btime, long etime);
    int End_QueryFaceObjTotalCount(IAsyncResult asyncResult);
    #endif
    int ChangeTemplateImark(string uuid, int imark);
    #if SILVERLIGHT
    IAsyncResult Begin_ChangeTemplateImark(AsyncCallback callback, object state, string uuid, int imark);
    int End_ChangeTemplateImark(IAsyncResult asyncResult);
    #endif
    List<ErrorInfo> AddFaceObj(FaceObj obj);
    #if SILVERLIGHT
    IAsyncResult Begin_AddFaceObj(AsyncCallback callback, object state, FaceObj obj);
    List<ErrorInfo> End_AddFaceObj(IAsyncResult asyncResult);
    #endif
    int DelFaceObj(string ID);
    #if SILVERLIGHT
    IAsyncResult Begin_DelFaceObj(AsyncCallback callback, object state, string ID);
    int End_DelFaceObj(IAsyncResult asyncResult);
    #endif
    List<ErrorInfo> ModifyFaceObj(string id, FaceObj obj);
    #if SILVERLIGHT
    IAsyncResult Begin_ModifyFaceObj(AsyncCallback callback, object state, string id, FaceObj obj);
    List<ErrorInfo> End_ModifyFaceObj(IAsyncResult asyncResult);
    #endif
    List<string> QueryDefGender();
    #if SILVERLIGHT
    IAsyncResult Begin_QueryDefGender(AsyncCallback callback, object state);
    List<string> End_QueryDefGender(IAsyncResult asyncResult);
    #endif
    List<string> QueryDefFaceObjType();
    #if SILVERLIGHT
    IAsyncResult Begin_QueryDefFaceObjType(AsyncCallback callback, object state);
    List<string> End_QueryDefFaceObjType(IAsyncResult asyncResult);
    #endif
    List<string> QueryDefChannelType();
    #if SILVERLIGHT
    IAsyncResult Begin_QueryDefChannelType(AsyncCallback callback, object state);
    List<string> End_QueryDefChannelType(IAsyncResult asyncResult);
    #endif
    List<string> QueryDefCameraType();
    #if SILVERLIGHT
    IAsyncResult Begin_QueryDefCameraType(AsyncCallback callback, object state);
    List<string> End_QueryDefCameraType(IAsyncResult asyncResult);
    #endif
    int HearBeat();
    #if SILVERLIGHT
    IAsyncResult Begin_HearBeat(AsyncCallback callback, object state);
    int End_HearBeat(IAsyncResult asyncResult);
    #endif
    List<ChannelCfg> QueryChannelByIp(string capip);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryChannelByIp(AsyncCallback callback, object state, string capip);
    List<ChannelCfg> End_QueryChannelByIp(IAsyncResult asyncResult);
    #endif
    int QueryListFaceObjNum();
    #if SILVERLIGHT
    IAsyncResult Begin_QueryListFaceObjNum(AsyncCallback callback, object state);
    int End_QueryListFaceObjNum(IAsyncResult asyncResult);
    #endif
    List<FaceObjTemplate> QueryListFaceObj(int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryListFaceObj(AsyncCallback callback, object state, int nPageFirstNum, int nPageNum);
    List<FaceObjTemplate> End_QueryListFaceObj(IAsyncResult asyncResult);
    #endif
    int SetCMPthreshold(int threshold);
    #if SILVERLIGHT
    IAsyncResult Begin_SetCMPthreshold(AsyncCallback callback, object state, int threshold);
    int End_SetCMPthreshold(IAsyncResult asyncResult);
    #endif
    List<string> GetClientIPList();
    #if SILVERLIGHT
    IAsyncResult Begin_GetClientIPList(AsyncCallback callback, object state);
    List<string> End_GetClientIPList(IAsyncResult asyncResult);
    #endif
    string ClientRegion(ClientCfg cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_ClientRegion(AsyncCallback callback, object state, ClientCfg cfg);
    string End_ClientRegion(IAsyncResult asyncResult);
    #endif
    CResultCfg VisitorRegion(VisitorInfo cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_VisitorRegion(AsyncCallback callback, object state, VisitorInfo cfg);
    CResultCfg End_VisitorRegion(IAsyncResult asyncResult);
    #endif
    ErrorInfo UploadCmpLogFromFront(CmpFaceLogInfo cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_UploadCmpLogFromFront(AsyncCallback callback, object state, CmpFaceLogInfo cfg);
    ErrorInfo End_UploadCmpLogFromFront(IAsyncResult asyncResult);
    #endif
    List<CResultCfg> VisitorVerifi(List<byte[]> img, string channelID, string channelname);
    #if SILVERLIGHT
    IAsyncResult Begin_VisitorVerifi(AsyncCallback callback, object state, List<byte[]> img, string channelID, string channelname);
    List<CResultCfg> End_VisitorVerifi(IAsyncResult asyncResult);
    #endif
    int uploadrealcap(RealtimeCapInfo cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_uploadrealcap(AsyncCallback callback, object state, RealtimeCapInfo cfg);
    int End_uploadrealcap(IAsyncResult asyncResult);
    #endif
    int ServerRegion(List<SServerInfo> server);
    #if SILVERLIGHT
    IAsyncResult Begin_ServerRegion(AsyncCallback callback, object state, List<SServerInfo> server);
    int End_ServerRegion(IAsyncResult asyncResult);
    #endif
    List<ErrorInfo> SetConfig(List<SServerInfo> server, List<SConfigInfo> config);
    #if SILVERLIGHT
    IAsyncResult Begin_SetConfig(AsyncCallback callback, object state, List<SServerInfo> server, List<SConfigInfo> config);
    List<ErrorInfo> End_SetConfig(IAsyncResult asyncResult);
    #endif
    List<SConfigInfo> GetConfig(int stype);
    #if SILVERLIGHT
    IAsyncResult Begin_GetConfig(AsyncCallback callback, object state, int stype);
    List<SConfigInfo> End_GetConfig(IAsyncResult asyncResult);
    #endif
    List<SCountInfo> QueryCapRecordTotalCountH(string channel, long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapRecordTotalCountH(AsyncCallback callback, object state, string channel, long btime, long etime);
    List<SCountInfo> End_QueryCapRecordTotalCountH(IAsyncResult asyncResult);
    #endif
    List<SCountInfo> QueryCmpRecordTotalCountH(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpRecordTotalCountH(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime);
    List<SCountInfo> End_QueryCmpRecordTotalCountH(IAsyncResult asyncResult);
    #endif
    List<CapObjImg> QueryCapDetailsH(string id, string day);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapDetailsH(AsyncCallback callback, object state, string id, string day);
    List<CapObjImg> End_QueryCapDetailsH(IAsyncResult asyncResult);
    #endif
    List<byte[]> QueryCapLogImageH(string ID, string day);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapLogImageH(AsyncCallback callback, object state, string ID, string day);
    List<byte[]> End_QueryCapLogImageH(IAsyncResult asyncResult);
    #endif
    List<byte[]> QueryCmpLogImageH(string ID, string day);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogImageH(AsyncCallback callback, object state, string ID, string day);
    List<byte[]> End_QueryCmpLogImageH(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLogWidthImg> QueryCmpByCapIdWidthImgH(string ID, string day);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpByCapIdWidthImgH(AsyncCallback callback, object state, string ID, string day);
    List<CmpFaceLogWidthImg> End_QueryCmpByCapIdWidthImgH(IAsyncResult asyncResult);
    #endif
    List<CmpInfo2Cap> UpLoadCapFace2(string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis);
    #if SILVERLIGHT
    IAsyncResult Begin_UpLoadCapFace2(AsyncCallback callback, object state, string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis);
    List<CmpInfo2Cap> End_UpLoadCapFace2(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 抓拍上传，增加场景照片*
    /// </summary>
    /// <param name="ID"></param>
    /// <param name="day"></param>
    List<byte[]> QuerySenceImg(string ID, string day);
    #if SILVERLIGHT
    IAsyncResult Begin_QuerySenceImg(AsyncCallback callback, object state, string ID, string day);
    List<byte[]> End_QuerySenceImg(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 类型管理*
    /// </summary>
    /// <param name="ID"></param>
    List<STypeInfo> QueryDefGenderH(int ID);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryDefGenderH(AsyncCallback callback, object state, int ID);
    List<STypeInfo> End_QueryDefGenderH(IAsyncResult asyncResult);
    #endif
    List<STypeInfo> QueryDefFaceObjTypeH(int ID);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryDefFaceObjTypeH(AsyncCallback callback, object state, int ID);
    List<STypeInfo> End_QueryDefFaceObjTypeH(IAsyncResult asyncResult);
    #endif
    List<STypeInfo> QueryDefChannelTypeH(int ID);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryDefChannelTypeH(AsyncCallback callback, object state, int ID);
    List<STypeInfo> End_QueryDefChannelTypeH(IAsyncResult asyncResult);
    #endif
    List<STypeInfo> QueryDefCameraTypeH(int ID);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryDefCameraTypeH(AsyncCallback callback, object state, int ID);
    List<STypeInfo> End_QueryDefCameraTypeH(IAsyncResult asyncResult);
    #endif
    int SetDefGenderH(List<STypeInfo> sinfo);
    #if SILVERLIGHT
    IAsyncResult Begin_SetDefGenderH(AsyncCallback callback, object state, List<STypeInfo> sinfo);
    int End_SetDefGenderH(IAsyncResult asyncResult);
    #endif
    int SetDefFaceObjTypeH(List<STypeInfo> sinfo);
    #if SILVERLIGHT
    IAsyncResult Begin_SetDefFaceObjTypeH(AsyncCallback callback, object state, List<STypeInfo> sinfo);
    int End_SetDefFaceObjTypeH(IAsyncResult asyncResult);
    #endif
    int SetDefChannelTypeH(List<STypeInfo> sinfo);
    #if SILVERLIGHT
    IAsyncResult Begin_SetDefChannelTypeH(AsyncCallback callback, object state, List<STypeInfo> sinfo);
    int End_SetDefChannelTypeH(IAsyncResult asyncResult);
    #endif
    int SetDefCameraTypeH(List<STypeInfo> sinfo);
    #if SILVERLIGHT
    IAsyncResult Begin_SetDefCameraTypeH(AsyncCallback callback, object state, List<STypeInfo> sinfo);
    int End_SetDefCameraTypeH(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// *贵阳数博会 20161216 begin***
    /// </summary>
    /// <param name="cfg"></param>
    int AddDiaplayArea(DiaplayAreaCfg cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_AddDiaplayArea(AsyncCallback callback, object state, DiaplayAreaCfg cfg);
    int End_AddDiaplayArea(IAsyncResult asyncResult);
    #endif
    int ModDiaplayArea(DiaplayAreaCfg cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_ModDiaplayArea(AsyncCallback callback, object state, DiaplayAreaCfg cfg);
    int End_ModDiaplayArea(IAsyncResult asyncResult);
    #endif
    int DelDiaplayArea(string zid);
    #if SILVERLIGHT
    IAsyncResult Begin_DelDiaplayArea(AsyncCallback callback, object state, string zid);
    int End_DelDiaplayArea(IAsyncResult asyncResult);
    #endif
    int QueryListDiaplayAreaNum(string name);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryListDiaplayAreaNum(AsyncCallback callback, object state, string name);
    int End_QueryListDiaplayAreaNum(IAsyncResult asyncResult);
    #endif
    List<DiaplayAreaCfg> QueryListDiaplayArea(string name);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryListDiaplayArea(AsyncCallback callback, object state, string name);
    List<DiaplayAreaCfg> End_QueryListDiaplayArea(IAsyncResult asyncResult);
    #endif
    int AddChannelGY(ChannelCfgGY cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_AddChannelGY(AsyncCallback callback, object state, ChannelCfgGY cfg);
    int End_AddChannelGY(IAsyncResult asyncResult);
    #endif
    int DelChannelGY(string channelID);
    #if SILVERLIGHT
    IAsyncResult Begin_DelChannelGY(AsyncCallback callback, object state, string channelID);
    int End_DelChannelGY(IAsyncResult asyncResult);
    #endif
    int ModifyChannelGY(ChannelCfgGY cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_ModifyChannelGY(AsyncCallback callback, object state, ChannelCfgGY cfg);
    int End_ModifyChannelGY(IAsyncResult asyncResult);
    #endif
    List<ChannelCfgGY> QueryAllChannelGY();
    #if SILVERLIGHT
    IAsyncResult Begin_QueryAllChannelGY(AsyncCallback callback, object state);
    List<ChannelCfgGY> End_QueryAllChannelGY(IAsyncResult asyncResult);
    #endif
    ChannelCfgGY QueryChannelGY(string channelID);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryChannelGY(AsyncCallback callback, object state, string channelID);
    ChannelCfgGY End_QueryChannelGY(IAsyncResult asyncResult);
    #endif
    List<ChannelCfgGY> QueryChannelByIpGY(string capip);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryChannelByIpGY(AsyncCallback callback, object state, string capip);
    List<ChannelCfgGY> End_QueryChannelByIpGY(IAsyncResult asyncResult);
    #endif
    List<CapFaceLogGY> QueryCapLogGY(string channel, string channel_div, long btime, long etime, int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapLogGY(AsyncCallback callback, object state, string channel, string channel_div, long btime, long etime, int nPageFirstNum, int nPageNum);
    List<CapFaceLogGY> End_QueryCapLogGY(IAsyncResult asyncResult);
    #endif
    List<SCountInfo> QueryCapRecordTotalCountHGY(string channel, string channel_div, long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapRecordTotalCountHGY(AsyncCallback callback, object state, string channel, string channel_div, long btime, long etime);
    List<SCountInfo> End_QueryCapRecordTotalCountHGY(IAsyncResult asyncResult);
    #endif
    List<CapObjImgGY> QueryCapDetailsHGY(string id, string day);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapDetailsHGY(AsyncCallback callback, object state, string id, string day);
    List<CapObjImgGY> End_QueryCapDetailsHGY(IAsyncResult asyncResult);
    #endif
    List<byte[]> QueryCapLogImageHGY(string ID, string day);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapLogImageHGY(AsyncCallback callback, object state, string ID, string day);
    List<byte[]> End_QueryCapLogImageHGY(IAsyncResult asyncResult);
    #endif
    List<CapFaceLogWithImgGY> QueryCapLogWithImgGY(string channel, string channel_div, long btime, long etime, int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapLogWithImgGY(AsyncCallback callback, object state, string channel, string channel_div, long btime, long etime, int nPageFirstNum, int nPageNum);
    List<CapFaceLogWithImgGY> End_QueryCapLogWithImgGY(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLogGY> QueryCmpLogGY(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string channel_div, int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogGY(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string channel_div, int nPageFirstNum, int nPageNum);
    List<CmpFaceLogGY> End_QueryCmpLogGY(IAsyncResult asyncResult);
    #endif
    List<SCountInfo> QueryCmpRecordTotalCountHGY(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string channel_div);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpRecordTotalCountHGY(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string channel_div);
    List<SCountInfo> End_QueryCmpRecordTotalCountHGY(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLogWidthImgGY> QueryCmpLogWidthImgGY(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string channel_div, int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogWidthImgGY(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string channel_div, int nPageFirstNum, int nPageNum);
    List<CmpFaceLogWidthImgGY> End_QueryCmpLogWidthImgGY(IAsyncResult asyncResult);
    #endif
    List<byte[]> QueryCmpLogImageHGY(string ID, string day);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogImageHGY(AsyncCallback callback, object state, string ID, string day);
    List<byte[]> End_QueryCmpLogImageHGY(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLogWidthImgGY> QueryCmpByCapIdWidthImgHGY(string ID, string day);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpByCapIdWidthImgHGY(AsyncCallback callback, object state, string ID, string day);
    List<CmpFaceLogWidthImgGY> End_QueryCmpByCapIdWidthImgHGY(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLogGY> QueryCmpLogByObjIdGY(string objid, long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogByObjIdGY(AsyncCallback callback, object state, string objid, long btime, long etime);
    List<CmpFaceLogGY> End_QueryCmpLogByObjIdGY(IAsyncResult asyncResult);
    #endif
    List<SCountInfo> QueryCmpLogCountByObjIdGY(string objid, long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogCountByObjIdGY(AsyncCallback callback, object state, string objid, long btime, long etime);
    List<SCountInfo> End_QueryCmpLogCountByObjIdGY(IAsyncResult asyncResult);
    #endif
    List<AllAreaStatInfo> QueryAllStatGY();
    #if SILVERLIGHT
    IAsyncResult Begin_QueryAllStatGY(AsyncCallback callback, object state);
    List<AllAreaStatInfo> End_QueryAllStatGY(IAsyncResult asyncResult);
    #endif
    List<SCountInfoOneDay> QueryStatByAreaOneDayGY(string channel_div, long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryStatByAreaOneDayGY(AsyncCallback callback, object state, string channel_div, long btime, long etime);
    List<SCountInfoOneDay> End_QueryStatByAreaOneDayGY(IAsyncResult asyncResult);
    #endif
    List<SCountInfoOneDay> QueryStatByAreaOneHourGY(string channel_div, string daystr, long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryStatByAreaOneHourGY(AsyncCallback callback, object state, string channel_div, string daystr, long btime, long etime);
    List<SCountInfoOneDay> End_QueryStatByAreaOneHourGY(IAsyncResult asyncResult);
    #endif
    List<SCountInfoArea> QueryVisitorStatGY(string uid, string day);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryVisitorStatGY(AsyncCallback callback, object state, string uid, string day);
    List<SCountInfoArea> End_QueryVisitorStatGY(IAsyncResult asyncResult);
    #endif
    List<SVisitorOrbit> QueryVisitorOrbitGY(string uid, string day);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryVisitorOrbitGY(AsyncCallback callback, object state, string uid, string day);
    List<SVisitorOrbit> End_QueryVisitorOrbitGY(IAsyncResult asyncResult);
    #endif
    List<PieChartStat> QueryPieChartGY(string uid, string day, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryPieChartGY(AsyncCallback callback, object state, string uid, string day, long etime);
    List<PieChartStat> End_QueryPieChartGY(IAsyncResult asyncResult);
    #endif
    List<CmpInfo2CapGY> UpLoadCapFaceSyncGY(string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis);
    #if SILVERLIGHT
    IAsyncResult Begin_UpLoadCapFaceSyncGY(AsyncCallback callback, object state, string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis);
    List<CmpInfo2CapGY> End_UpLoadCapFaceSyncGY(IAsyncResult asyncResult);
    #endif
    int UpLoadCapFaceASyncGY(string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis);
    #if SILVERLIGHT
    IAsyncResult Begin_UpLoadCapFaceASyncGY(AsyncCallback callback, object state, string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis);
    int End_UpLoadCapFaceASyncGY(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// ****贵阳记录筛选 20161220 begin****
    /// </summary>
    /// <param name="channel"></param>
    /// <param name="name"></param>
    /// <param name="type"></param>
    /// <param name="gender"></param>
    /// <param name="bage"></param>
    /// <param name="eage"></param>
    /// <param name="btime"></param>
    /// <param name="etime"></param>
    /// <param name="nPageFirstNum"></param>
    /// <param name="nPageNum"></param>
    /// <param name="pflag"></param>
    List<CmpFaceLog> QueryCmpLogSX(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogSX(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag);
    List<CmpFaceLog> End_QueryCmpLogSX(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLog> QueryCmpLogByObjIdSX(string objid, long btime, long etime, int pflag);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogByObjIdSX(AsyncCallback callback, object state, string objid, long btime, long etime, int pflag);
    List<CmpFaceLog> End_QueryCmpLogByObjIdSX(IAsyncResult asyncResult);
    #endif
    List<SCountInfo> QueryCmpLogCountByObjIdSX(string objid, long btime, long etime, int pflag);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogCountByObjIdSX(AsyncCallback callback, object state, string objid, long btime, long etime, int pflag);
    List<SCountInfo> End_QueryCmpLogCountByObjIdSX(IAsyncResult asyncResult);
    #endif
    List<byte[]> QueryCmpLogImageHSX(string ID, string day, int pflag);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogImageHSX(AsyncCallback callback, object state, string ID, string day, int pflag);
    List<byte[]> End_QueryCmpLogImageHSX(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLogWidthImg> QueryCmpLogWidthImgSX(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogWidthImgSX(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag);
    List<CmpFaceLogWidthImg> End_QueryCmpLogWidthImgSX(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLogWidthImg> QueryCmpByCapIdWidthImgHSX(string ID, string day, int pflag);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpByCapIdWidthImgHSX(AsyncCallback callback, object state, string ID, string day, int pflag);
    List<CmpFaceLogWidthImg> End_QueryCmpByCapIdWidthImgHSX(IAsyncResult asyncResult);
    #endif
    List<SCountInfo> QueryCmpRecordTotalCountHSX(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int pflag);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpRecordTotalCountHSX(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int pflag);
    List<SCountInfo> End_QueryCmpRecordTotalCountHSX(IAsyncResult asyncResult);
    #endif
    int UpdateCmpLog(string ID, string uuid, string day, int pflag);
    #if SILVERLIGHT
    IAsyncResult Begin_UpdateCmpLog(AsyncCallback callback, object state, string ID, string uuid, string day, int pflag);
    int End_UpdateCmpLog(IAsyncResult asyncResult);
    #endif
    int QueryThreshold();
    #if SILVERLIGHT
    IAsyncResult Begin_QueryThreshold(AsyncCallback callback, object state);
    int End_QueryThreshold(IAsyncResult asyncResult);
    #endif
    List<CapFaceLog> QueryCapLogSX(string channel, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapLogSX(AsyncCallback callback, object state, string channel, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag);
    List<CapFaceLog> End_QueryCapLogSX(IAsyncResult asyncResult);
    #endif
    List<SCountInfo> QueryCapRecordTotalCountHSX(string channel, long btime, long etime, int pflag);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapRecordTotalCountHSX(AsyncCallback callback, object state, string channel, long btime, long etime, int pflag);
    List<SCountInfo> End_QueryCapRecordTotalCountHSX(IAsyncResult asyncResult);
    #endif
    List<CapObjImg> QueryCapDetailsHSX(string id, string day, int pflag);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapDetailsHSX(AsyncCallback callback, object state, string id, string day, int pflag);
    List<CapObjImg> End_QueryCapDetailsHSX(IAsyncResult asyncResult);
    #endif
    List<byte[]> QueryCapLogImageHSX(string ID, string day, int pflag);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapLogImageHSX(AsyncCallback callback, object state, string ID, string day, int pflag);
    List<byte[]> End_QueryCapLogImageHSX(IAsyncResult asyncResult);
    #endif
    List<CapFaceLog> QueryCapLogSXC(List<string> channel, long btime, long etime, int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapLogSXC(AsyncCallback callback, object state, List<string> channel, long btime, long etime, int nPageFirstNum, int nPageNum);
    List<CapFaceLog> End_QueryCapLogSXC(IAsyncResult asyncResult);
    #endif
    List<SCountInfo> QueryCapRecordTotalCountHSXC(List<string> channel, long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapRecordTotalCountHSXC(AsyncCallback callback, object state, List<string> channel, long btime, long etime);
    List<SCountInfo> End_QueryCapRecordTotalCountHSXC(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// ****贵阳记录筛选 20161220 end****
    /// </summary>
    /// <param name="cfg"></param>
    int TerminalPhoneRegion(TerminalPhone cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_TerminalPhoneRegion(AsyncCallback callback, object state, TerminalPhone cfg);
    int End_TerminalPhoneRegion(IAsyncResult asyncResult);
    #endif
    TimeData GetServerTime();
    #if SILVERLIGHT
    IAsyncResult Begin_GetServerTime(AsyncCallback callback, object state);
    TimeData End_GetServerTime(IAsyncResult asyncResult);
    #endif
    ErrorInfo UploadCmpLogFromFrontPH(CmpFaceLogInfoPH cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_UploadCmpLogFromFrontPH(AsyncCallback callback, object state, CmpFaceLogInfoPH cfg);
    ErrorInfo End_UploadCmpLogFromFrontPH(IAsyncResult asyncResult);
    #endif
    List<FaceObjTemplatePhone> QueryListFaceObjPH(int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryListFaceObjPH(AsyncCallback callback, object state, int nPageFirstNum, int nPageNum);
    List<FaceObjTemplatePhone> End_QueryListFaceObjPH(IAsyncResult asyncResult);
    #endif
    List<SCountInfo> QueryCmpRecordTotalCountHDS(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpRecordTotalCountHDS(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime);
    List<SCountInfo> End_QueryCmpRecordTotalCountHDS(IAsyncResult asyncResult);
    #endif
    List<SCountInfo> QueryCmpRecordTotalCountHSXDS(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int pflag);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpRecordTotalCountHSXDS(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int pflag);
    List<SCountInfo> End_QueryCmpRecordTotalCountHSXDS(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLogDS> QueryCmpLogDS(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogDS(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum);
    List<CmpFaceLogDS> End_QueryCmpLogDS(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLogDS> QueryCmpLogByObjIdDS(string objid, long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogByObjIdDS(AsyncCallback callback, object state, string objid, long btime, long etime);
    List<CmpFaceLogDS> End_QueryCmpLogByObjIdDS(IAsyncResult asyncResult);
    #endif
    List<SCountInfo> QueryCmpLogCountByObjIdDS(string objid, long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogCountByObjIdDS(AsyncCallback callback, object state, string objid, long btime, long etime);
    List<SCountInfo> End_QueryCmpLogCountByObjIdDS(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLogDS> QueryCmpLogSXDS(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogSXDS(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag);
    List<CmpFaceLogDS> End_QueryCmpLogSXDS(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLogDS> QueryCmpLogByObjIdSXDS(string objid, long btime, long etime, int pflag);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogByObjIdSXDS(AsyncCallback callback, object state, string objid, long btime, long etime, int pflag);
    List<CmpFaceLogDS> End_QueryCmpLogByObjIdSXDS(IAsyncResult asyncResult);
    #endif
    List<SCountInfo> QueryCmpLogCountByObjIdSXDS(string objid, long btime, long etime, int pflag);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogCountByObjIdSXDS(AsyncCallback callback, object state, string objid, long btime, long etime, int pflag);
    List<SCountInfo> End_QueryCmpLogCountByObjIdSXDS(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 西宁项目新增功能――函数 add 20170306 fuyunpeng*
    /// </summary>
    /// <param name="cfg"></param>
    int AddChannelLBS(ChannelCfgLBS cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_AddChannelLBS(AsyncCallback callback, object state, ChannelCfgLBS cfg);
    int End_AddChannelLBS(IAsyncResult asyncResult);
    #endif
    int ModifyChannelLBS(ChannelCfgLBS cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_ModifyChannelLBS(AsyncCallback callback, object state, ChannelCfgLBS cfg);
    int End_ModifyChannelLBS(IAsyncResult asyncResult);
    #endif
    List<ChannelCfgLBS> QueryAllChannelLBS();
    #if SILVERLIGHT
    IAsyncResult Begin_QueryAllChannelLBS(AsyncCallback callback, object state);
    List<ChannelCfgLBS> End_QueryAllChannelLBS(IAsyncResult asyncResult);
    #endif
    ChannelCfgLBS QueryChannelLBS(string channelID);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryChannelLBS(AsyncCallback callback, object state, string channelID);
    ChannelCfgLBS End_QueryChannelLBS(IAsyncResult asyncResult);
    #endif
    List<TargetedAnalysis> QueryTargetedAnalysis(string capid, byte[] capimg, int threshold, long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryTargetedAnalysis(AsyncCallback callback, object state, string capid, byte[] capimg, int threshold, long btime, long etime);
    List<TargetedAnalysis> End_QueryTargetedAnalysis(IAsyncResult asyncResult);
    #endif
    SuspectAnalysisInfo QueryKeyAreaSuspectAnalysis(long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryKeyAreaSuspectAnalysis(AsyncCallback callback, object state, long btime, long etime);
    SuspectAnalysisInfo End_QueryKeyAreaSuspectAnalysis(IAsyncResult asyncResult);
    #endif
    List<TargetedAnalysis> QueryCrowdedAnalysis(long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCrowdedAnalysis(AsyncCallback callback, object state, long btime, long etime);
    List<TargetedAnalysis> End_QueryCrowdedAnalysis(IAsyncResult asyncResult);
    #endif
    List<TrackInfo> QueryTrackPlayback(string capid, byte[] capimg, long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryTrackPlayback(AsyncCallback callback, object state, string capid, byte[] capimg, long btime, long etime);
    List<TrackInfo> End_QueryTrackPlayback(IAsyncResult asyncResult);
    #endif
    List<RealtimeCapInfoLBS> QueryStaticAnalysis(string capid, byte[] capimg, long btime, long etime, int threshold, int maxcount);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryStaticAnalysis(AsyncCallback callback, object state, string capid, byte[] capimg, long btime, long etime, int threshold, int maxcount);
    List<RealtimeCapInfoLBS> End_QueryStaticAnalysis(IAsyncResult asyncResult);
    #endif
    List<SCountInfo> QueryCapRecordTotalCountHLBS(string channel, int channel_type, long btime, long etime);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapRecordTotalCountHLBS(AsyncCallback callback, object state, string channel, int channel_type, long btime, long etime);
    List<SCountInfo> End_QueryCapRecordTotalCountHLBS(IAsyncResult asyncResult);
    #endif
    List<CapFaceLogLBS> QueryCapLogLBS(string channel, int channel_type, long btime, long etime, int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCapLogLBS(AsyncCallback callback, object state, string channel, int channel_type, long btime, long etime, int nPageFirstNum, int nPageNum);
    List<CapFaceLogLBS> End_QueryCapLogLBS(IAsyncResult asyncResult);
    #endif
    List<SCountInfo> QueryCmpRecordTotalCountHDSLBS(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpRecordTotalCountHDSLBS(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type);
    List<SCountInfo> End_QueryCmpRecordTotalCountHDSLBS(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLogDSLBS> QueryCmpLogDSLBS(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogDSLBS(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int nPageFirstNum, int nPageNum);
    List<CmpFaceLogDSLBS> End_QueryCmpLogDSLBS(IAsyncResult asyncResult);
    #endif
    List<SCountInfo> QueryCmpRecordTotalCountHDSLBSSX(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int pflag);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpRecordTotalCountHDSLBSSX(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int pflag);
    List<SCountInfo> End_QueryCmpRecordTotalCountHDSLBSSX(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLogDSLBS> QueryCmpLogDSLBSSX(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int pflag, int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogDSLBSSX(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int pflag, int nPageFirstNum, int nPageNum);
    List<CmpFaceLogDSLBS> End_QueryCmpLogDSLBSSX(IAsyncResult asyncResult);
    #endif
    LastRecordInfo QueryLastRecordInfo();
    #if SILVERLIGHT
    IAsyncResult Begin_QueryLastRecordInfo(AsyncCallback callback, object state);
    LastRecordInfo End_QueryLastRecordInfo(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// *add for query real time record***
    /// </summary>
    /// <param name="time"></param>
    List<RealtimeCapInfoQ> QueryRealtimeCapInfoQ(int time);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryRealtimeCapInfoQ(AsyncCallback callback, object state, int time);
    List<RealtimeCapInfoQ> End_QueryRealtimeCapInfoQ(IAsyncResult asyncResult);
    #endif
    int UpdateRealtimeCmpQ(List<string> capid, int qflag);
    #if SILVERLIGHT
    IAsyncResult Begin_UpdateRealtimeCmpQ(AsyncCallback callback, object state, List<string> capid, int qflag);
    int End_UpdateRealtimeCmpQ(IAsyncResult asyncResult);
    #endif
    List<RealtimeCmpInfoQ> QueryRealtimeCmpInfoQ(int time, int qflag);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryRealtimeCmpInfoQ(AsyncCallback callback, object state, int time, int qflag);
    List<RealtimeCmpInfoQ> End_QueryRealtimeCmpInfoQ(IAsyncResult asyncResult);
    #endif
    List<RealtimeCapInfoLBS> QueryRealtimeCapInfoQLBS(int time);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryRealtimeCapInfoQLBS(AsyncCallback callback, object state, int time);
    List<RealtimeCapInfoLBS> End_QueryRealtimeCapInfoQLBS(IAsyncResult asyncResult);
    #endif
    List<RealtimeCmpInfoLBS> QueryRealtimeCmpInfoQLBS(int time, int qflag);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryRealtimeCmpInfoQLBS(AsyncCallback callback, object state, int time, int qflag);
    List<RealtimeCmpInfoLBS> End_QueryRealtimeCmpInfoQLBS(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// **add for mobile phone interface ****
    /// </summary>
    /// <param name="channelID"></param>
    /// <param name="img"></param>
    /// <param name="latitude"></param>
    /// <param name="longitude"></param>
    /// <param name="address"></param>
    /// <param name="dtm"></param>
    List<CompareImgResult> UpLoadCapFaceMoblie(string channelID, byte[] img, string latitude, string longitude, string address, long dtm);
    #if SILVERLIGHT
    IAsyncResult Begin_UpLoadCapFaceMoblie(AsyncCallback callback, object state, string channelID, byte[] img, string latitude, string longitude, string address, long dtm);
    List<CompareImgResult> End_UpLoadCapFaceMoblie(IAsyncResult asyncResult);
    #endif
    List<SCountInfo> QueryCmpRecordLBSTotalCountM(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int qflag);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpRecordLBSTotalCountM(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int qflag);
    List<SCountInfo> End_QueryCmpRecordLBSTotalCountM(IAsyncResult asyncResult);
    #endif
    List<CmpFaceLogDSLBS> QueryCmpLogDSLBSM(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int qflag, int nPageFirstNum, int nPageNum);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryCmpLogDSLBSM(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int qflag, int nPageFirstNum, int nPageNum);
    List<CmpFaceLogDSLBS> End_QueryCmpLogDSLBSM(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_UpLoadCapFace(AsyncCallback callback, object state, FaceInfo fi, int nFeaLen, byte[] Feature, int nImgLen, byte[] Image)
    {
      return send_UpLoadCapFace(callback, state, fi, nFeaLen, Feature, nImgLen, Image);
    }

    public int End_UpLoadCapFace(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UpLoadCapFace();
    }

    #endif

    public int UpLoadCapFace(FaceInfo fi, int nFeaLen, byte[] Feature, int nImgLen, byte[] Image)
    {
      #if !SILVERLIGHT
      send_UpLoadCapFace(fi, nFeaLen, Feature, nImgLen, Image);
      return recv_UpLoadCapFace();

      #else
      var asyncResult = Begin_UpLoadCapFace(null, null, fi, nFeaLen, Feature, nImgLen, Image);
      return End_UpLoadCapFace(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UpLoadCapFace(AsyncCallback callback, object state, FaceInfo fi, int nFeaLen, byte[] Feature, int nImgLen, byte[] Image)
    #else
    public void send_UpLoadCapFace(FaceInfo fi, int nFeaLen, byte[] Feature, int nImgLen, byte[] Image)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("UpLoadCapFace", TMessageType.Call, seqid_));
      UpLoadCapFace_args args = new UpLoadCapFace_args();
      args.Fi = fi;
      args.NFeaLen = nFeaLen;
      args.Feature = Feature;
      args.NImgLen = nImgLen;
      args.Image = Image;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_UpLoadCapFace()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UpLoadCapFace_result result = new UpLoadCapFace_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpLoadCapFace failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_UpLoadCapFace1(AsyncCallback callback, object state, string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis)
    {
      return send_UpLoadCapFace1(callback, state, ChannelID, index, timeIn, timeOut, age, gender, fis);
    }

    public int End_UpLoadCapFace1(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UpLoadCapFace1();
    }

    #endif

    public int UpLoadCapFace1(string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis)
    {
      #if !SILVERLIGHT
      send_UpLoadCapFace1(ChannelID, index, timeIn, timeOut, age, gender, fis);
      return recv_UpLoadCapFace1();

      #else
      var asyncResult = Begin_UpLoadCapFace1(null, null, ChannelID, index, timeIn, timeOut, age, gender, fis);
      return End_UpLoadCapFace1(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UpLoadCapFace1(AsyncCallback callback, object state, string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis)
    #else
    public void send_UpLoadCapFace1(string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("UpLoadCapFace1", TMessageType.Call, seqid_));
      UpLoadCapFace1_args args = new UpLoadCapFace1_args();
      args.ChannelID = ChannelID;
      args.Index = index;
      args.TimeIn = timeIn;
      args.TimeOut = timeOut;
      args.Age = age;
      args.Gender = gender;
      args.Fis = fis;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_UpLoadCapFace1()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UpLoadCapFace1_result result = new UpLoadCapFace1_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpLoadCapFace1 failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_OpenChannel(AsyncCallback callback, object state, string channelID)
    {
      return send_OpenChannel(callback, state, channelID);
    }

    public int End_OpenChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_OpenChannel();
    }

    #endif

    public int OpenChannel(string channelID)
    {
      #if !SILVERLIGHT
      send_OpenChannel(channelID);
      return recv_OpenChannel();

      #else
      var asyncResult = Begin_OpenChannel(null, null, channelID);
      return End_OpenChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_OpenChannel(AsyncCallback callback, object state, string channelID)
    #else
    public void send_OpenChannel(string channelID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("OpenChannel", TMessageType.Call, seqid_));
      OpenChannel_args args = new OpenChannel_args();
      args.ChannelID = channelID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_OpenChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      OpenChannel_result result = new OpenChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OpenChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_CloseChannel(AsyncCallback callback, object state, string channelID)
    {
      return send_CloseChannel(callback, state, channelID);
    }

    public int End_CloseChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_CloseChannel();
    }

    #endif

    public int CloseChannel(string channelID)
    {
      #if !SILVERLIGHT
      send_CloseChannel(channelID);
      return recv_CloseChannel();

      #else
      var asyncResult = Begin_CloseChannel(null, null, channelID);
      return End_CloseChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_CloseChannel(AsyncCallback callback, object state, string channelID)
    #else
    public void send_CloseChannel(string channelID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("CloseChannel", TMessageType.Call, seqid_));
      CloseChannel_args args = new CloseChannel_args();
      args.ChannelID = channelID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_CloseChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      CloseChannel_result result = new CloseChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CloseChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_OpenAllChannel(AsyncCallback callback, object state)
    {
      return send_OpenAllChannel(callback, state);
    }

    public List<string> End_OpenAllChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_OpenAllChannel();
    }

    #endif

    public List<string> OpenAllChannel()
    {
      #if !SILVERLIGHT
      send_OpenAllChannel();
      return recv_OpenAllChannel();

      #else
      var asyncResult = Begin_OpenAllChannel(null, null);
      return End_OpenAllChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_OpenAllChannel(AsyncCallback callback, object state)
    #else
    public void send_OpenAllChannel()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("OpenAllChannel", TMessageType.Call, seqid_));
      OpenAllChannel_args args = new OpenAllChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_OpenAllChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      OpenAllChannel_result result = new OpenAllChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OpenAllChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_CloseAllChannel(AsyncCallback callback, object state)
    {
      return send_CloseAllChannel(callback, state);
    }

    public List<string> End_CloseAllChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_CloseAllChannel();
    }

    #endif

    public List<string> CloseAllChannel()
    {
      #if !SILVERLIGHT
      send_CloseAllChannel();
      return recv_CloseAllChannel();

      #else
      var asyncResult = Begin_CloseAllChannel(null, null);
      return End_CloseAllChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_CloseAllChannel(AsyncCallback callback, object state)
    #else
    public void send_CloseAllChannel()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("CloseAllChannel", TMessageType.Call, seqid_));
      CloseAllChannel_args args = new CloseAllChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_CloseAllChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      CloseAllChannel_result result = new CloseAllChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CloseAllChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_AddChannel(AsyncCallback callback, object state, ChannelCfg cfg)
    {
      return send_AddChannel(callback, state, cfg);
    }

    public int End_AddChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_AddChannel();
    }

    #endif

    public int AddChannel(ChannelCfg cfg)
    {
      #if !SILVERLIGHT
      send_AddChannel(cfg);
      return recv_AddChannel();

      #else
      var asyncResult = Begin_AddChannel(null, null, cfg);
      return End_AddChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_AddChannel(AsyncCallback callback, object state, ChannelCfg cfg)
    #else
    public void send_AddChannel(ChannelCfg cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("AddChannel", TMessageType.Call, seqid_));
      AddChannel_args args = new AddChannel_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_AddChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      AddChannel_result result = new AddChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_DelChannel(AsyncCallback callback, object state, string channelID)
    {
      return send_DelChannel(callback, state, channelID);
    }

    public int End_DelChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_DelChannel();
    }

    #endif

    public int DelChannel(string channelID)
    {
      #if !SILVERLIGHT
      send_DelChannel(channelID);
      return recv_DelChannel();

      #else
      var asyncResult = Begin_DelChannel(null, null, channelID);
      return End_DelChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_DelChannel(AsyncCallback callback, object state, string channelID)
    #else
    public void send_DelChannel(string channelID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("DelChannel", TMessageType.Call, seqid_));
      DelChannel_args args = new DelChannel_args();
      args.ChannelID = channelID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_DelChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      DelChannel_result result = new DelChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DelChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_ModifyChannel(AsyncCallback callback, object state, ChannelCfg cfg)
    {
      return send_ModifyChannel(callback, state, cfg);
    }

    public int End_ModifyChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ModifyChannel();
    }

    #endif

    public int ModifyChannel(ChannelCfg cfg)
    {
      #if !SILVERLIGHT
      send_ModifyChannel(cfg);
      return recv_ModifyChannel();

      #else
      var asyncResult = Begin_ModifyChannel(null, null, cfg);
      return End_ModifyChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ModifyChannel(AsyncCallback callback, object state, ChannelCfg cfg)
    #else
    public void send_ModifyChannel(ChannelCfg cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ModifyChannel", TMessageType.Call, seqid_));
      ModifyChannel_args args = new ModifyChannel_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_ModifyChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ModifyChannel_result result = new ModifyChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ModifyChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryAllChannel(AsyncCallback callback, object state)
    {
      return send_QueryAllChannel(callback, state);
    }

    public List<ChannelCfg> End_QueryAllChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryAllChannel();
    }

    #endif

    public List<ChannelCfg> QueryAllChannel()
    {
      #if !SILVERLIGHT
      send_QueryAllChannel();
      return recv_QueryAllChannel();

      #else
      var asyncResult = Begin_QueryAllChannel(null, null);
      return End_QueryAllChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryAllChannel(AsyncCallback callback, object state)
    #else
    public void send_QueryAllChannel()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryAllChannel", TMessageType.Call, seqid_));
      QueryAllChannel_args args = new QueryAllChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<ChannelCfg> recv_QueryAllChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryAllChannel_result result = new QueryAllChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryAllChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryChannel(AsyncCallback callback, object state, string channelID)
    {
      return send_QueryChannel(callback, state, channelID);
    }

    public ChannelCfg End_QueryChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryChannel();
    }

    #endif

    public ChannelCfg QueryChannel(string channelID)
    {
      #if !SILVERLIGHT
      send_QueryChannel(channelID);
      return recv_QueryChannel();

      #else
      var asyncResult = Begin_QueryChannel(null, null, channelID);
      return End_QueryChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryChannel(AsyncCallback callback, object state, string channelID)
    #else
    public void send_QueryChannel(string channelID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryChannel", TMessageType.Call, seqid_));
      QueryChannel_args args = new QueryChannel_args();
      args.ChannelID = channelID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ChannelCfg recv_QueryChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryChannel_result result = new QueryChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapDetails(AsyncCallback callback, object state, string id)
    {
      return send_QueryCapDetails(callback, state, id);
    }

    public List<CapObjImg> End_QueryCapDetails(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapDetails();
    }

    #endif

    public List<CapObjImg> QueryCapDetails(string id)
    {
      #if !SILVERLIGHT
      send_QueryCapDetails(id);
      return recv_QueryCapDetails();

      #else
      var asyncResult = Begin_QueryCapDetails(null, null, id);
      return End_QueryCapDetails(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapDetails(AsyncCallback callback, object state, string id)
    #else
    public void send_QueryCapDetails(string id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapDetails", TMessageType.Call, seqid_));
      QueryCapDetails_args args = new QueryCapDetails_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CapObjImg> recv_QueryCapDetails()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapDetails_result result = new QueryCapDetails_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapDetails failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapLog(AsyncCallback callback, object state, string channel, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      return send_QueryCapLog(callback, state, channel, btime, etime, nPageFirstNum, nPageNum);
    }

    public List<CapFaceLog> End_QueryCapLog(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapLog();
    }

    #endif

    public List<CapFaceLog> QueryCapLog(string channel, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryCapLog(channel, btime, etime, nPageFirstNum, nPageNum);
      return recv_QueryCapLog();

      #else
      var asyncResult = Begin_QueryCapLog(null, null, channel, btime, etime, nPageFirstNum, nPageNum);
      return End_QueryCapLog(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapLog(AsyncCallback callback, object state, string channel, long btime, long etime, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryCapLog(string channel, long btime, long etime, int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapLog", TMessageType.Call, seqid_));
      QueryCapLog_args args = new QueryCapLog_args();
      args.Channel = channel;
      args.Btime = btime;
      args.Etime = etime;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CapFaceLog> recv_QueryCapLog()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapLog_result result = new QueryCapLog_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapLog failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapLogImage(AsyncCallback callback, object state, string ID)
    {
      return send_QueryCapLogImage(callback, state, ID);
    }

    public List<byte[]> End_QueryCapLogImage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapLogImage();
    }

    #endif

    public List<byte[]> QueryCapLogImage(string ID)
    {
      #if !SILVERLIGHT
      send_QueryCapLogImage(ID);
      return recv_QueryCapLogImage();

      #else
      var asyncResult = Begin_QueryCapLogImage(null, null, ID);
      return End_QueryCapLogImage(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapLogImage(AsyncCallback callback, object state, string ID)
    #else
    public void send_QueryCapLogImage(string ID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapLogImage", TMessageType.Call, seqid_));
      QueryCapLogImage_args args = new QueryCapLogImage_args();
      args.ID = ID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<byte[]> recv_QueryCapLogImage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapLogImage_result result = new QueryCapLogImage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapLogImage failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapRecordTotalCount(AsyncCallback callback, object state, string channel, long btime, long etime)
    {
      return send_QueryCapRecordTotalCount(callback, state, channel, btime, etime);
    }

    public int End_QueryCapRecordTotalCount(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapRecordTotalCount();
    }

    #endif

    public int QueryCapRecordTotalCount(string channel, long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryCapRecordTotalCount(channel, btime, etime);
      return recv_QueryCapRecordTotalCount();

      #else
      var asyncResult = Begin_QueryCapRecordTotalCount(null, null, channel, btime, etime);
      return End_QueryCapRecordTotalCount(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapRecordTotalCount(AsyncCallback callback, object state, string channel, long btime, long etime)
    #else
    public void send_QueryCapRecordTotalCount(string channel, long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapRecordTotalCount", TMessageType.Call, seqid_));
      QueryCapRecordTotalCount_args args = new QueryCapRecordTotalCount_args();
      args.Channel = channel;
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_QueryCapRecordTotalCount()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapRecordTotalCount_result result = new QueryCapRecordTotalCount_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapRecordTotalCount failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapLogWithImg(AsyncCallback callback, object state, string channel, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      return send_QueryCapLogWithImg(callback, state, channel, btime, etime, nPageFirstNum, nPageNum);
    }

    public List<CapFaceLogWithImg> End_QueryCapLogWithImg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapLogWithImg();
    }

    #endif

    public List<CapFaceLogWithImg> QueryCapLogWithImg(string channel, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryCapLogWithImg(channel, btime, etime, nPageFirstNum, nPageNum);
      return recv_QueryCapLogWithImg();

      #else
      var asyncResult = Begin_QueryCapLogWithImg(null, null, channel, btime, etime, nPageFirstNum, nPageNum);
      return End_QueryCapLogWithImg(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapLogWithImg(AsyncCallback callback, object state, string channel, long btime, long etime, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryCapLogWithImg(string channel, long btime, long etime, int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapLogWithImg", TMessageType.Call, seqid_));
      QueryCapLogWithImg_args args = new QueryCapLogWithImg_args();
      args.Channel = channel;
      args.Btime = btime;
      args.Etime = etime;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CapFaceLogWithImg> recv_QueryCapLogWithImg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapLogWithImg_result result = new QueryCapLogWithImg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapLogWithImg failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLog(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      return send_QueryCmpLog(callback, state, channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum);
    }

    public List<CmpFaceLog> End_QueryCmpLog(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLog();
    }

    #endif

    public List<CmpFaceLog> QueryCmpLog(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryCmpLog(channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum);
      return recv_QueryCmpLog();

      #else
      var asyncResult = Begin_QueryCmpLog(null, null, channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum);
      return End_QueryCmpLog(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLog(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryCmpLog(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLog", TMessageType.Call, seqid_));
      QueryCmpLog_args args = new QueryCmpLog_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLog> recv_QueryCmpLog()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLog_result result = new QueryCmpLog_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLog failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogAndCount(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag, int queryType)
    {
      return send_QueryCmpLogAndCount(callback, state, channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum, pflag, queryType);
    }

    public SCountInfoAndCmpFaceLog End_QueryCmpLogAndCount(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogAndCount();
    }

    #endif

    public SCountInfoAndCmpFaceLog QueryCmpLogAndCount(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag, int queryType)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogAndCount(channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum, pflag, queryType);
      return recv_QueryCmpLogAndCount();

      #else
      var asyncResult = Begin_QueryCmpLogAndCount(null, null, channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum, pflag, queryType);
      return End_QueryCmpLogAndCount(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogAndCount(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag, int queryType)
    #else
    public void send_QueryCmpLogAndCount(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag, int queryType)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogAndCount", TMessageType.Call, seqid_));
      QueryCmpLogAndCount_args args = new QueryCmpLogAndCount_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Pflag = pflag;
      args.QueryType = queryType;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public SCountInfoAndCmpFaceLog recv_QueryCmpLogAndCount()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogAndCount_result result = new QueryCmpLogAndCount_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogAndCount failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogByObjId(AsyncCallback callback, object state, string objid, long btime, long etime)
    {
      return send_QueryCmpLogByObjId(callback, state, objid, btime, etime);
    }

    public List<CmpFaceLog> End_QueryCmpLogByObjId(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogByObjId();
    }

    #endif

    public List<CmpFaceLog> QueryCmpLogByObjId(string objid, long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogByObjId(objid, btime, etime);
      return recv_QueryCmpLogByObjId();

      #else
      var asyncResult = Begin_QueryCmpLogByObjId(null, null, objid, btime, etime);
      return End_QueryCmpLogByObjId(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogByObjId(AsyncCallback callback, object state, string objid, long btime, long etime)
    #else
    public void send_QueryCmpLogByObjId(string objid, long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogByObjId", TMessageType.Call, seqid_));
      QueryCmpLogByObjId_args args = new QueryCmpLogByObjId_args();
      args.Objid = objid;
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLog> recv_QueryCmpLogByObjId()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogByObjId_result result = new QueryCmpLogByObjId_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogByObjId failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogCountByObjId(AsyncCallback callback, object state, string objid, long btime, long etime)
    {
      return send_QueryCmpLogCountByObjId(callback, state, objid, btime, etime);
    }

    public List<SCountInfo> End_QueryCmpLogCountByObjId(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogCountByObjId();
    }

    #endif

    public List<SCountInfo> QueryCmpLogCountByObjId(string objid, long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogCountByObjId(objid, btime, etime);
      return recv_QueryCmpLogCountByObjId();

      #else
      var asyncResult = Begin_QueryCmpLogCountByObjId(null, null, objid, btime, etime);
      return End_QueryCmpLogCountByObjId(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogCountByObjId(AsyncCallback callback, object state, string objid, long btime, long etime)
    #else
    public void send_QueryCmpLogCountByObjId(string objid, long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogCountByObjId", TMessageType.Call, seqid_));
      QueryCmpLogCountByObjId_args args = new QueryCmpLogCountByObjId_args();
      args.Objid = objid;
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfo> recv_QueryCmpLogCountByObjId()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogCountByObjId_result result = new QueryCmpLogCountByObjId_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogCountByObjId failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogImage(AsyncCallback callback, object state, string ID)
    {
      return send_QueryCmpLogImage(callback, state, ID);
    }

    public List<byte[]> End_QueryCmpLogImage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogImage();
    }

    #endif

    public List<byte[]> QueryCmpLogImage(string ID)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogImage(ID);
      return recv_QueryCmpLogImage();

      #else
      var asyncResult = Begin_QueryCmpLogImage(null, null, ID);
      return End_QueryCmpLogImage(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogImage(AsyncCallback callback, object state, string ID)
    #else
    public void send_QueryCmpLogImage(string ID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogImage", TMessageType.Call, seqid_));
      QueryCmpLogImage_args args = new QueryCmpLogImage_args();
      args.ID = ID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<byte[]> recv_QueryCmpLogImage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogImage_result result = new QueryCmpLogImage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogImage failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogWidthImg(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      return send_QueryCmpLogWidthImg(callback, state, channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum);
    }

    public List<CmpFaceLogWidthImg> End_QueryCmpLogWidthImg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogWidthImg();
    }

    #endif

    public List<CmpFaceLogWidthImg> QueryCmpLogWidthImg(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogWidthImg(channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum);
      return recv_QueryCmpLogWidthImg();

      #else
      var asyncResult = Begin_QueryCmpLogWidthImg(null, null, channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum);
      return End_QueryCmpLogWidthImg(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogWidthImg(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryCmpLogWidthImg(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogWidthImg", TMessageType.Call, seqid_));
      QueryCmpLogWidthImg_args args = new QueryCmpLogWidthImg_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLogWidthImg> recv_QueryCmpLogWidthImg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogWidthImg_result result = new QueryCmpLogWidthImg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogWidthImg failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpByCapIdWidthImg(AsyncCallback callback, object state, string ID)
    {
      return send_QueryCmpByCapIdWidthImg(callback, state, ID);
    }

    public List<CmpFaceLogWidthImg> End_QueryCmpByCapIdWidthImg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpByCapIdWidthImg();
    }

    #endif

    public List<CmpFaceLogWidthImg> QueryCmpByCapIdWidthImg(string ID)
    {
      #if !SILVERLIGHT
      send_QueryCmpByCapIdWidthImg(ID);
      return recv_QueryCmpByCapIdWidthImg();

      #else
      var asyncResult = Begin_QueryCmpByCapIdWidthImg(null, null, ID);
      return End_QueryCmpByCapIdWidthImg(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpByCapIdWidthImg(AsyncCallback callback, object state, string ID)
    #else
    public void send_QueryCmpByCapIdWidthImg(string ID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpByCapIdWidthImg", TMessageType.Call, seqid_));
      QueryCmpByCapIdWidthImg_args args = new QueryCmpByCapIdWidthImg_args();
      args.ID = ID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLogWidthImg> recv_QueryCmpByCapIdWidthImg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpByCapIdWidthImg_result result = new QueryCmpByCapIdWidthImg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpByCapIdWidthImg failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpRecordTotalCount(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime)
    {
      return send_QueryCmpRecordTotalCount(callback, state, channel, name, type, gender, bage, eage, btime, etime);
    }

    public int End_QueryCmpRecordTotalCount(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpRecordTotalCount();
    }

    #endif

    public int QueryCmpRecordTotalCount(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryCmpRecordTotalCount(channel, name, type, gender, bage, eage, btime, etime);
      return recv_QueryCmpRecordTotalCount();

      #else
      var asyncResult = Begin_QueryCmpRecordTotalCount(null, null, channel, name, type, gender, bage, eage, btime, etime);
      return End_QueryCmpRecordTotalCount(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpRecordTotalCount(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime)
    #else
    public void send_QueryCmpRecordTotalCount(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpRecordTotalCount", TMessageType.Call, seqid_));
      QueryCmpRecordTotalCount_args args = new QueryCmpRecordTotalCount_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_QueryCmpRecordTotalCount()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpRecordTotalCount_result result = new QueryCmpRecordTotalCount_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpRecordTotalCount failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_CompareImg(AsyncCallback callback, object state, byte[] image, int nThreshold, int nMaxCount)
    {
      return send_CompareImg(callback, state, image, nThreshold, nMaxCount);
    }

    public List<CompareImgResult> End_CompareImg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_CompareImg();
    }

    #endif

    public List<CompareImgResult> CompareImg(byte[] image, int nThreshold, int nMaxCount)
    {
      #if !SILVERLIGHT
      send_CompareImg(image, nThreshold, nMaxCount);
      return recv_CompareImg();

      #else
      var asyncResult = Begin_CompareImg(null, null, image, nThreshold, nMaxCount);
      return End_CompareImg(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_CompareImg(AsyncCallback callback, object state, byte[] image, int nThreshold, int nMaxCount)
    #else
    public void send_CompareImg(byte[] image, int nThreshold, int nMaxCount)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("CompareImg", TMessageType.Call, seqid_));
      CompareImg_args args = new CompareImg_args();
      args.Image = image;
      args.NThreshold = nThreshold;
      args.NMaxCount = nMaxCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CompareImgResult> recv_CompareImg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      CompareImg_result result = new CompareImg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CompareImg failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryFaceObj(AsyncCallback callback, object state, string id, string name, int bage, int eage, int gender, int type, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      return send_QueryFaceObj(callback, state, id, name, bage, eage, gender, type, btime, etime, nPageFirstNum, nPageNum);
    }

    public List<FaceObj> End_QueryFaceObj(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryFaceObj();
    }

    #endif

    public List<FaceObj> QueryFaceObj(string id, string name, int bage, int eage, int gender, int type, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryFaceObj(id, name, bage, eage, gender, type, btime, etime, nPageFirstNum, nPageNum);
      return recv_QueryFaceObj();

      #else
      var asyncResult = Begin_QueryFaceObj(null, null, id, name, bage, eage, gender, type, btime, etime, nPageFirstNum, nPageNum);
      return End_QueryFaceObj(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryFaceObj(AsyncCallback callback, object state, string id, string name, int bage, int eage, int gender, int type, long btime, long etime, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryFaceObj(string id, string name, int bage, int eage, int gender, int type, long btime, long etime, int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryFaceObj", TMessageType.Call, seqid_));
      QueryFaceObj_args args = new QueryFaceObj_args();
      args.Id = id;
      args.Name = name;
      args.Bage = bage;
      args.Eage = eage;
      args.Gender = gender;
      args.Type = type;
      args.Btime = btime;
      args.Etime = etime;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<FaceObj> recv_QueryFaceObj()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryFaceObj_result result = new QueryFaceObj_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryFaceObj failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryFaceObjByImg(AsyncCallback callback, object state, byte[] image, int nThreshold, int nMaxCount)
    {
      return send_QueryFaceObjByImg(callback, state, image, nThreshold, nMaxCount);
    }

    public List<FaceObj> End_QueryFaceObjByImg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryFaceObjByImg();
    }

    #endif

    public List<FaceObj> QueryFaceObjByImg(byte[] image, int nThreshold, int nMaxCount)
    {
      #if !SILVERLIGHT
      send_QueryFaceObjByImg(image, nThreshold, nMaxCount);
      return recv_QueryFaceObjByImg();

      #else
      var asyncResult = Begin_QueryFaceObjByImg(null, null, image, nThreshold, nMaxCount);
      return End_QueryFaceObjByImg(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryFaceObjByImg(AsyncCallback callback, object state, byte[] image, int nThreshold, int nMaxCount)
    #else
    public void send_QueryFaceObjByImg(byte[] image, int nThreshold, int nMaxCount)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryFaceObjByImg", TMessageType.Call, seqid_));
      QueryFaceObjByImg_args args = new QueryFaceObjByImg_args();
      args.Image = image;
      args.NThreshold = nThreshold;
      args.NMaxCount = nMaxCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<FaceObj> recv_QueryFaceObjByImg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryFaceObjByImg_result result = new QueryFaceObjByImg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryFaceObjByImg failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryFaceObjTotalCount(AsyncCallback callback, object state, string id, string name, int bage, int eage, int gender, int type, long btime, long etime)
    {
      return send_QueryFaceObjTotalCount(callback, state, id, name, bage, eage, gender, type, btime, etime);
    }

    public int End_QueryFaceObjTotalCount(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryFaceObjTotalCount();
    }

    #endif

    public int QueryFaceObjTotalCount(string id, string name, int bage, int eage, int gender, int type, long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryFaceObjTotalCount(id, name, bage, eage, gender, type, btime, etime);
      return recv_QueryFaceObjTotalCount();

      #else
      var asyncResult = Begin_QueryFaceObjTotalCount(null, null, id, name, bage, eage, gender, type, btime, etime);
      return End_QueryFaceObjTotalCount(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryFaceObjTotalCount(AsyncCallback callback, object state, string id, string name, int bage, int eage, int gender, int type, long btime, long etime)
    #else
    public void send_QueryFaceObjTotalCount(string id, string name, int bage, int eage, int gender, int type, long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryFaceObjTotalCount", TMessageType.Call, seqid_));
      QueryFaceObjTotalCount_args args = new QueryFaceObjTotalCount_args();
      args.Id = id;
      args.Name = name;
      args.Bage = bage;
      args.Eage = eage;
      args.Gender = gender;
      args.Type = type;
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_QueryFaceObjTotalCount()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryFaceObjTotalCount_result result = new QueryFaceObjTotalCount_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryFaceObjTotalCount failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_ChangeTemplateImark(AsyncCallback callback, object state, string uuid, int imark)
    {
      return send_ChangeTemplateImark(callback, state, uuid, imark);
    }

    public int End_ChangeTemplateImark(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ChangeTemplateImark();
    }

    #endif

    public int ChangeTemplateImark(string uuid, int imark)
    {
      #if !SILVERLIGHT
      send_ChangeTemplateImark(uuid, imark);
      return recv_ChangeTemplateImark();

      #else
      var asyncResult = Begin_ChangeTemplateImark(null, null, uuid, imark);
      return End_ChangeTemplateImark(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ChangeTemplateImark(AsyncCallback callback, object state, string uuid, int imark)
    #else
    public void send_ChangeTemplateImark(string uuid, int imark)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ChangeTemplateImark", TMessageType.Call, seqid_));
      ChangeTemplateImark_args args = new ChangeTemplateImark_args();
      args.Uuid = uuid;
      args.Imark = imark;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_ChangeTemplateImark()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ChangeTemplateImark_result result = new ChangeTemplateImark_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ChangeTemplateImark failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_AddFaceObj(AsyncCallback callback, object state, FaceObj obj)
    {
      return send_AddFaceObj(callback, state, obj);
    }

    public List<ErrorInfo> End_AddFaceObj(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_AddFaceObj();
    }

    #endif

    public List<ErrorInfo> AddFaceObj(FaceObj obj)
    {
      #if !SILVERLIGHT
      send_AddFaceObj(obj);
      return recv_AddFaceObj();

      #else
      var asyncResult = Begin_AddFaceObj(null, null, obj);
      return End_AddFaceObj(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_AddFaceObj(AsyncCallback callback, object state, FaceObj obj)
    #else
    public void send_AddFaceObj(FaceObj obj)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("AddFaceObj", TMessageType.Call, seqid_));
      AddFaceObj_args args = new AddFaceObj_args();
      args.Obj = obj;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<ErrorInfo> recv_AddFaceObj()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      AddFaceObj_result result = new AddFaceObj_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddFaceObj failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_DelFaceObj(AsyncCallback callback, object state, string ID)
    {
      return send_DelFaceObj(callback, state, ID);
    }

    public int End_DelFaceObj(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_DelFaceObj();
    }

    #endif

    public int DelFaceObj(string ID)
    {
      #if !SILVERLIGHT
      send_DelFaceObj(ID);
      return recv_DelFaceObj();

      #else
      var asyncResult = Begin_DelFaceObj(null, null, ID);
      return End_DelFaceObj(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_DelFaceObj(AsyncCallback callback, object state, string ID)
    #else
    public void send_DelFaceObj(string ID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("DelFaceObj", TMessageType.Call, seqid_));
      DelFaceObj_args args = new DelFaceObj_args();
      args.ID = ID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_DelFaceObj()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      DelFaceObj_result result = new DelFaceObj_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DelFaceObj failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_ModifyFaceObj(AsyncCallback callback, object state, string id, FaceObj obj)
    {
      return send_ModifyFaceObj(callback, state, id, obj);
    }

    public List<ErrorInfo> End_ModifyFaceObj(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ModifyFaceObj();
    }

    #endif

    public List<ErrorInfo> ModifyFaceObj(string id, FaceObj obj)
    {
      #if !SILVERLIGHT
      send_ModifyFaceObj(id, obj);
      return recv_ModifyFaceObj();

      #else
      var asyncResult = Begin_ModifyFaceObj(null, null, id, obj);
      return End_ModifyFaceObj(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ModifyFaceObj(AsyncCallback callback, object state, string id, FaceObj obj)
    #else
    public void send_ModifyFaceObj(string id, FaceObj obj)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ModifyFaceObj", TMessageType.Call, seqid_));
      ModifyFaceObj_args args = new ModifyFaceObj_args();
      args.Id = id;
      args.Obj = obj;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<ErrorInfo> recv_ModifyFaceObj()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ModifyFaceObj_result result = new ModifyFaceObj_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ModifyFaceObj failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryDefGender(AsyncCallback callback, object state)
    {
      return send_QueryDefGender(callback, state);
    }

    public List<string> End_QueryDefGender(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryDefGender();
    }

    #endif

    public List<string> QueryDefGender()
    {
      #if !SILVERLIGHT
      send_QueryDefGender();
      return recv_QueryDefGender();

      #else
      var asyncResult = Begin_QueryDefGender(null, null);
      return End_QueryDefGender(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryDefGender(AsyncCallback callback, object state)
    #else
    public void send_QueryDefGender()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryDefGender", TMessageType.Call, seqid_));
      QueryDefGender_args args = new QueryDefGender_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_QueryDefGender()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryDefGender_result result = new QueryDefGender_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryDefGender failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryDefFaceObjType(AsyncCallback callback, object state)
    {
      return send_QueryDefFaceObjType(callback, state);
    }

    public List<string> End_QueryDefFaceObjType(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryDefFaceObjType();
    }

    #endif

    public List<string> QueryDefFaceObjType()
    {
      #if !SILVERLIGHT
      send_QueryDefFaceObjType();
      return recv_QueryDefFaceObjType();

      #else
      var asyncResult = Begin_QueryDefFaceObjType(null, null);
      return End_QueryDefFaceObjType(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryDefFaceObjType(AsyncCallback callback, object state)
    #else
    public void send_QueryDefFaceObjType()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryDefFaceObjType", TMessageType.Call, seqid_));
      QueryDefFaceObjType_args args = new QueryDefFaceObjType_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_QueryDefFaceObjType()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryDefFaceObjType_result result = new QueryDefFaceObjType_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryDefFaceObjType failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryDefChannelType(AsyncCallback callback, object state)
    {
      return send_QueryDefChannelType(callback, state);
    }

    public List<string> End_QueryDefChannelType(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryDefChannelType();
    }

    #endif

    public List<string> QueryDefChannelType()
    {
      #if !SILVERLIGHT
      send_QueryDefChannelType();
      return recv_QueryDefChannelType();

      #else
      var asyncResult = Begin_QueryDefChannelType(null, null);
      return End_QueryDefChannelType(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryDefChannelType(AsyncCallback callback, object state)
    #else
    public void send_QueryDefChannelType()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryDefChannelType", TMessageType.Call, seqid_));
      QueryDefChannelType_args args = new QueryDefChannelType_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_QueryDefChannelType()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryDefChannelType_result result = new QueryDefChannelType_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryDefChannelType failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryDefCameraType(AsyncCallback callback, object state)
    {
      return send_QueryDefCameraType(callback, state);
    }

    public List<string> End_QueryDefCameraType(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryDefCameraType();
    }

    #endif

    public List<string> QueryDefCameraType()
    {
      #if !SILVERLIGHT
      send_QueryDefCameraType();
      return recv_QueryDefCameraType();

      #else
      var asyncResult = Begin_QueryDefCameraType(null, null);
      return End_QueryDefCameraType(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryDefCameraType(AsyncCallback callback, object state)
    #else
    public void send_QueryDefCameraType()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryDefCameraType", TMessageType.Call, seqid_));
      QueryDefCameraType_args args = new QueryDefCameraType_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_QueryDefCameraType()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryDefCameraType_result result = new QueryDefCameraType_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryDefCameraType failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_HearBeat(AsyncCallback callback, object state)
    {
      return send_HearBeat(callback, state);
    }

    public int End_HearBeat(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_HearBeat();
    }

    #endif

    public int HearBeat()
    {
      #if !SILVERLIGHT
      send_HearBeat();
      return recv_HearBeat();

      #else
      var asyncResult = Begin_HearBeat(null, null);
      return End_HearBeat(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_HearBeat(AsyncCallback callback, object state)
    #else
    public void send_HearBeat()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("HearBeat", TMessageType.Call, seqid_));
      HearBeat_args args = new HearBeat_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_HearBeat()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      HearBeat_result result = new HearBeat_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "HearBeat failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryChannelByIp(AsyncCallback callback, object state, string capip)
    {
      return send_QueryChannelByIp(callback, state, capip);
    }

    public List<ChannelCfg> End_QueryChannelByIp(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryChannelByIp();
    }

    #endif

    public List<ChannelCfg> QueryChannelByIp(string capip)
    {
      #if !SILVERLIGHT
      send_QueryChannelByIp(capip);
      return recv_QueryChannelByIp();

      #else
      var asyncResult = Begin_QueryChannelByIp(null, null, capip);
      return End_QueryChannelByIp(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryChannelByIp(AsyncCallback callback, object state, string capip)
    #else
    public void send_QueryChannelByIp(string capip)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryChannelByIp", TMessageType.Call, seqid_));
      QueryChannelByIp_args args = new QueryChannelByIp_args();
      args.Capip = capip;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<ChannelCfg> recv_QueryChannelByIp()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryChannelByIp_result result = new QueryChannelByIp_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryChannelByIp failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryListFaceObjNum(AsyncCallback callback, object state)
    {
      return send_QueryListFaceObjNum(callback, state);
    }

    public int End_QueryListFaceObjNum(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryListFaceObjNum();
    }

    #endif

    public int QueryListFaceObjNum()
    {
      #if !SILVERLIGHT
      send_QueryListFaceObjNum();
      return recv_QueryListFaceObjNum();

      #else
      var asyncResult = Begin_QueryListFaceObjNum(null, null);
      return End_QueryListFaceObjNum(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryListFaceObjNum(AsyncCallback callback, object state)
    #else
    public void send_QueryListFaceObjNum()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryListFaceObjNum", TMessageType.Call, seqid_));
      QueryListFaceObjNum_args args = new QueryListFaceObjNum_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_QueryListFaceObjNum()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryListFaceObjNum_result result = new QueryListFaceObjNum_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryListFaceObjNum failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryListFaceObj(AsyncCallback callback, object state, int nPageFirstNum, int nPageNum)
    {
      return send_QueryListFaceObj(callback, state, nPageFirstNum, nPageNum);
    }

    public List<FaceObjTemplate> End_QueryListFaceObj(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryListFaceObj();
    }

    #endif

    public List<FaceObjTemplate> QueryListFaceObj(int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryListFaceObj(nPageFirstNum, nPageNum);
      return recv_QueryListFaceObj();

      #else
      var asyncResult = Begin_QueryListFaceObj(null, null, nPageFirstNum, nPageNum);
      return End_QueryListFaceObj(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryListFaceObj(AsyncCallback callback, object state, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryListFaceObj(int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryListFaceObj", TMessageType.Call, seqid_));
      QueryListFaceObj_args args = new QueryListFaceObj_args();
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<FaceObjTemplate> recv_QueryListFaceObj()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryListFaceObj_result result = new QueryListFaceObj_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryListFaceObj failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_SetCMPthreshold(AsyncCallback callback, object state, int threshold)
    {
      return send_SetCMPthreshold(callback, state, threshold);
    }

    public int End_SetCMPthreshold(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_SetCMPthreshold();
    }

    #endif

    public int SetCMPthreshold(int threshold)
    {
      #if !SILVERLIGHT
      send_SetCMPthreshold(threshold);
      return recv_SetCMPthreshold();

      #else
      var asyncResult = Begin_SetCMPthreshold(null, null, threshold);
      return End_SetCMPthreshold(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_SetCMPthreshold(AsyncCallback callback, object state, int threshold)
    #else
    public void send_SetCMPthreshold(int threshold)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("SetCMPthreshold", TMessageType.Call, seqid_));
      SetCMPthreshold_args args = new SetCMPthreshold_args();
      args.Threshold = threshold;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_SetCMPthreshold()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      SetCMPthreshold_result result = new SetCMPthreshold_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetCMPthreshold failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_GetClientIPList(AsyncCallback callback, object state)
    {
      return send_GetClientIPList(callback, state);
    }

    public List<string> End_GetClientIPList(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_GetClientIPList();
    }

    #endif

    public List<string> GetClientIPList()
    {
      #if !SILVERLIGHT
      send_GetClientIPList();
      return recv_GetClientIPList();

      #else
      var asyncResult = Begin_GetClientIPList(null, null);
      return End_GetClientIPList(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_GetClientIPList(AsyncCallback callback, object state)
    #else
    public void send_GetClientIPList()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("GetClientIPList", TMessageType.Call, seqid_));
      GetClientIPList_args args = new GetClientIPList_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_GetClientIPList()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      GetClientIPList_result result = new GetClientIPList_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetClientIPList failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_ClientRegion(AsyncCallback callback, object state, ClientCfg cfg)
    {
      return send_ClientRegion(callback, state, cfg);
    }

    public string End_ClientRegion(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ClientRegion();
    }

    #endif

    public string ClientRegion(ClientCfg cfg)
    {
      #if !SILVERLIGHT
      send_ClientRegion(cfg);
      return recv_ClientRegion();

      #else
      var asyncResult = Begin_ClientRegion(null, null, cfg);
      return End_ClientRegion(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ClientRegion(AsyncCallback callback, object state, ClientCfg cfg)
    #else
    public void send_ClientRegion(ClientCfg cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ClientRegion", TMessageType.Call, seqid_));
      ClientRegion_args args = new ClientRegion_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_ClientRegion()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ClientRegion_result result = new ClientRegion_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ClientRegion failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_VisitorRegion(AsyncCallback callback, object state, VisitorInfo cfg)
    {
      return send_VisitorRegion(callback, state, cfg);
    }

    public CResultCfg End_VisitorRegion(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_VisitorRegion();
    }

    #endif

    public CResultCfg VisitorRegion(VisitorInfo cfg)
    {
      #if !SILVERLIGHT
      send_VisitorRegion(cfg);
      return recv_VisitorRegion();

      #else
      var asyncResult = Begin_VisitorRegion(null, null, cfg);
      return End_VisitorRegion(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_VisitorRegion(AsyncCallback callback, object state, VisitorInfo cfg)
    #else
    public void send_VisitorRegion(VisitorInfo cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("VisitorRegion", TMessageType.Call, seqid_));
      VisitorRegion_args args = new VisitorRegion_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public CResultCfg recv_VisitorRegion()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      VisitorRegion_result result = new VisitorRegion_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "VisitorRegion failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_UploadCmpLogFromFront(AsyncCallback callback, object state, CmpFaceLogInfo cfg)
    {
      return send_UploadCmpLogFromFront(callback, state, cfg);
    }

    public ErrorInfo End_UploadCmpLogFromFront(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UploadCmpLogFromFront();
    }

    #endif

    public ErrorInfo UploadCmpLogFromFront(CmpFaceLogInfo cfg)
    {
      #if !SILVERLIGHT
      send_UploadCmpLogFromFront(cfg);
      return recv_UploadCmpLogFromFront();

      #else
      var asyncResult = Begin_UploadCmpLogFromFront(null, null, cfg);
      return End_UploadCmpLogFromFront(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UploadCmpLogFromFront(AsyncCallback callback, object state, CmpFaceLogInfo cfg)
    #else
    public void send_UploadCmpLogFromFront(CmpFaceLogInfo cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("UploadCmpLogFromFront", TMessageType.Call, seqid_));
      UploadCmpLogFromFront_args args = new UploadCmpLogFromFront_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ErrorInfo recv_UploadCmpLogFromFront()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UploadCmpLogFromFront_result result = new UploadCmpLogFromFront_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UploadCmpLogFromFront failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_VisitorVerifi(AsyncCallback callback, object state, List<byte[]> img, string channelID, string channelname)
    {
      return send_VisitorVerifi(callback, state, img, channelID, channelname);
    }

    public List<CResultCfg> End_VisitorVerifi(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_VisitorVerifi();
    }

    #endif

    public List<CResultCfg> VisitorVerifi(List<byte[]> img, string channelID, string channelname)
    {
      #if !SILVERLIGHT
      send_VisitorVerifi(img, channelID, channelname);
      return recv_VisitorVerifi();

      #else
      var asyncResult = Begin_VisitorVerifi(null, null, img, channelID, channelname);
      return End_VisitorVerifi(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_VisitorVerifi(AsyncCallback callback, object state, List<byte[]> img, string channelID, string channelname)
    #else
    public void send_VisitorVerifi(List<byte[]> img, string channelID, string channelname)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("VisitorVerifi", TMessageType.Call, seqid_));
      VisitorVerifi_args args = new VisitorVerifi_args();
      args.Img = img;
      args.ChannelID = channelID;
      args.Channelname = channelname;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CResultCfg> recv_VisitorVerifi()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      VisitorVerifi_result result = new VisitorVerifi_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "VisitorVerifi failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_uploadrealcap(AsyncCallback callback, object state, RealtimeCapInfo cfg)
    {
      return send_uploadrealcap(callback, state, cfg);
    }

    public int End_uploadrealcap(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_uploadrealcap();
    }

    #endif

    public int uploadrealcap(RealtimeCapInfo cfg)
    {
      #if !SILVERLIGHT
      send_uploadrealcap(cfg);
      return recv_uploadrealcap();

      #else
      var asyncResult = Begin_uploadrealcap(null, null, cfg);
      return End_uploadrealcap(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_uploadrealcap(AsyncCallback callback, object state, RealtimeCapInfo cfg)
    #else
    public void send_uploadrealcap(RealtimeCapInfo cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("uploadrealcap", TMessageType.Call, seqid_));
      uploadrealcap_args args = new uploadrealcap_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_uploadrealcap()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      uploadrealcap_result result = new uploadrealcap_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "uploadrealcap failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_ServerRegion(AsyncCallback callback, object state, List<SServerInfo> server)
    {
      return send_ServerRegion(callback, state, server);
    }

    public int End_ServerRegion(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ServerRegion();
    }

    #endif

    public int ServerRegion(List<SServerInfo> server)
    {
      #if !SILVERLIGHT
      send_ServerRegion(server);
      return recv_ServerRegion();

      #else
      var asyncResult = Begin_ServerRegion(null, null, server);
      return End_ServerRegion(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ServerRegion(AsyncCallback callback, object state, List<SServerInfo> server)
    #else
    public void send_ServerRegion(List<SServerInfo> server)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ServerRegion", TMessageType.Call, seqid_));
      ServerRegion_args args = new ServerRegion_args();
      args.Server = server;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_ServerRegion()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ServerRegion_result result = new ServerRegion_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ServerRegion failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_SetConfig(AsyncCallback callback, object state, List<SServerInfo> server, List<SConfigInfo> config)
    {
      return send_SetConfig(callback, state, server, config);
    }

    public List<ErrorInfo> End_SetConfig(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_SetConfig();
    }

    #endif

    public List<ErrorInfo> SetConfig(List<SServerInfo> server, List<SConfigInfo> config)
    {
      #if !SILVERLIGHT
      send_SetConfig(server, config);
      return recv_SetConfig();

      #else
      var asyncResult = Begin_SetConfig(null, null, server, config);
      return End_SetConfig(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_SetConfig(AsyncCallback callback, object state, List<SServerInfo> server, List<SConfigInfo> config)
    #else
    public void send_SetConfig(List<SServerInfo> server, List<SConfigInfo> config)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("SetConfig", TMessageType.Call, seqid_));
      SetConfig_args args = new SetConfig_args();
      args.Server = server;
      args.Config = config;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<ErrorInfo> recv_SetConfig()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      SetConfig_result result = new SetConfig_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetConfig failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_GetConfig(AsyncCallback callback, object state, int stype)
    {
      return send_GetConfig(callback, state, stype);
    }

    public List<SConfigInfo> End_GetConfig(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_GetConfig();
    }

    #endif

    public List<SConfigInfo> GetConfig(int stype)
    {
      #if !SILVERLIGHT
      send_GetConfig(stype);
      return recv_GetConfig();

      #else
      var asyncResult = Begin_GetConfig(null, null, stype);
      return End_GetConfig(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_GetConfig(AsyncCallback callback, object state, int stype)
    #else
    public void send_GetConfig(int stype)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("GetConfig", TMessageType.Call, seqid_));
      GetConfig_args args = new GetConfig_args();
      args.Stype = stype;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SConfigInfo> recv_GetConfig()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      GetConfig_result result = new GetConfig_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetConfig failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapRecordTotalCountH(AsyncCallback callback, object state, string channel, long btime, long etime)
    {
      return send_QueryCapRecordTotalCountH(callback, state, channel, btime, etime);
    }

    public List<SCountInfo> End_QueryCapRecordTotalCountH(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapRecordTotalCountH();
    }

    #endif

    public List<SCountInfo> QueryCapRecordTotalCountH(string channel, long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryCapRecordTotalCountH(channel, btime, etime);
      return recv_QueryCapRecordTotalCountH();

      #else
      var asyncResult = Begin_QueryCapRecordTotalCountH(null, null, channel, btime, etime);
      return End_QueryCapRecordTotalCountH(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapRecordTotalCountH(AsyncCallback callback, object state, string channel, long btime, long etime)
    #else
    public void send_QueryCapRecordTotalCountH(string channel, long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapRecordTotalCountH", TMessageType.Call, seqid_));
      QueryCapRecordTotalCountH_args args = new QueryCapRecordTotalCountH_args();
      args.Channel = channel;
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfo> recv_QueryCapRecordTotalCountH()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapRecordTotalCountH_result result = new QueryCapRecordTotalCountH_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapRecordTotalCountH failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpRecordTotalCountH(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime)
    {
      return send_QueryCmpRecordTotalCountH(callback, state, channel, name, type, gender, bage, eage, btime, etime);
    }

    public List<SCountInfo> End_QueryCmpRecordTotalCountH(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpRecordTotalCountH();
    }

    #endif

    public List<SCountInfo> QueryCmpRecordTotalCountH(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryCmpRecordTotalCountH(channel, name, type, gender, bage, eage, btime, etime);
      return recv_QueryCmpRecordTotalCountH();

      #else
      var asyncResult = Begin_QueryCmpRecordTotalCountH(null, null, channel, name, type, gender, bage, eage, btime, etime);
      return End_QueryCmpRecordTotalCountH(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpRecordTotalCountH(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime)
    #else
    public void send_QueryCmpRecordTotalCountH(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpRecordTotalCountH", TMessageType.Call, seqid_));
      QueryCmpRecordTotalCountH_args args = new QueryCmpRecordTotalCountH_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfo> recv_QueryCmpRecordTotalCountH()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpRecordTotalCountH_result result = new QueryCmpRecordTotalCountH_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpRecordTotalCountH failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapDetailsH(AsyncCallback callback, object state, string id, string day)
    {
      return send_QueryCapDetailsH(callback, state, id, day);
    }

    public List<CapObjImg> End_QueryCapDetailsH(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapDetailsH();
    }

    #endif

    public List<CapObjImg> QueryCapDetailsH(string id, string day)
    {
      #if !SILVERLIGHT
      send_QueryCapDetailsH(id, day);
      return recv_QueryCapDetailsH();

      #else
      var asyncResult = Begin_QueryCapDetailsH(null, null, id, day);
      return End_QueryCapDetailsH(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapDetailsH(AsyncCallback callback, object state, string id, string day)
    #else
    public void send_QueryCapDetailsH(string id, string day)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapDetailsH", TMessageType.Call, seqid_));
      QueryCapDetailsH_args args = new QueryCapDetailsH_args();
      args.Id = id;
      args.Day = day;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CapObjImg> recv_QueryCapDetailsH()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapDetailsH_result result = new QueryCapDetailsH_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapDetailsH failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapLogImageH(AsyncCallback callback, object state, string ID, string day)
    {
      return send_QueryCapLogImageH(callback, state, ID, day);
    }

    public List<byte[]> End_QueryCapLogImageH(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapLogImageH();
    }

    #endif

    public List<byte[]> QueryCapLogImageH(string ID, string day)
    {
      #if !SILVERLIGHT
      send_QueryCapLogImageH(ID, day);
      return recv_QueryCapLogImageH();

      #else
      var asyncResult = Begin_QueryCapLogImageH(null, null, ID, day);
      return End_QueryCapLogImageH(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapLogImageH(AsyncCallback callback, object state, string ID, string day)
    #else
    public void send_QueryCapLogImageH(string ID, string day)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapLogImageH", TMessageType.Call, seqid_));
      QueryCapLogImageH_args args = new QueryCapLogImageH_args();
      args.ID = ID;
      args.Day = day;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<byte[]> recv_QueryCapLogImageH()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapLogImageH_result result = new QueryCapLogImageH_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapLogImageH failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogImageH(AsyncCallback callback, object state, string ID, string day)
    {
      return send_QueryCmpLogImageH(callback, state, ID, day);
    }

    public List<byte[]> End_QueryCmpLogImageH(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogImageH();
    }

    #endif

    public List<byte[]> QueryCmpLogImageH(string ID, string day)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogImageH(ID, day);
      return recv_QueryCmpLogImageH();

      #else
      var asyncResult = Begin_QueryCmpLogImageH(null, null, ID, day);
      return End_QueryCmpLogImageH(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogImageH(AsyncCallback callback, object state, string ID, string day)
    #else
    public void send_QueryCmpLogImageH(string ID, string day)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogImageH", TMessageType.Call, seqid_));
      QueryCmpLogImageH_args args = new QueryCmpLogImageH_args();
      args.ID = ID;
      args.Day = day;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<byte[]> recv_QueryCmpLogImageH()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogImageH_result result = new QueryCmpLogImageH_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogImageH failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpByCapIdWidthImgH(AsyncCallback callback, object state, string ID, string day)
    {
      return send_QueryCmpByCapIdWidthImgH(callback, state, ID, day);
    }

    public List<CmpFaceLogWidthImg> End_QueryCmpByCapIdWidthImgH(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpByCapIdWidthImgH();
    }

    #endif

    public List<CmpFaceLogWidthImg> QueryCmpByCapIdWidthImgH(string ID, string day)
    {
      #if !SILVERLIGHT
      send_QueryCmpByCapIdWidthImgH(ID, day);
      return recv_QueryCmpByCapIdWidthImgH();

      #else
      var asyncResult = Begin_QueryCmpByCapIdWidthImgH(null, null, ID, day);
      return End_QueryCmpByCapIdWidthImgH(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpByCapIdWidthImgH(AsyncCallback callback, object state, string ID, string day)
    #else
    public void send_QueryCmpByCapIdWidthImgH(string ID, string day)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpByCapIdWidthImgH", TMessageType.Call, seqid_));
      QueryCmpByCapIdWidthImgH_args args = new QueryCmpByCapIdWidthImgH_args();
      args.ID = ID;
      args.Day = day;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLogWidthImg> recv_QueryCmpByCapIdWidthImgH()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpByCapIdWidthImgH_result result = new QueryCmpByCapIdWidthImgH_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpByCapIdWidthImgH failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_UpLoadCapFace2(AsyncCallback callback, object state, string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis)
    {
      return send_UpLoadCapFace2(callback, state, ChannelID, index, timeIn, timeOut, age, gender, fis);
    }

    public List<CmpInfo2Cap> End_UpLoadCapFace2(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UpLoadCapFace2();
    }

    #endif

    public List<CmpInfo2Cap> UpLoadCapFace2(string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis)
    {
      #if !SILVERLIGHT
      send_UpLoadCapFace2(ChannelID, index, timeIn, timeOut, age, gender, fis);
      return recv_UpLoadCapFace2();

      #else
      var asyncResult = Begin_UpLoadCapFace2(null, null, ChannelID, index, timeIn, timeOut, age, gender, fis);
      return End_UpLoadCapFace2(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UpLoadCapFace2(AsyncCallback callback, object state, string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis)
    #else
    public void send_UpLoadCapFace2(string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("UpLoadCapFace2", TMessageType.Call, seqid_));
      UpLoadCapFace2_args args = new UpLoadCapFace2_args();
      args.ChannelID = ChannelID;
      args.Index = index;
      args.TimeIn = timeIn;
      args.TimeOut = timeOut;
      args.Age = age;
      args.Gender = gender;
      args.Fis = fis;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpInfo2Cap> recv_UpLoadCapFace2()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UpLoadCapFace2_result result = new UpLoadCapFace2_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpLoadCapFace2 failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QuerySenceImg(AsyncCallback callback, object state, string ID, string day)
    {
      return send_QuerySenceImg(callback, state, ID, day);
    }

    public List<byte[]> End_QuerySenceImg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QuerySenceImg();
    }

    #endif

    /// <summary>
    /// 抓拍上传，增加场景照片*
    /// </summary>
    /// <param name="ID"></param>
    /// <param name="day"></param>
    public List<byte[]> QuerySenceImg(string ID, string day)
    {
      #if !SILVERLIGHT
      send_QuerySenceImg(ID, day);
      return recv_QuerySenceImg();

      #else
      var asyncResult = Begin_QuerySenceImg(null, null, ID, day);
      return End_QuerySenceImg(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QuerySenceImg(AsyncCallback callback, object state, string ID, string day)
    #else
    public void send_QuerySenceImg(string ID, string day)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QuerySenceImg", TMessageType.Call, seqid_));
      QuerySenceImg_args args = new QuerySenceImg_args();
      args.ID = ID;
      args.Day = day;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<byte[]> recv_QuerySenceImg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QuerySenceImg_result result = new QuerySenceImg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QuerySenceImg failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryDefGenderH(AsyncCallback callback, object state, int ID)
    {
      return send_QueryDefGenderH(callback, state, ID);
    }

    public List<STypeInfo> End_QueryDefGenderH(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryDefGenderH();
    }

    #endif

    /// <summary>
    /// 类型管理*
    /// </summary>
    /// <param name="ID"></param>
    public List<STypeInfo> QueryDefGenderH(int ID)
    {
      #if !SILVERLIGHT
      send_QueryDefGenderH(ID);
      return recv_QueryDefGenderH();

      #else
      var asyncResult = Begin_QueryDefGenderH(null, null, ID);
      return End_QueryDefGenderH(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryDefGenderH(AsyncCallback callback, object state, int ID)
    #else
    public void send_QueryDefGenderH(int ID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryDefGenderH", TMessageType.Call, seqid_));
      QueryDefGenderH_args args = new QueryDefGenderH_args();
      args.ID = ID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<STypeInfo> recv_QueryDefGenderH()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryDefGenderH_result result = new QueryDefGenderH_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryDefGenderH failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryDefFaceObjTypeH(AsyncCallback callback, object state, int ID)
    {
      return send_QueryDefFaceObjTypeH(callback, state, ID);
    }

    public List<STypeInfo> End_QueryDefFaceObjTypeH(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryDefFaceObjTypeH();
    }

    #endif

    public List<STypeInfo> QueryDefFaceObjTypeH(int ID)
    {
      #if !SILVERLIGHT
      send_QueryDefFaceObjTypeH(ID);
      return recv_QueryDefFaceObjTypeH();

      #else
      var asyncResult = Begin_QueryDefFaceObjTypeH(null, null, ID);
      return End_QueryDefFaceObjTypeH(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryDefFaceObjTypeH(AsyncCallback callback, object state, int ID)
    #else
    public void send_QueryDefFaceObjTypeH(int ID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryDefFaceObjTypeH", TMessageType.Call, seqid_));
      QueryDefFaceObjTypeH_args args = new QueryDefFaceObjTypeH_args();
      args.ID = ID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<STypeInfo> recv_QueryDefFaceObjTypeH()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryDefFaceObjTypeH_result result = new QueryDefFaceObjTypeH_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryDefFaceObjTypeH failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryDefChannelTypeH(AsyncCallback callback, object state, int ID)
    {
      return send_QueryDefChannelTypeH(callback, state, ID);
    }

    public List<STypeInfo> End_QueryDefChannelTypeH(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryDefChannelTypeH();
    }

    #endif

    public List<STypeInfo> QueryDefChannelTypeH(int ID)
    {
      #if !SILVERLIGHT
      send_QueryDefChannelTypeH(ID);
      return recv_QueryDefChannelTypeH();

      #else
      var asyncResult = Begin_QueryDefChannelTypeH(null, null, ID);
      return End_QueryDefChannelTypeH(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryDefChannelTypeH(AsyncCallback callback, object state, int ID)
    #else
    public void send_QueryDefChannelTypeH(int ID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryDefChannelTypeH", TMessageType.Call, seqid_));
      QueryDefChannelTypeH_args args = new QueryDefChannelTypeH_args();
      args.ID = ID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<STypeInfo> recv_QueryDefChannelTypeH()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryDefChannelTypeH_result result = new QueryDefChannelTypeH_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryDefChannelTypeH failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryDefCameraTypeH(AsyncCallback callback, object state, int ID)
    {
      return send_QueryDefCameraTypeH(callback, state, ID);
    }

    public List<STypeInfo> End_QueryDefCameraTypeH(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryDefCameraTypeH();
    }

    #endif

    public List<STypeInfo> QueryDefCameraTypeH(int ID)
    {
      #if !SILVERLIGHT
      send_QueryDefCameraTypeH(ID);
      return recv_QueryDefCameraTypeH();

      #else
      var asyncResult = Begin_QueryDefCameraTypeH(null, null, ID);
      return End_QueryDefCameraTypeH(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryDefCameraTypeH(AsyncCallback callback, object state, int ID)
    #else
    public void send_QueryDefCameraTypeH(int ID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryDefCameraTypeH", TMessageType.Call, seqid_));
      QueryDefCameraTypeH_args args = new QueryDefCameraTypeH_args();
      args.ID = ID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<STypeInfo> recv_QueryDefCameraTypeH()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryDefCameraTypeH_result result = new QueryDefCameraTypeH_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryDefCameraTypeH failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_SetDefGenderH(AsyncCallback callback, object state, List<STypeInfo> sinfo)
    {
      return send_SetDefGenderH(callback, state, sinfo);
    }

    public int End_SetDefGenderH(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_SetDefGenderH();
    }

    #endif

    public int SetDefGenderH(List<STypeInfo> sinfo)
    {
      #if !SILVERLIGHT
      send_SetDefGenderH(sinfo);
      return recv_SetDefGenderH();

      #else
      var asyncResult = Begin_SetDefGenderH(null, null, sinfo);
      return End_SetDefGenderH(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_SetDefGenderH(AsyncCallback callback, object state, List<STypeInfo> sinfo)
    #else
    public void send_SetDefGenderH(List<STypeInfo> sinfo)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("SetDefGenderH", TMessageType.Call, seqid_));
      SetDefGenderH_args args = new SetDefGenderH_args();
      args.Sinfo = sinfo;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_SetDefGenderH()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      SetDefGenderH_result result = new SetDefGenderH_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetDefGenderH failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_SetDefFaceObjTypeH(AsyncCallback callback, object state, List<STypeInfo> sinfo)
    {
      return send_SetDefFaceObjTypeH(callback, state, sinfo);
    }

    public int End_SetDefFaceObjTypeH(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_SetDefFaceObjTypeH();
    }

    #endif

    public int SetDefFaceObjTypeH(List<STypeInfo> sinfo)
    {
      #if !SILVERLIGHT
      send_SetDefFaceObjTypeH(sinfo);
      return recv_SetDefFaceObjTypeH();

      #else
      var asyncResult = Begin_SetDefFaceObjTypeH(null, null, sinfo);
      return End_SetDefFaceObjTypeH(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_SetDefFaceObjTypeH(AsyncCallback callback, object state, List<STypeInfo> sinfo)
    #else
    public void send_SetDefFaceObjTypeH(List<STypeInfo> sinfo)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("SetDefFaceObjTypeH", TMessageType.Call, seqid_));
      SetDefFaceObjTypeH_args args = new SetDefFaceObjTypeH_args();
      args.Sinfo = sinfo;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_SetDefFaceObjTypeH()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      SetDefFaceObjTypeH_result result = new SetDefFaceObjTypeH_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetDefFaceObjTypeH failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_SetDefChannelTypeH(AsyncCallback callback, object state, List<STypeInfo> sinfo)
    {
      return send_SetDefChannelTypeH(callback, state, sinfo);
    }

    public int End_SetDefChannelTypeH(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_SetDefChannelTypeH();
    }

    #endif

    public int SetDefChannelTypeH(List<STypeInfo> sinfo)
    {
      #if !SILVERLIGHT
      send_SetDefChannelTypeH(sinfo);
      return recv_SetDefChannelTypeH();

      #else
      var asyncResult = Begin_SetDefChannelTypeH(null, null, sinfo);
      return End_SetDefChannelTypeH(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_SetDefChannelTypeH(AsyncCallback callback, object state, List<STypeInfo> sinfo)
    #else
    public void send_SetDefChannelTypeH(List<STypeInfo> sinfo)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("SetDefChannelTypeH", TMessageType.Call, seqid_));
      SetDefChannelTypeH_args args = new SetDefChannelTypeH_args();
      args.Sinfo = sinfo;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_SetDefChannelTypeH()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      SetDefChannelTypeH_result result = new SetDefChannelTypeH_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetDefChannelTypeH failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_SetDefCameraTypeH(AsyncCallback callback, object state, List<STypeInfo> sinfo)
    {
      return send_SetDefCameraTypeH(callback, state, sinfo);
    }

    public int End_SetDefCameraTypeH(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_SetDefCameraTypeH();
    }

    #endif

    public int SetDefCameraTypeH(List<STypeInfo> sinfo)
    {
      #if !SILVERLIGHT
      send_SetDefCameraTypeH(sinfo);
      return recv_SetDefCameraTypeH();

      #else
      var asyncResult = Begin_SetDefCameraTypeH(null, null, sinfo);
      return End_SetDefCameraTypeH(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_SetDefCameraTypeH(AsyncCallback callback, object state, List<STypeInfo> sinfo)
    #else
    public void send_SetDefCameraTypeH(List<STypeInfo> sinfo)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("SetDefCameraTypeH", TMessageType.Call, seqid_));
      SetDefCameraTypeH_args args = new SetDefCameraTypeH_args();
      args.Sinfo = sinfo;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_SetDefCameraTypeH()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      SetDefCameraTypeH_result result = new SetDefCameraTypeH_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetDefCameraTypeH failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_AddDiaplayArea(AsyncCallback callback, object state, DiaplayAreaCfg cfg)
    {
      return send_AddDiaplayArea(callback, state, cfg);
    }

    public int End_AddDiaplayArea(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_AddDiaplayArea();
    }

    #endif

    /// <summary>
    /// *贵阳数博会 20161216 begin***
    /// </summary>
    /// <param name="cfg"></param>
    public int AddDiaplayArea(DiaplayAreaCfg cfg)
    {
      #if !SILVERLIGHT
      send_AddDiaplayArea(cfg);
      return recv_AddDiaplayArea();

      #else
      var asyncResult = Begin_AddDiaplayArea(null, null, cfg);
      return End_AddDiaplayArea(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_AddDiaplayArea(AsyncCallback callback, object state, DiaplayAreaCfg cfg)
    #else
    public void send_AddDiaplayArea(DiaplayAreaCfg cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("AddDiaplayArea", TMessageType.Call, seqid_));
      AddDiaplayArea_args args = new AddDiaplayArea_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_AddDiaplayArea()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      AddDiaplayArea_result result = new AddDiaplayArea_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddDiaplayArea failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_ModDiaplayArea(AsyncCallback callback, object state, DiaplayAreaCfg cfg)
    {
      return send_ModDiaplayArea(callback, state, cfg);
    }

    public int End_ModDiaplayArea(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ModDiaplayArea();
    }

    #endif

    public int ModDiaplayArea(DiaplayAreaCfg cfg)
    {
      #if !SILVERLIGHT
      send_ModDiaplayArea(cfg);
      return recv_ModDiaplayArea();

      #else
      var asyncResult = Begin_ModDiaplayArea(null, null, cfg);
      return End_ModDiaplayArea(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ModDiaplayArea(AsyncCallback callback, object state, DiaplayAreaCfg cfg)
    #else
    public void send_ModDiaplayArea(DiaplayAreaCfg cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ModDiaplayArea", TMessageType.Call, seqid_));
      ModDiaplayArea_args args = new ModDiaplayArea_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_ModDiaplayArea()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ModDiaplayArea_result result = new ModDiaplayArea_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ModDiaplayArea failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_DelDiaplayArea(AsyncCallback callback, object state, string zid)
    {
      return send_DelDiaplayArea(callback, state, zid);
    }

    public int End_DelDiaplayArea(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_DelDiaplayArea();
    }

    #endif

    public int DelDiaplayArea(string zid)
    {
      #if !SILVERLIGHT
      send_DelDiaplayArea(zid);
      return recv_DelDiaplayArea();

      #else
      var asyncResult = Begin_DelDiaplayArea(null, null, zid);
      return End_DelDiaplayArea(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_DelDiaplayArea(AsyncCallback callback, object state, string zid)
    #else
    public void send_DelDiaplayArea(string zid)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("DelDiaplayArea", TMessageType.Call, seqid_));
      DelDiaplayArea_args args = new DelDiaplayArea_args();
      args.Zid = zid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_DelDiaplayArea()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      DelDiaplayArea_result result = new DelDiaplayArea_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DelDiaplayArea failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryListDiaplayAreaNum(AsyncCallback callback, object state, string name)
    {
      return send_QueryListDiaplayAreaNum(callback, state, name);
    }

    public int End_QueryListDiaplayAreaNum(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryListDiaplayAreaNum();
    }

    #endif

    public int QueryListDiaplayAreaNum(string name)
    {
      #if !SILVERLIGHT
      send_QueryListDiaplayAreaNum(name);
      return recv_QueryListDiaplayAreaNum();

      #else
      var asyncResult = Begin_QueryListDiaplayAreaNum(null, null, name);
      return End_QueryListDiaplayAreaNum(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryListDiaplayAreaNum(AsyncCallback callback, object state, string name)
    #else
    public void send_QueryListDiaplayAreaNum(string name)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryListDiaplayAreaNum", TMessageType.Call, seqid_));
      QueryListDiaplayAreaNum_args args = new QueryListDiaplayAreaNum_args();
      args.Name = name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_QueryListDiaplayAreaNum()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryListDiaplayAreaNum_result result = new QueryListDiaplayAreaNum_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryListDiaplayAreaNum failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryListDiaplayArea(AsyncCallback callback, object state, string name)
    {
      return send_QueryListDiaplayArea(callback, state, name);
    }

    public List<DiaplayAreaCfg> End_QueryListDiaplayArea(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryListDiaplayArea();
    }

    #endif

    public List<DiaplayAreaCfg> QueryListDiaplayArea(string name)
    {
      #if !SILVERLIGHT
      send_QueryListDiaplayArea(name);
      return recv_QueryListDiaplayArea();

      #else
      var asyncResult = Begin_QueryListDiaplayArea(null, null, name);
      return End_QueryListDiaplayArea(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryListDiaplayArea(AsyncCallback callback, object state, string name)
    #else
    public void send_QueryListDiaplayArea(string name)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryListDiaplayArea", TMessageType.Call, seqid_));
      QueryListDiaplayArea_args args = new QueryListDiaplayArea_args();
      args.Name = name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<DiaplayAreaCfg> recv_QueryListDiaplayArea()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryListDiaplayArea_result result = new QueryListDiaplayArea_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryListDiaplayArea failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_AddChannelGY(AsyncCallback callback, object state, ChannelCfgGY cfg)
    {
      return send_AddChannelGY(callback, state, cfg);
    }

    public int End_AddChannelGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_AddChannelGY();
    }

    #endif

    public int AddChannelGY(ChannelCfgGY cfg)
    {
      #if !SILVERLIGHT
      send_AddChannelGY(cfg);
      return recv_AddChannelGY();

      #else
      var asyncResult = Begin_AddChannelGY(null, null, cfg);
      return End_AddChannelGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_AddChannelGY(AsyncCallback callback, object state, ChannelCfgGY cfg)
    #else
    public void send_AddChannelGY(ChannelCfgGY cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("AddChannelGY", TMessageType.Call, seqid_));
      AddChannelGY_args args = new AddChannelGY_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_AddChannelGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      AddChannelGY_result result = new AddChannelGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddChannelGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_DelChannelGY(AsyncCallback callback, object state, string channelID)
    {
      return send_DelChannelGY(callback, state, channelID);
    }

    public int End_DelChannelGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_DelChannelGY();
    }

    #endif

    public int DelChannelGY(string channelID)
    {
      #if !SILVERLIGHT
      send_DelChannelGY(channelID);
      return recv_DelChannelGY();

      #else
      var asyncResult = Begin_DelChannelGY(null, null, channelID);
      return End_DelChannelGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_DelChannelGY(AsyncCallback callback, object state, string channelID)
    #else
    public void send_DelChannelGY(string channelID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("DelChannelGY", TMessageType.Call, seqid_));
      DelChannelGY_args args = new DelChannelGY_args();
      args.ChannelID = channelID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_DelChannelGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      DelChannelGY_result result = new DelChannelGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DelChannelGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_ModifyChannelGY(AsyncCallback callback, object state, ChannelCfgGY cfg)
    {
      return send_ModifyChannelGY(callback, state, cfg);
    }

    public int End_ModifyChannelGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ModifyChannelGY();
    }

    #endif

    public int ModifyChannelGY(ChannelCfgGY cfg)
    {
      #if !SILVERLIGHT
      send_ModifyChannelGY(cfg);
      return recv_ModifyChannelGY();

      #else
      var asyncResult = Begin_ModifyChannelGY(null, null, cfg);
      return End_ModifyChannelGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ModifyChannelGY(AsyncCallback callback, object state, ChannelCfgGY cfg)
    #else
    public void send_ModifyChannelGY(ChannelCfgGY cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ModifyChannelGY", TMessageType.Call, seqid_));
      ModifyChannelGY_args args = new ModifyChannelGY_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_ModifyChannelGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ModifyChannelGY_result result = new ModifyChannelGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ModifyChannelGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryAllChannelGY(AsyncCallback callback, object state)
    {
      return send_QueryAllChannelGY(callback, state);
    }

    public List<ChannelCfgGY> End_QueryAllChannelGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryAllChannelGY();
    }

    #endif

    public List<ChannelCfgGY> QueryAllChannelGY()
    {
      #if !SILVERLIGHT
      send_QueryAllChannelGY();
      return recv_QueryAllChannelGY();

      #else
      var asyncResult = Begin_QueryAllChannelGY(null, null);
      return End_QueryAllChannelGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryAllChannelGY(AsyncCallback callback, object state)
    #else
    public void send_QueryAllChannelGY()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryAllChannelGY", TMessageType.Call, seqid_));
      QueryAllChannelGY_args args = new QueryAllChannelGY_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<ChannelCfgGY> recv_QueryAllChannelGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryAllChannelGY_result result = new QueryAllChannelGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryAllChannelGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryChannelGY(AsyncCallback callback, object state, string channelID)
    {
      return send_QueryChannelGY(callback, state, channelID);
    }

    public ChannelCfgGY End_QueryChannelGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryChannelGY();
    }

    #endif

    public ChannelCfgGY QueryChannelGY(string channelID)
    {
      #if !SILVERLIGHT
      send_QueryChannelGY(channelID);
      return recv_QueryChannelGY();

      #else
      var asyncResult = Begin_QueryChannelGY(null, null, channelID);
      return End_QueryChannelGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryChannelGY(AsyncCallback callback, object state, string channelID)
    #else
    public void send_QueryChannelGY(string channelID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryChannelGY", TMessageType.Call, seqid_));
      QueryChannelGY_args args = new QueryChannelGY_args();
      args.ChannelID = channelID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ChannelCfgGY recv_QueryChannelGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryChannelGY_result result = new QueryChannelGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryChannelGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryChannelByIpGY(AsyncCallback callback, object state, string capip)
    {
      return send_QueryChannelByIpGY(callback, state, capip);
    }

    public List<ChannelCfgGY> End_QueryChannelByIpGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryChannelByIpGY();
    }

    #endif

    public List<ChannelCfgGY> QueryChannelByIpGY(string capip)
    {
      #if !SILVERLIGHT
      send_QueryChannelByIpGY(capip);
      return recv_QueryChannelByIpGY();

      #else
      var asyncResult = Begin_QueryChannelByIpGY(null, null, capip);
      return End_QueryChannelByIpGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryChannelByIpGY(AsyncCallback callback, object state, string capip)
    #else
    public void send_QueryChannelByIpGY(string capip)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryChannelByIpGY", TMessageType.Call, seqid_));
      QueryChannelByIpGY_args args = new QueryChannelByIpGY_args();
      args.Capip = capip;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<ChannelCfgGY> recv_QueryChannelByIpGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryChannelByIpGY_result result = new QueryChannelByIpGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryChannelByIpGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapLogGY(AsyncCallback callback, object state, string channel, string channel_div, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      return send_QueryCapLogGY(callback, state, channel, channel_div, btime, etime, nPageFirstNum, nPageNum);
    }

    public List<CapFaceLogGY> End_QueryCapLogGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapLogGY();
    }

    #endif

    public List<CapFaceLogGY> QueryCapLogGY(string channel, string channel_div, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryCapLogGY(channel, channel_div, btime, etime, nPageFirstNum, nPageNum);
      return recv_QueryCapLogGY();

      #else
      var asyncResult = Begin_QueryCapLogGY(null, null, channel, channel_div, btime, etime, nPageFirstNum, nPageNum);
      return End_QueryCapLogGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapLogGY(AsyncCallback callback, object state, string channel, string channel_div, long btime, long etime, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryCapLogGY(string channel, string channel_div, long btime, long etime, int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapLogGY", TMessageType.Call, seqid_));
      QueryCapLogGY_args args = new QueryCapLogGY_args();
      args.Channel = channel;
      args.Channel_div = channel_div;
      args.Btime = btime;
      args.Etime = etime;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CapFaceLogGY> recv_QueryCapLogGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapLogGY_result result = new QueryCapLogGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapLogGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapRecordTotalCountHGY(AsyncCallback callback, object state, string channel, string channel_div, long btime, long etime)
    {
      return send_QueryCapRecordTotalCountHGY(callback, state, channel, channel_div, btime, etime);
    }

    public List<SCountInfo> End_QueryCapRecordTotalCountHGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapRecordTotalCountHGY();
    }

    #endif

    public List<SCountInfo> QueryCapRecordTotalCountHGY(string channel, string channel_div, long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryCapRecordTotalCountHGY(channel, channel_div, btime, etime);
      return recv_QueryCapRecordTotalCountHGY();

      #else
      var asyncResult = Begin_QueryCapRecordTotalCountHGY(null, null, channel, channel_div, btime, etime);
      return End_QueryCapRecordTotalCountHGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapRecordTotalCountHGY(AsyncCallback callback, object state, string channel, string channel_div, long btime, long etime)
    #else
    public void send_QueryCapRecordTotalCountHGY(string channel, string channel_div, long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapRecordTotalCountHGY", TMessageType.Call, seqid_));
      QueryCapRecordTotalCountHGY_args args = new QueryCapRecordTotalCountHGY_args();
      args.Channel = channel;
      args.Channel_div = channel_div;
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfo> recv_QueryCapRecordTotalCountHGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapRecordTotalCountHGY_result result = new QueryCapRecordTotalCountHGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapRecordTotalCountHGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapDetailsHGY(AsyncCallback callback, object state, string id, string day)
    {
      return send_QueryCapDetailsHGY(callback, state, id, day);
    }

    public List<CapObjImgGY> End_QueryCapDetailsHGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapDetailsHGY();
    }

    #endif

    public List<CapObjImgGY> QueryCapDetailsHGY(string id, string day)
    {
      #if !SILVERLIGHT
      send_QueryCapDetailsHGY(id, day);
      return recv_QueryCapDetailsHGY();

      #else
      var asyncResult = Begin_QueryCapDetailsHGY(null, null, id, day);
      return End_QueryCapDetailsHGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapDetailsHGY(AsyncCallback callback, object state, string id, string day)
    #else
    public void send_QueryCapDetailsHGY(string id, string day)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapDetailsHGY", TMessageType.Call, seqid_));
      QueryCapDetailsHGY_args args = new QueryCapDetailsHGY_args();
      args.Id = id;
      args.Day = day;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CapObjImgGY> recv_QueryCapDetailsHGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapDetailsHGY_result result = new QueryCapDetailsHGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapDetailsHGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapLogImageHGY(AsyncCallback callback, object state, string ID, string day)
    {
      return send_QueryCapLogImageHGY(callback, state, ID, day);
    }

    public List<byte[]> End_QueryCapLogImageHGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapLogImageHGY();
    }

    #endif

    public List<byte[]> QueryCapLogImageHGY(string ID, string day)
    {
      #if !SILVERLIGHT
      send_QueryCapLogImageHGY(ID, day);
      return recv_QueryCapLogImageHGY();

      #else
      var asyncResult = Begin_QueryCapLogImageHGY(null, null, ID, day);
      return End_QueryCapLogImageHGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapLogImageHGY(AsyncCallback callback, object state, string ID, string day)
    #else
    public void send_QueryCapLogImageHGY(string ID, string day)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapLogImageHGY", TMessageType.Call, seqid_));
      QueryCapLogImageHGY_args args = new QueryCapLogImageHGY_args();
      args.ID = ID;
      args.Day = day;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<byte[]> recv_QueryCapLogImageHGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapLogImageHGY_result result = new QueryCapLogImageHGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapLogImageHGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapLogWithImgGY(AsyncCallback callback, object state, string channel, string channel_div, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      return send_QueryCapLogWithImgGY(callback, state, channel, channel_div, btime, etime, nPageFirstNum, nPageNum);
    }

    public List<CapFaceLogWithImgGY> End_QueryCapLogWithImgGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapLogWithImgGY();
    }

    #endif

    public List<CapFaceLogWithImgGY> QueryCapLogWithImgGY(string channel, string channel_div, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryCapLogWithImgGY(channel, channel_div, btime, etime, nPageFirstNum, nPageNum);
      return recv_QueryCapLogWithImgGY();

      #else
      var asyncResult = Begin_QueryCapLogWithImgGY(null, null, channel, channel_div, btime, etime, nPageFirstNum, nPageNum);
      return End_QueryCapLogWithImgGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapLogWithImgGY(AsyncCallback callback, object state, string channel, string channel_div, long btime, long etime, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryCapLogWithImgGY(string channel, string channel_div, long btime, long etime, int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapLogWithImgGY", TMessageType.Call, seqid_));
      QueryCapLogWithImgGY_args args = new QueryCapLogWithImgGY_args();
      args.Channel = channel;
      args.Channel_div = channel_div;
      args.Btime = btime;
      args.Etime = etime;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CapFaceLogWithImgGY> recv_QueryCapLogWithImgGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapLogWithImgGY_result result = new QueryCapLogWithImgGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapLogWithImgGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogGY(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string channel_div, int nPageFirstNum, int nPageNum)
    {
      return send_QueryCmpLogGY(callback, state, channel, name, type, gender, bage, eage, btime, etime, channel_div, nPageFirstNum, nPageNum);
    }

    public List<CmpFaceLogGY> End_QueryCmpLogGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogGY();
    }

    #endif

    public List<CmpFaceLogGY> QueryCmpLogGY(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string channel_div, int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogGY(channel, name, type, gender, bage, eage, btime, etime, channel_div, nPageFirstNum, nPageNum);
      return recv_QueryCmpLogGY();

      #else
      var asyncResult = Begin_QueryCmpLogGY(null, null, channel, name, type, gender, bage, eage, btime, etime, channel_div, nPageFirstNum, nPageNum);
      return End_QueryCmpLogGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogGY(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string channel_div, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryCmpLogGY(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string channel_div, int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogGY", TMessageType.Call, seqid_));
      QueryCmpLogGY_args args = new QueryCmpLogGY_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.Channel_div = channel_div;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLogGY> recv_QueryCmpLogGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogGY_result result = new QueryCmpLogGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpRecordTotalCountHGY(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string channel_div)
    {
      return send_QueryCmpRecordTotalCountHGY(callback, state, channel, name, type, gender, bage, eage, btime, etime, channel_div);
    }

    public List<SCountInfo> End_QueryCmpRecordTotalCountHGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpRecordTotalCountHGY();
    }

    #endif

    public List<SCountInfo> QueryCmpRecordTotalCountHGY(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string channel_div)
    {
      #if !SILVERLIGHT
      send_QueryCmpRecordTotalCountHGY(channel, name, type, gender, bage, eage, btime, etime, channel_div);
      return recv_QueryCmpRecordTotalCountHGY();

      #else
      var asyncResult = Begin_QueryCmpRecordTotalCountHGY(null, null, channel, name, type, gender, bage, eage, btime, etime, channel_div);
      return End_QueryCmpRecordTotalCountHGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpRecordTotalCountHGY(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string channel_div)
    #else
    public void send_QueryCmpRecordTotalCountHGY(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string channel_div)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpRecordTotalCountHGY", TMessageType.Call, seqid_));
      QueryCmpRecordTotalCountHGY_args args = new QueryCmpRecordTotalCountHGY_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.Channel_div = channel_div;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfo> recv_QueryCmpRecordTotalCountHGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpRecordTotalCountHGY_result result = new QueryCmpRecordTotalCountHGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpRecordTotalCountHGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogWidthImgGY(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string channel_div, int nPageFirstNum, int nPageNum)
    {
      return send_QueryCmpLogWidthImgGY(callback, state, channel, name, type, gender, bage, eage, btime, etime, channel_div, nPageFirstNum, nPageNum);
    }

    public List<CmpFaceLogWidthImgGY> End_QueryCmpLogWidthImgGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogWidthImgGY();
    }

    #endif

    public List<CmpFaceLogWidthImgGY> QueryCmpLogWidthImgGY(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string channel_div, int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogWidthImgGY(channel, name, type, gender, bage, eage, btime, etime, channel_div, nPageFirstNum, nPageNum);
      return recv_QueryCmpLogWidthImgGY();

      #else
      var asyncResult = Begin_QueryCmpLogWidthImgGY(null, null, channel, name, type, gender, bage, eage, btime, etime, channel_div, nPageFirstNum, nPageNum);
      return End_QueryCmpLogWidthImgGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogWidthImgGY(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string channel_div, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryCmpLogWidthImgGY(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, string channel_div, int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogWidthImgGY", TMessageType.Call, seqid_));
      QueryCmpLogWidthImgGY_args args = new QueryCmpLogWidthImgGY_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.Channel_div = channel_div;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLogWidthImgGY> recv_QueryCmpLogWidthImgGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogWidthImgGY_result result = new QueryCmpLogWidthImgGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogWidthImgGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogImageHGY(AsyncCallback callback, object state, string ID, string day)
    {
      return send_QueryCmpLogImageHGY(callback, state, ID, day);
    }

    public List<byte[]> End_QueryCmpLogImageHGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogImageHGY();
    }

    #endif

    public List<byte[]> QueryCmpLogImageHGY(string ID, string day)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogImageHGY(ID, day);
      return recv_QueryCmpLogImageHGY();

      #else
      var asyncResult = Begin_QueryCmpLogImageHGY(null, null, ID, day);
      return End_QueryCmpLogImageHGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogImageHGY(AsyncCallback callback, object state, string ID, string day)
    #else
    public void send_QueryCmpLogImageHGY(string ID, string day)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogImageHGY", TMessageType.Call, seqid_));
      QueryCmpLogImageHGY_args args = new QueryCmpLogImageHGY_args();
      args.ID = ID;
      args.Day = day;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<byte[]> recv_QueryCmpLogImageHGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogImageHGY_result result = new QueryCmpLogImageHGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogImageHGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpByCapIdWidthImgHGY(AsyncCallback callback, object state, string ID, string day)
    {
      return send_QueryCmpByCapIdWidthImgHGY(callback, state, ID, day);
    }

    public List<CmpFaceLogWidthImgGY> End_QueryCmpByCapIdWidthImgHGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpByCapIdWidthImgHGY();
    }

    #endif

    public List<CmpFaceLogWidthImgGY> QueryCmpByCapIdWidthImgHGY(string ID, string day)
    {
      #if !SILVERLIGHT
      send_QueryCmpByCapIdWidthImgHGY(ID, day);
      return recv_QueryCmpByCapIdWidthImgHGY();

      #else
      var asyncResult = Begin_QueryCmpByCapIdWidthImgHGY(null, null, ID, day);
      return End_QueryCmpByCapIdWidthImgHGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpByCapIdWidthImgHGY(AsyncCallback callback, object state, string ID, string day)
    #else
    public void send_QueryCmpByCapIdWidthImgHGY(string ID, string day)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpByCapIdWidthImgHGY", TMessageType.Call, seqid_));
      QueryCmpByCapIdWidthImgHGY_args args = new QueryCmpByCapIdWidthImgHGY_args();
      args.ID = ID;
      args.Day = day;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLogWidthImgGY> recv_QueryCmpByCapIdWidthImgHGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpByCapIdWidthImgHGY_result result = new QueryCmpByCapIdWidthImgHGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpByCapIdWidthImgHGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogByObjIdGY(AsyncCallback callback, object state, string objid, long btime, long etime)
    {
      return send_QueryCmpLogByObjIdGY(callback, state, objid, btime, etime);
    }

    public List<CmpFaceLogGY> End_QueryCmpLogByObjIdGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogByObjIdGY();
    }

    #endif

    public List<CmpFaceLogGY> QueryCmpLogByObjIdGY(string objid, long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogByObjIdGY(objid, btime, etime);
      return recv_QueryCmpLogByObjIdGY();

      #else
      var asyncResult = Begin_QueryCmpLogByObjIdGY(null, null, objid, btime, etime);
      return End_QueryCmpLogByObjIdGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogByObjIdGY(AsyncCallback callback, object state, string objid, long btime, long etime)
    #else
    public void send_QueryCmpLogByObjIdGY(string objid, long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogByObjIdGY", TMessageType.Call, seqid_));
      QueryCmpLogByObjIdGY_args args = new QueryCmpLogByObjIdGY_args();
      args.Objid = objid;
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLogGY> recv_QueryCmpLogByObjIdGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogByObjIdGY_result result = new QueryCmpLogByObjIdGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogByObjIdGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogCountByObjIdGY(AsyncCallback callback, object state, string objid, long btime, long etime)
    {
      return send_QueryCmpLogCountByObjIdGY(callback, state, objid, btime, etime);
    }

    public List<SCountInfo> End_QueryCmpLogCountByObjIdGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogCountByObjIdGY();
    }

    #endif

    public List<SCountInfo> QueryCmpLogCountByObjIdGY(string objid, long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogCountByObjIdGY(objid, btime, etime);
      return recv_QueryCmpLogCountByObjIdGY();

      #else
      var asyncResult = Begin_QueryCmpLogCountByObjIdGY(null, null, objid, btime, etime);
      return End_QueryCmpLogCountByObjIdGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogCountByObjIdGY(AsyncCallback callback, object state, string objid, long btime, long etime)
    #else
    public void send_QueryCmpLogCountByObjIdGY(string objid, long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogCountByObjIdGY", TMessageType.Call, seqid_));
      QueryCmpLogCountByObjIdGY_args args = new QueryCmpLogCountByObjIdGY_args();
      args.Objid = objid;
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfo> recv_QueryCmpLogCountByObjIdGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogCountByObjIdGY_result result = new QueryCmpLogCountByObjIdGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogCountByObjIdGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryAllStatGY(AsyncCallback callback, object state)
    {
      return send_QueryAllStatGY(callback, state);
    }

    public List<AllAreaStatInfo> End_QueryAllStatGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryAllStatGY();
    }

    #endif

    public List<AllAreaStatInfo> QueryAllStatGY()
    {
      #if !SILVERLIGHT
      send_QueryAllStatGY();
      return recv_QueryAllStatGY();

      #else
      var asyncResult = Begin_QueryAllStatGY(null, null);
      return End_QueryAllStatGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryAllStatGY(AsyncCallback callback, object state)
    #else
    public void send_QueryAllStatGY()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryAllStatGY", TMessageType.Call, seqid_));
      QueryAllStatGY_args args = new QueryAllStatGY_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<AllAreaStatInfo> recv_QueryAllStatGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryAllStatGY_result result = new QueryAllStatGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryAllStatGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryStatByAreaOneDayGY(AsyncCallback callback, object state, string channel_div, long btime, long etime)
    {
      return send_QueryStatByAreaOneDayGY(callback, state, channel_div, btime, etime);
    }

    public List<SCountInfoOneDay> End_QueryStatByAreaOneDayGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryStatByAreaOneDayGY();
    }

    #endif

    public List<SCountInfoOneDay> QueryStatByAreaOneDayGY(string channel_div, long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryStatByAreaOneDayGY(channel_div, btime, etime);
      return recv_QueryStatByAreaOneDayGY();

      #else
      var asyncResult = Begin_QueryStatByAreaOneDayGY(null, null, channel_div, btime, etime);
      return End_QueryStatByAreaOneDayGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryStatByAreaOneDayGY(AsyncCallback callback, object state, string channel_div, long btime, long etime)
    #else
    public void send_QueryStatByAreaOneDayGY(string channel_div, long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryStatByAreaOneDayGY", TMessageType.Call, seqid_));
      QueryStatByAreaOneDayGY_args args = new QueryStatByAreaOneDayGY_args();
      args.Channel_div = channel_div;
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfoOneDay> recv_QueryStatByAreaOneDayGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryStatByAreaOneDayGY_result result = new QueryStatByAreaOneDayGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryStatByAreaOneDayGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryStatByAreaOneHourGY(AsyncCallback callback, object state, string channel_div, string daystr, long btime, long etime)
    {
      return send_QueryStatByAreaOneHourGY(callback, state, channel_div, daystr, btime, etime);
    }

    public List<SCountInfoOneDay> End_QueryStatByAreaOneHourGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryStatByAreaOneHourGY();
    }

    #endif

    public List<SCountInfoOneDay> QueryStatByAreaOneHourGY(string channel_div, string daystr, long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryStatByAreaOneHourGY(channel_div, daystr, btime, etime);
      return recv_QueryStatByAreaOneHourGY();

      #else
      var asyncResult = Begin_QueryStatByAreaOneHourGY(null, null, channel_div, daystr, btime, etime);
      return End_QueryStatByAreaOneHourGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryStatByAreaOneHourGY(AsyncCallback callback, object state, string channel_div, string daystr, long btime, long etime)
    #else
    public void send_QueryStatByAreaOneHourGY(string channel_div, string daystr, long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryStatByAreaOneHourGY", TMessageType.Call, seqid_));
      QueryStatByAreaOneHourGY_args args = new QueryStatByAreaOneHourGY_args();
      args.Channel_div = channel_div;
      args.Daystr = daystr;
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfoOneDay> recv_QueryStatByAreaOneHourGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryStatByAreaOneHourGY_result result = new QueryStatByAreaOneHourGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryStatByAreaOneHourGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryVisitorStatGY(AsyncCallback callback, object state, string uid, string day)
    {
      return send_QueryVisitorStatGY(callback, state, uid, day);
    }

    public List<SCountInfoArea> End_QueryVisitorStatGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryVisitorStatGY();
    }

    #endif

    public List<SCountInfoArea> QueryVisitorStatGY(string uid, string day)
    {
      #if !SILVERLIGHT
      send_QueryVisitorStatGY(uid, day);
      return recv_QueryVisitorStatGY();

      #else
      var asyncResult = Begin_QueryVisitorStatGY(null, null, uid, day);
      return End_QueryVisitorStatGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryVisitorStatGY(AsyncCallback callback, object state, string uid, string day)
    #else
    public void send_QueryVisitorStatGY(string uid, string day)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryVisitorStatGY", TMessageType.Call, seqid_));
      QueryVisitorStatGY_args args = new QueryVisitorStatGY_args();
      args.Uid = uid;
      args.Day = day;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfoArea> recv_QueryVisitorStatGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryVisitorStatGY_result result = new QueryVisitorStatGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryVisitorStatGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryVisitorOrbitGY(AsyncCallback callback, object state, string uid, string day)
    {
      return send_QueryVisitorOrbitGY(callback, state, uid, day);
    }

    public List<SVisitorOrbit> End_QueryVisitorOrbitGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryVisitorOrbitGY();
    }

    #endif

    public List<SVisitorOrbit> QueryVisitorOrbitGY(string uid, string day)
    {
      #if !SILVERLIGHT
      send_QueryVisitorOrbitGY(uid, day);
      return recv_QueryVisitorOrbitGY();

      #else
      var asyncResult = Begin_QueryVisitorOrbitGY(null, null, uid, day);
      return End_QueryVisitorOrbitGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryVisitorOrbitGY(AsyncCallback callback, object state, string uid, string day)
    #else
    public void send_QueryVisitorOrbitGY(string uid, string day)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryVisitorOrbitGY", TMessageType.Call, seqid_));
      QueryVisitorOrbitGY_args args = new QueryVisitorOrbitGY_args();
      args.Uid = uid;
      args.Day = day;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SVisitorOrbit> recv_QueryVisitorOrbitGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryVisitorOrbitGY_result result = new QueryVisitorOrbitGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryVisitorOrbitGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryPieChartGY(AsyncCallback callback, object state, string uid, string day, long etime)
    {
      return send_QueryPieChartGY(callback, state, uid, day, etime);
    }

    public List<PieChartStat> End_QueryPieChartGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryPieChartGY();
    }

    #endif

    public List<PieChartStat> QueryPieChartGY(string uid, string day, long etime)
    {
      #if !SILVERLIGHT
      send_QueryPieChartGY(uid, day, etime);
      return recv_QueryPieChartGY();

      #else
      var asyncResult = Begin_QueryPieChartGY(null, null, uid, day, etime);
      return End_QueryPieChartGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryPieChartGY(AsyncCallback callback, object state, string uid, string day, long etime)
    #else
    public void send_QueryPieChartGY(string uid, string day, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryPieChartGY", TMessageType.Call, seqid_));
      QueryPieChartGY_args args = new QueryPieChartGY_args();
      args.Uid = uid;
      args.Day = day;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<PieChartStat> recv_QueryPieChartGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryPieChartGY_result result = new QueryPieChartGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryPieChartGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_UpLoadCapFaceSyncGY(AsyncCallback callback, object state, string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis)
    {
      return send_UpLoadCapFaceSyncGY(callback, state, ChannelID, index, timeIn, timeOut, age, gender, fis);
    }

    public List<CmpInfo2CapGY> End_UpLoadCapFaceSyncGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UpLoadCapFaceSyncGY();
    }

    #endif

    public List<CmpInfo2CapGY> UpLoadCapFaceSyncGY(string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis)
    {
      #if !SILVERLIGHT
      send_UpLoadCapFaceSyncGY(ChannelID, index, timeIn, timeOut, age, gender, fis);
      return recv_UpLoadCapFaceSyncGY();

      #else
      var asyncResult = Begin_UpLoadCapFaceSyncGY(null, null, ChannelID, index, timeIn, timeOut, age, gender, fis);
      return End_UpLoadCapFaceSyncGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UpLoadCapFaceSyncGY(AsyncCallback callback, object state, string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis)
    #else
    public void send_UpLoadCapFaceSyncGY(string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("UpLoadCapFaceSyncGY", TMessageType.Call, seqid_));
      UpLoadCapFaceSyncGY_args args = new UpLoadCapFaceSyncGY_args();
      args.ChannelID = ChannelID;
      args.Index = index;
      args.TimeIn = timeIn;
      args.TimeOut = timeOut;
      args.Age = age;
      args.Gender = gender;
      args.Fis = fis;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpInfo2CapGY> recv_UpLoadCapFaceSyncGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UpLoadCapFaceSyncGY_result result = new UpLoadCapFaceSyncGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpLoadCapFaceSyncGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_UpLoadCapFaceASyncGY(AsyncCallback callback, object state, string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis)
    {
      return send_UpLoadCapFaceASyncGY(callback, state, ChannelID, index, timeIn, timeOut, age, gender, fis);
    }

    public int End_UpLoadCapFaceASyncGY(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UpLoadCapFaceASyncGY();
    }

    #endif

    public int UpLoadCapFaceASyncGY(string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis)
    {
      #if !SILVERLIGHT
      send_UpLoadCapFaceASyncGY(ChannelID, index, timeIn, timeOut, age, gender, fis);
      return recv_UpLoadCapFaceASyncGY();

      #else
      var asyncResult = Begin_UpLoadCapFaceASyncGY(null, null, ChannelID, index, timeIn, timeOut, age, gender, fis);
      return End_UpLoadCapFaceASyncGY(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UpLoadCapFaceASyncGY(AsyncCallback callback, object state, string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis)
    #else
    public void send_UpLoadCapFaceASyncGY(string ChannelID, int index, long timeIn, long timeOut, int age, int gender, List<FaceInfo> fis)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("UpLoadCapFaceASyncGY", TMessageType.Call, seqid_));
      UpLoadCapFaceASyncGY_args args = new UpLoadCapFaceASyncGY_args();
      args.ChannelID = ChannelID;
      args.Index = index;
      args.TimeIn = timeIn;
      args.TimeOut = timeOut;
      args.Age = age;
      args.Gender = gender;
      args.Fis = fis;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_UpLoadCapFaceASyncGY()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UpLoadCapFaceASyncGY_result result = new UpLoadCapFaceASyncGY_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpLoadCapFaceASyncGY failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogSX(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag)
    {
      return send_QueryCmpLogSX(callback, state, channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum, pflag);
    }

    public List<CmpFaceLog> End_QueryCmpLogSX(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogSX();
    }

    #endif

    /// <summary>
    /// ****贵阳记录筛选 20161220 begin****
    /// </summary>
    /// <param name="channel"></param>
    /// <param name="name"></param>
    /// <param name="type"></param>
    /// <param name="gender"></param>
    /// <param name="bage"></param>
    /// <param name="eage"></param>
    /// <param name="btime"></param>
    /// <param name="etime"></param>
    /// <param name="nPageFirstNum"></param>
    /// <param name="nPageNum"></param>
    /// <param name="pflag"></param>
    public List<CmpFaceLog> QueryCmpLogSX(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogSX(channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum, pflag);
      return recv_QueryCmpLogSX();

      #else
      var asyncResult = Begin_QueryCmpLogSX(null, null, channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum, pflag);
      return End_QueryCmpLogSX(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogSX(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag)
    #else
    public void send_QueryCmpLogSX(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogSX", TMessageType.Call, seqid_));
      QueryCmpLogSX_args args = new QueryCmpLogSX_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Pflag = pflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLog> recv_QueryCmpLogSX()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogSX_result result = new QueryCmpLogSX_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogSX failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogByObjIdSX(AsyncCallback callback, object state, string objid, long btime, long etime, int pflag)
    {
      return send_QueryCmpLogByObjIdSX(callback, state, objid, btime, etime, pflag);
    }

    public List<CmpFaceLog> End_QueryCmpLogByObjIdSX(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogByObjIdSX();
    }

    #endif

    public List<CmpFaceLog> QueryCmpLogByObjIdSX(string objid, long btime, long etime, int pflag)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogByObjIdSX(objid, btime, etime, pflag);
      return recv_QueryCmpLogByObjIdSX();

      #else
      var asyncResult = Begin_QueryCmpLogByObjIdSX(null, null, objid, btime, etime, pflag);
      return End_QueryCmpLogByObjIdSX(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogByObjIdSX(AsyncCallback callback, object state, string objid, long btime, long etime, int pflag)
    #else
    public void send_QueryCmpLogByObjIdSX(string objid, long btime, long etime, int pflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogByObjIdSX", TMessageType.Call, seqid_));
      QueryCmpLogByObjIdSX_args args = new QueryCmpLogByObjIdSX_args();
      args.Objid = objid;
      args.Btime = btime;
      args.Etime = etime;
      args.Pflag = pflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLog> recv_QueryCmpLogByObjIdSX()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogByObjIdSX_result result = new QueryCmpLogByObjIdSX_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogByObjIdSX failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogCountByObjIdSX(AsyncCallback callback, object state, string objid, long btime, long etime, int pflag)
    {
      return send_QueryCmpLogCountByObjIdSX(callback, state, objid, btime, etime, pflag);
    }

    public List<SCountInfo> End_QueryCmpLogCountByObjIdSX(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogCountByObjIdSX();
    }

    #endif

    public List<SCountInfo> QueryCmpLogCountByObjIdSX(string objid, long btime, long etime, int pflag)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogCountByObjIdSX(objid, btime, etime, pflag);
      return recv_QueryCmpLogCountByObjIdSX();

      #else
      var asyncResult = Begin_QueryCmpLogCountByObjIdSX(null, null, objid, btime, etime, pflag);
      return End_QueryCmpLogCountByObjIdSX(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogCountByObjIdSX(AsyncCallback callback, object state, string objid, long btime, long etime, int pflag)
    #else
    public void send_QueryCmpLogCountByObjIdSX(string objid, long btime, long etime, int pflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogCountByObjIdSX", TMessageType.Call, seqid_));
      QueryCmpLogCountByObjIdSX_args args = new QueryCmpLogCountByObjIdSX_args();
      args.Objid = objid;
      args.Btime = btime;
      args.Etime = etime;
      args.Pflag = pflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfo> recv_QueryCmpLogCountByObjIdSX()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogCountByObjIdSX_result result = new QueryCmpLogCountByObjIdSX_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogCountByObjIdSX failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogImageHSX(AsyncCallback callback, object state, string ID, string day, int pflag)
    {
      return send_QueryCmpLogImageHSX(callback, state, ID, day, pflag);
    }

    public List<byte[]> End_QueryCmpLogImageHSX(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogImageHSX();
    }

    #endif

    public List<byte[]> QueryCmpLogImageHSX(string ID, string day, int pflag)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogImageHSX(ID, day, pflag);
      return recv_QueryCmpLogImageHSX();

      #else
      var asyncResult = Begin_QueryCmpLogImageHSX(null, null, ID, day, pflag);
      return End_QueryCmpLogImageHSX(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogImageHSX(AsyncCallback callback, object state, string ID, string day, int pflag)
    #else
    public void send_QueryCmpLogImageHSX(string ID, string day, int pflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogImageHSX", TMessageType.Call, seqid_));
      QueryCmpLogImageHSX_args args = new QueryCmpLogImageHSX_args();
      args.ID = ID;
      args.Day = day;
      args.Pflag = pflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<byte[]> recv_QueryCmpLogImageHSX()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogImageHSX_result result = new QueryCmpLogImageHSX_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogImageHSX failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogWidthImgSX(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag)
    {
      return send_QueryCmpLogWidthImgSX(callback, state, channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum, pflag);
    }

    public List<CmpFaceLogWidthImg> End_QueryCmpLogWidthImgSX(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogWidthImgSX();
    }

    #endif

    public List<CmpFaceLogWidthImg> QueryCmpLogWidthImgSX(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogWidthImgSX(channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum, pflag);
      return recv_QueryCmpLogWidthImgSX();

      #else
      var asyncResult = Begin_QueryCmpLogWidthImgSX(null, null, channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum, pflag);
      return End_QueryCmpLogWidthImgSX(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogWidthImgSX(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag)
    #else
    public void send_QueryCmpLogWidthImgSX(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogWidthImgSX", TMessageType.Call, seqid_));
      QueryCmpLogWidthImgSX_args args = new QueryCmpLogWidthImgSX_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Pflag = pflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLogWidthImg> recv_QueryCmpLogWidthImgSX()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogWidthImgSX_result result = new QueryCmpLogWidthImgSX_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogWidthImgSX failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpByCapIdWidthImgHSX(AsyncCallback callback, object state, string ID, string day, int pflag)
    {
      return send_QueryCmpByCapIdWidthImgHSX(callback, state, ID, day, pflag);
    }

    public List<CmpFaceLogWidthImg> End_QueryCmpByCapIdWidthImgHSX(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpByCapIdWidthImgHSX();
    }

    #endif

    public List<CmpFaceLogWidthImg> QueryCmpByCapIdWidthImgHSX(string ID, string day, int pflag)
    {
      #if !SILVERLIGHT
      send_QueryCmpByCapIdWidthImgHSX(ID, day, pflag);
      return recv_QueryCmpByCapIdWidthImgHSX();

      #else
      var asyncResult = Begin_QueryCmpByCapIdWidthImgHSX(null, null, ID, day, pflag);
      return End_QueryCmpByCapIdWidthImgHSX(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpByCapIdWidthImgHSX(AsyncCallback callback, object state, string ID, string day, int pflag)
    #else
    public void send_QueryCmpByCapIdWidthImgHSX(string ID, string day, int pflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpByCapIdWidthImgHSX", TMessageType.Call, seqid_));
      QueryCmpByCapIdWidthImgHSX_args args = new QueryCmpByCapIdWidthImgHSX_args();
      args.ID = ID;
      args.Day = day;
      args.Pflag = pflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLogWidthImg> recv_QueryCmpByCapIdWidthImgHSX()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpByCapIdWidthImgHSX_result result = new QueryCmpByCapIdWidthImgHSX_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpByCapIdWidthImgHSX failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpRecordTotalCountHSX(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int pflag)
    {
      return send_QueryCmpRecordTotalCountHSX(callback, state, channel, name, type, gender, bage, eage, btime, etime, pflag);
    }

    public List<SCountInfo> End_QueryCmpRecordTotalCountHSX(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpRecordTotalCountHSX();
    }

    #endif

    public List<SCountInfo> QueryCmpRecordTotalCountHSX(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int pflag)
    {
      #if !SILVERLIGHT
      send_QueryCmpRecordTotalCountHSX(channel, name, type, gender, bage, eage, btime, etime, pflag);
      return recv_QueryCmpRecordTotalCountHSX();

      #else
      var asyncResult = Begin_QueryCmpRecordTotalCountHSX(null, null, channel, name, type, gender, bage, eage, btime, etime, pflag);
      return End_QueryCmpRecordTotalCountHSX(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpRecordTotalCountHSX(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int pflag)
    #else
    public void send_QueryCmpRecordTotalCountHSX(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int pflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpRecordTotalCountHSX", TMessageType.Call, seqid_));
      QueryCmpRecordTotalCountHSX_args args = new QueryCmpRecordTotalCountHSX_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.Pflag = pflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfo> recv_QueryCmpRecordTotalCountHSX()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpRecordTotalCountHSX_result result = new QueryCmpRecordTotalCountHSX_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpRecordTotalCountHSX failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_UpdateCmpLog(AsyncCallback callback, object state, string ID, string uuid, string day, int pflag)
    {
      return send_UpdateCmpLog(callback, state, ID, uuid, day, pflag);
    }

    public int End_UpdateCmpLog(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UpdateCmpLog();
    }

    #endif

    public int UpdateCmpLog(string ID, string uuid, string day, int pflag)
    {
      #if !SILVERLIGHT
      send_UpdateCmpLog(ID, uuid, day, pflag);
      return recv_UpdateCmpLog();

      #else
      var asyncResult = Begin_UpdateCmpLog(null, null, ID, uuid, day, pflag);
      return End_UpdateCmpLog(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UpdateCmpLog(AsyncCallback callback, object state, string ID, string uuid, string day, int pflag)
    #else
    public void send_UpdateCmpLog(string ID, string uuid, string day, int pflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("UpdateCmpLog", TMessageType.Call, seqid_));
      UpdateCmpLog_args args = new UpdateCmpLog_args();
      args.ID = ID;
      args.Uuid = uuid;
      args.Day = day;
      args.Pflag = pflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_UpdateCmpLog()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UpdateCmpLog_result result = new UpdateCmpLog_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateCmpLog failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryThreshold(AsyncCallback callback, object state)
    {
      return send_QueryThreshold(callback, state);
    }

    public int End_QueryThreshold(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryThreshold();
    }

    #endif

    public int QueryThreshold()
    {
      #if !SILVERLIGHT
      send_QueryThreshold();
      return recv_QueryThreshold();

      #else
      var asyncResult = Begin_QueryThreshold(null, null);
      return End_QueryThreshold(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryThreshold(AsyncCallback callback, object state)
    #else
    public void send_QueryThreshold()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryThreshold", TMessageType.Call, seqid_));
      QueryThreshold_args args = new QueryThreshold_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_QueryThreshold()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryThreshold_result result = new QueryThreshold_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryThreshold failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapLogSX(AsyncCallback callback, object state, string channel, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag)
    {
      return send_QueryCapLogSX(callback, state, channel, btime, etime, nPageFirstNum, nPageNum, pflag);
    }

    public List<CapFaceLog> End_QueryCapLogSX(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapLogSX();
    }

    #endif

    public List<CapFaceLog> QueryCapLogSX(string channel, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag)
    {
      #if !SILVERLIGHT
      send_QueryCapLogSX(channel, btime, etime, nPageFirstNum, nPageNum, pflag);
      return recv_QueryCapLogSX();

      #else
      var asyncResult = Begin_QueryCapLogSX(null, null, channel, btime, etime, nPageFirstNum, nPageNum, pflag);
      return End_QueryCapLogSX(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapLogSX(AsyncCallback callback, object state, string channel, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag)
    #else
    public void send_QueryCapLogSX(string channel, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapLogSX", TMessageType.Call, seqid_));
      QueryCapLogSX_args args = new QueryCapLogSX_args();
      args.Channel = channel;
      args.Btime = btime;
      args.Etime = etime;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Pflag = pflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CapFaceLog> recv_QueryCapLogSX()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapLogSX_result result = new QueryCapLogSX_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapLogSX failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapRecordTotalCountHSX(AsyncCallback callback, object state, string channel, long btime, long etime, int pflag)
    {
      return send_QueryCapRecordTotalCountHSX(callback, state, channel, btime, etime, pflag);
    }

    public List<SCountInfo> End_QueryCapRecordTotalCountHSX(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapRecordTotalCountHSX();
    }

    #endif

    public List<SCountInfo> QueryCapRecordTotalCountHSX(string channel, long btime, long etime, int pflag)
    {
      #if !SILVERLIGHT
      send_QueryCapRecordTotalCountHSX(channel, btime, etime, pflag);
      return recv_QueryCapRecordTotalCountHSX();

      #else
      var asyncResult = Begin_QueryCapRecordTotalCountHSX(null, null, channel, btime, etime, pflag);
      return End_QueryCapRecordTotalCountHSX(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapRecordTotalCountHSX(AsyncCallback callback, object state, string channel, long btime, long etime, int pflag)
    #else
    public void send_QueryCapRecordTotalCountHSX(string channel, long btime, long etime, int pflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapRecordTotalCountHSX", TMessageType.Call, seqid_));
      QueryCapRecordTotalCountHSX_args args = new QueryCapRecordTotalCountHSX_args();
      args.Channel = channel;
      args.Btime = btime;
      args.Etime = etime;
      args.Pflag = pflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfo> recv_QueryCapRecordTotalCountHSX()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapRecordTotalCountHSX_result result = new QueryCapRecordTotalCountHSX_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapRecordTotalCountHSX failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapDetailsHSX(AsyncCallback callback, object state, string id, string day, int pflag)
    {
      return send_QueryCapDetailsHSX(callback, state, id, day, pflag);
    }

    public List<CapObjImg> End_QueryCapDetailsHSX(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapDetailsHSX();
    }

    #endif

    public List<CapObjImg> QueryCapDetailsHSX(string id, string day, int pflag)
    {
      #if !SILVERLIGHT
      send_QueryCapDetailsHSX(id, day, pflag);
      return recv_QueryCapDetailsHSX();

      #else
      var asyncResult = Begin_QueryCapDetailsHSX(null, null, id, day, pflag);
      return End_QueryCapDetailsHSX(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapDetailsHSX(AsyncCallback callback, object state, string id, string day, int pflag)
    #else
    public void send_QueryCapDetailsHSX(string id, string day, int pflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapDetailsHSX", TMessageType.Call, seqid_));
      QueryCapDetailsHSX_args args = new QueryCapDetailsHSX_args();
      args.Id = id;
      args.Day = day;
      args.Pflag = pflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CapObjImg> recv_QueryCapDetailsHSX()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapDetailsHSX_result result = new QueryCapDetailsHSX_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapDetailsHSX failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapLogImageHSX(AsyncCallback callback, object state, string ID, string day, int pflag)
    {
      return send_QueryCapLogImageHSX(callback, state, ID, day, pflag);
    }

    public List<byte[]> End_QueryCapLogImageHSX(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapLogImageHSX();
    }

    #endif

    public List<byte[]> QueryCapLogImageHSX(string ID, string day, int pflag)
    {
      #if !SILVERLIGHT
      send_QueryCapLogImageHSX(ID, day, pflag);
      return recv_QueryCapLogImageHSX();

      #else
      var asyncResult = Begin_QueryCapLogImageHSX(null, null, ID, day, pflag);
      return End_QueryCapLogImageHSX(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapLogImageHSX(AsyncCallback callback, object state, string ID, string day, int pflag)
    #else
    public void send_QueryCapLogImageHSX(string ID, string day, int pflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapLogImageHSX", TMessageType.Call, seqid_));
      QueryCapLogImageHSX_args args = new QueryCapLogImageHSX_args();
      args.ID = ID;
      args.Day = day;
      args.Pflag = pflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<byte[]> recv_QueryCapLogImageHSX()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapLogImageHSX_result result = new QueryCapLogImageHSX_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapLogImageHSX failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapLogSXC(AsyncCallback callback, object state, List<string> channel, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      return send_QueryCapLogSXC(callback, state, channel, btime, etime, nPageFirstNum, nPageNum);
    }

    public List<CapFaceLog> End_QueryCapLogSXC(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapLogSXC();
    }

    #endif

    public List<CapFaceLog> QueryCapLogSXC(List<string> channel, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryCapLogSXC(channel, btime, etime, nPageFirstNum, nPageNum);
      return recv_QueryCapLogSXC();

      #else
      var asyncResult = Begin_QueryCapLogSXC(null, null, channel, btime, etime, nPageFirstNum, nPageNum);
      return End_QueryCapLogSXC(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapLogSXC(AsyncCallback callback, object state, List<string> channel, long btime, long etime, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryCapLogSXC(List<string> channel, long btime, long etime, int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapLogSXC", TMessageType.Call, seqid_));
      QueryCapLogSXC_args args = new QueryCapLogSXC_args();
      args.Channel = channel;
      args.Btime = btime;
      args.Etime = etime;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CapFaceLog> recv_QueryCapLogSXC()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapLogSXC_result result = new QueryCapLogSXC_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapLogSXC failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapRecordTotalCountHSXC(AsyncCallback callback, object state, List<string> channel, long btime, long etime)
    {
      return send_QueryCapRecordTotalCountHSXC(callback, state, channel, btime, etime);
    }

    public List<SCountInfo> End_QueryCapRecordTotalCountHSXC(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapRecordTotalCountHSXC();
    }

    #endif

    public List<SCountInfo> QueryCapRecordTotalCountHSXC(List<string> channel, long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryCapRecordTotalCountHSXC(channel, btime, etime);
      return recv_QueryCapRecordTotalCountHSXC();

      #else
      var asyncResult = Begin_QueryCapRecordTotalCountHSXC(null, null, channel, btime, etime);
      return End_QueryCapRecordTotalCountHSXC(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapRecordTotalCountHSXC(AsyncCallback callback, object state, List<string> channel, long btime, long etime)
    #else
    public void send_QueryCapRecordTotalCountHSXC(List<string> channel, long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapRecordTotalCountHSXC", TMessageType.Call, seqid_));
      QueryCapRecordTotalCountHSXC_args args = new QueryCapRecordTotalCountHSXC_args();
      args.Channel = channel;
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfo> recv_QueryCapRecordTotalCountHSXC()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapRecordTotalCountHSXC_result result = new QueryCapRecordTotalCountHSXC_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapRecordTotalCountHSXC failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_TerminalPhoneRegion(AsyncCallback callback, object state, TerminalPhone cfg)
    {
      return send_TerminalPhoneRegion(callback, state, cfg);
    }

    public int End_TerminalPhoneRegion(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_TerminalPhoneRegion();
    }

    #endif

    /// <summary>
    /// ****贵阳记录筛选 20161220 end****
    /// </summary>
    /// <param name="cfg"></param>
    public int TerminalPhoneRegion(TerminalPhone cfg)
    {
      #if !SILVERLIGHT
      send_TerminalPhoneRegion(cfg);
      return recv_TerminalPhoneRegion();

      #else
      var asyncResult = Begin_TerminalPhoneRegion(null, null, cfg);
      return End_TerminalPhoneRegion(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_TerminalPhoneRegion(AsyncCallback callback, object state, TerminalPhone cfg)
    #else
    public void send_TerminalPhoneRegion(TerminalPhone cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("TerminalPhoneRegion", TMessageType.Call, seqid_));
      TerminalPhoneRegion_args args = new TerminalPhoneRegion_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_TerminalPhoneRegion()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      TerminalPhoneRegion_result result = new TerminalPhoneRegion_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TerminalPhoneRegion failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_GetServerTime(AsyncCallback callback, object state)
    {
      return send_GetServerTime(callback, state);
    }

    public TimeData End_GetServerTime(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_GetServerTime();
    }

    #endif

    public TimeData GetServerTime()
    {
      #if !SILVERLIGHT
      send_GetServerTime();
      return recv_GetServerTime();

      #else
      var asyncResult = Begin_GetServerTime(null, null);
      return End_GetServerTime(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_GetServerTime(AsyncCallback callback, object state)
    #else
    public void send_GetServerTime()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("GetServerTime", TMessageType.Call, seqid_));
      GetServerTime_args args = new GetServerTime_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TimeData recv_GetServerTime()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      GetServerTime_result result = new GetServerTime_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetServerTime failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_UploadCmpLogFromFrontPH(AsyncCallback callback, object state, CmpFaceLogInfoPH cfg)
    {
      return send_UploadCmpLogFromFrontPH(callback, state, cfg);
    }

    public ErrorInfo End_UploadCmpLogFromFrontPH(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UploadCmpLogFromFrontPH();
    }

    #endif

    public ErrorInfo UploadCmpLogFromFrontPH(CmpFaceLogInfoPH cfg)
    {
      #if !SILVERLIGHT
      send_UploadCmpLogFromFrontPH(cfg);
      return recv_UploadCmpLogFromFrontPH();

      #else
      var asyncResult = Begin_UploadCmpLogFromFrontPH(null, null, cfg);
      return End_UploadCmpLogFromFrontPH(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UploadCmpLogFromFrontPH(AsyncCallback callback, object state, CmpFaceLogInfoPH cfg)
    #else
    public void send_UploadCmpLogFromFrontPH(CmpFaceLogInfoPH cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("UploadCmpLogFromFrontPH", TMessageType.Call, seqid_));
      UploadCmpLogFromFrontPH_args args = new UploadCmpLogFromFrontPH_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ErrorInfo recv_UploadCmpLogFromFrontPH()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UploadCmpLogFromFrontPH_result result = new UploadCmpLogFromFrontPH_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UploadCmpLogFromFrontPH failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryListFaceObjPH(AsyncCallback callback, object state, int nPageFirstNum, int nPageNum)
    {
      return send_QueryListFaceObjPH(callback, state, nPageFirstNum, nPageNum);
    }

    public List<FaceObjTemplatePhone> End_QueryListFaceObjPH(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryListFaceObjPH();
    }

    #endif

    public List<FaceObjTemplatePhone> QueryListFaceObjPH(int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryListFaceObjPH(nPageFirstNum, nPageNum);
      return recv_QueryListFaceObjPH();

      #else
      var asyncResult = Begin_QueryListFaceObjPH(null, null, nPageFirstNum, nPageNum);
      return End_QueryListFaceObjPH(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryListFaceObjPH(AsyncCallback callback, object state, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryListFaceObjPH(int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryListFaceObjPH", TMessageType.Call, seqid_));
      QueryListFaceObjPH_args args = new QueryListFaceObjPH_args();
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<FaceObjTemplatePhone> recv_QueryListFaceObjPH()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryListFaceObjPH_result result = new QueryListFaceObjPH_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryListFaceObjPH failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpRecordTotalCountHDS(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime)
    {
      return send_QueryCmpRecordTotalCountHDS(callback, state, channel, name, type, gender, bage, eage, btime, etime);
    }

    public List<SCountInfo> End_QueryCmpRecordTotalCountHDS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpRecordTotalCountHDS();
    }

    #endif

    public List<SCountInfo> QueryCmpRecordTotalCountHDS(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryCmpRecordTotalCountHDS(channel, name, type, gender, bage, eage, btime, etime);
      return recv_QueryCmpRecordTotalCountHDS();

      #else
      var asyncResult = Begin_QueryCmpRecordTotalCountHDS(null, null, channel, name, type, gender, bage, eage, btime, etime);
      return End_QueryCmpRecordTotalCountHDS(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpRecordTotalCountHDS(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime)
    #else
    public void send_QueryCmpRecordTotalCountHDS(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpRecordTotalCountHDS", TMessageType.Call, seqid_));
      QueryCmpRecordTotalCountHDS_args args = new QueryCmpRecordTotalCountHDS_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfo> recv_QueryCmpRecordTotalCountHDS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpRecordTotalCountHDS_result result = new QueryCmpRecordTotalCountHDS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpRecordTotalCountHDS failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpRecordTotalCountHSXDS(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int pflag)
    {
      return send_QueryCmpRecordTotalCountHSXDS(callback, state, channel, name, type, gender, bage, eage, btime, etime, pflag);
    }

    public List<SCountInfo> End_QueryCmpRecordTotalCountHSXDS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpRecordTotalCountHSXDS();
    }

    #endif

    public List<SCountInfo> QueryCmpRecordTotalCountHSXDS(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int pflag)
    {
      #if !SILVERLIGHT
      send_QueryCmpRecordTotalCountHSXDS(channel, name, type, gender, bage, eage, btime, etime, pflag);
      return recv_QueryCmpRecordTotalCountHSXDS();

      #else
      var asyncResult = Begin_QueryCmpRecordTotalCountHSXDS(null, null, channel, name, type, gender, bage, eage, btime, etime, pflag);
      return End_QueryCmpRecordTotalCountHSXDS(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpRecordTotalCountHSXDS(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int pflag)
    #else
    public void send_QueryCmpRecordTotalCountHSXDS(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int pflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpRecordTotalCountHSXDS", TMessageType.Call, seqid_));
      QueryCmpRecordTotalCountHSXDS_args args = new QueryCmpRecordTotalCountHSXDS_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.Pflag = pflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfo> recv_QueryCmpRecordTotalCountHSXDS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpRecordTotalCountHSXDS_result result = new QueryCmpRecordTotalCountHSXDS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpRecordTotalCountHSXDS failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogDS(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      return send_QueryCmpLogDS(callback, state, channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum);
    }

    public List<CmpFaceLogDS> End_QueryCmpLogDS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogDS();
    }

    #endif

    public List<CmpFaceLogDS> QueryCmpLogDS(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogDS(channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum);
      return recv_QueryCmpLogDS();

      #else
      var asyncResult = Begin_QueryCmpLogDS(null, null, channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum);
      return End_QueryCmpLogDS(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogDS(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryCmpLogDS(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogDS", TMessageType.Call, seqid_));
      QueryCmpLogDS_args args = new QueryCmpLogDS_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLogDS> recv_QueryCmpLogDS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogDS_result result = new QueryCmpLogDS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogDS failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogByObjIdDS(AsyncCallback callback, object state, string objid, long btime, long etime)
    {
      return send_QueryCmpLogByObjIdDS(callback, state, objid, btime, etime);
    }

    public List<CmpFaceLogDS> End_QueryCmpLogByObjIdDS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogByObjIdDS();
    }

    #endif

    public List<CmpFaceLogDS> QueryCmpLogByObjIdDS(string objid, long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogByObjIdDS(objid, btime, etime);
      return recv_QueryCmpLogByObjIdDS();

      #else
      var asyncResult = Begin_QueryCmpLogByObjIdDS(null, null, objid, btime, etime);
      return End_QueryCmpLogByObjIdDS(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogByObjIdDS(AsyncCallback callback, object state, string objid, long btime, long etime)
    #else
    public void send_QueryCmpLogByObjIdDS(string objid, long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogByObjIdDS", TMessageType.Call, seqid_));
      QueryCmpLogByObjIdDS_args args = new QueryCmpLogByObjIdDS_args();
      args.Objid = objid;
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLogDS> recv_QueryCmpLogByObjIdDS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogByObjIdDS_result result = new QueryCmpLogByObjIdDS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogByObjIdDS failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogCountByObjIdDS(AsyncCallback callback, object state, string objid, long btime, long etime)
    {
      return send_QueryCmpLogCountByObjIdDS(callback, state, objid, btime, etime);
    }

    public List<SCountInfo> End_QueryCmpLogCountByObjIdDS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogCountByObjIdDS();
    }

    #endif

    public List<SCountInfo> QueryCmpLogCountByObjIdDS(string objid, long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogCountByObjIdDS(objid, btime, etime);
      return recv_QueryCmpLogCountByObjIdDS();

      #else
      var asyncResult = Begin_QueryCmpLogCountByObjIdDS(null, null, objid, btime, etime);
      return End_QueryCmpLogCountByObjIdDS(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogCountByObjIdDS(AsyncCallback callback, object state, string objid, long btime, long etime)
    #else
    public void send_QueryCmpLogCountByObjIdDS(string objid, long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogCountByObjIdDS", TMessageType.Call, seqid_));
      QueryCmpLogCountByObjIdDS_args args = new QueryCmpLogCountByObjIdDS_args();
      args.Objid = objid;
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfo> recv_QueryCmpLogCountByObjIdDS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogCountByObjIdDS_result result = new QueryCmpLogCountByObjIdDS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogCountByObjIdDS failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogSXDS(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag)
    {
      return send_QueryCmpLogSXDS(callback, state, channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum, pflag);
    }

    public List<CmpFaceLogDS> End_QueryCmpLogSXDS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogSXDS();
    }

    #endif

    public List<CmpFaceLogDS> QueryCmpLogSXDS(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogSXDS(channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum, pflag);
      return recv_QueryCmpLogSXDS();

      #else
      var asyncResult = Begin_QueryCmpLogSXDS(null, null, channel, name, type, gender, bage, eage, btime, etime, nPageFirstNum, nPageNum, pflag);
      return End_QueryCmpLogSXDS(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogSXDS(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag)
    #else
    public void send_QueryCmpLogSXDS(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int nPageFirstNum, int nPageNum, int pflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogSXDS", TMessageType.Call, seqid_));
      QueryCmpLogSXDS_args args = new QueryCmpLogSXDS_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Pflag = pflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLogDS> recv_QueryCmpLogSXDS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogSXDS_result result = new QueryCmpLogSXDS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogSXDS failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogByObjIdSXDS(AsyncCallback callback, object state, string objid, long btime, long etime, int pflag)
    {
      return send_QueryCmpLogByObjIdSXDS(callback, state, objid, btime, etime, pflag);
    }

    public List<CmpFaceLogDS> End_QueryCmpLogByObjIdSXDS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogByObjIdSXDS();
    }

    #endif

    public List<CmpFaceLogDS> QueryCmpLogByObjIdSXDS(string objid, long btime, long etime, int pflag)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogByObjIdSXDS(objid, btime, etime, pflag);
      return recv_QueryCmpLogByObjIdSXDS();

      #else
      var asyncResult = Begin_QueryCmpLogByObjIdSXDS(null, null, objid, btime, etime, pflag);
      return End_QueryCmpLogByObjIdSXDS(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogByObjIdSXDS(AsyncCallback callback, object state, string objid, long btime, long etime, int pflag)
    #else
    public void send_QueryCmpLogByObjIdSXDS(string objid, long btime, long etime, int pflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogByObjIdSXDS", TMessageType.Call, seqid_));
      QueryCmpLogByObjIdSXDS_args args = new QueryCmpLogByObjIdSXDS_args();
      args.Objid = objid;
      args.Btime = btime;
      args.Etime = etime;
      args.Pflag = pflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLogDS> recv_QueryCmpLogByObjIdSXDS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogByObjIdSXDS_result result = new QueryCmpLogByObjIdSXDS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogByObjIdSXDS failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogCountByObjIdSXDS(AsyncCallback callback, object state, string objid, long btime, long etime, int pflag)
    {
      return send_QueryCmpLogCountByObjIdSXDS(callback, state, objid, btime, etime, pflag);
    }

    public List<SCountInfo> End_QueryCmpLogCountByObjIdSXDS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogCountByObjIdSXDS();
    }

    #endif

    public List<SCountInfo> QueryCmpLogCountByObjIdSXDS(string objid, long btime, long etime, int pflag)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogCountByObjIdSXDS(objid, btime, etime, pflag);
      return recv_QueryCmpLogCountByObjIdSXDS();

      #else
      var asyncResult = Begin_QueryCmpLogCountByObjIdSXDS(null, null, objid, btime, etime, pflag);
      return End_QueryCmpLogCountByObjIdSXDS(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogCountByObjIdSXDS(AsyncCallback callback, object state, string objid, long btime, long etime, int pflag)
    #else
    public void send_QueryCmpLogCountByObjIdSXDS(string objid, long btime, long etime, int pflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogCountByObjIdSXDS", TMessageType.Call, seqid_));
      QueryCmpLogCountByObjIdSXDS_args args = new QueryCmpLogCountByObjIdSXDS_args();
      args.Objid = objid;
      args.Btime = btime;
      args.Etime = etime;
      args.Pflag = pflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfo> recv_QueryCmpLogCountByObjIdSXDS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogCountByObjIdSXDS_result result = new QueryCmpLogCountByObjIdSXDS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogCountByObjIdSXDS failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_AddChannelLBS(AsyncCallback callback, object state, ChannelCfgLBS cfg)
    {
      return send_AddChannelLBS(callback, state, cfg);
    }

    public int End_AddChannelLBS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_AddChannelLBS();
    }

    #endif

    /// <summary>
    /// 西宁项目新增功能――函数 add 20170306 fuyunpeng*
    /// </summary>
    /// <param name="cfg"></param>
    public int AddChannelLBS(ChannelCfgLBS cfg)
    {
      #if !SILVERLIGHT
      send_AddChannelLBS(cfg);
      return recv_AddChannelLBS();

      #else
      var asyncResult = Begin_AddChannelLBS(null, null, cfg);
      return End_AddChannelLBS(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_AddChannelLBS(AsyncCallback callback, object state, ChannelCfgLBS cfg)
    #else
    public void send_AddChannelLBS(ChannelCfgLBS cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("AddChannelLBS", TMessageType.Call, seqid_));
      AddChannelLBS_args args = new AddChannelLBS_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_AddChannelLBS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      AddChannelLBS_result result = new AddChannelLBS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddChannelLBS failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_ModifyChannelLBS(AsyncCallback callback, object state, ChannelCfgLBS cfg)
    {
      return send_ModifyChannelLBS(callback, state, cfg);
    }

    public int End_ModifyChannelLBS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ModifyChannelLBS();
    }

    #endif

    public int ModifyChannelLBS(ChannelCfgLBS cfg)
    {
      #if !SILVERLIGHT
      send_ModifyChannelLBS(cfg);
      return recv_ModifyChannelLBS();

      #else
      var asyncResult = Begin_ModifyChannelLBS(null, null, cfg);
      return End_ModifyChannelLBS(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ModifyChannelLBS(AsyncCallback callback, object state, ChannelCfgLBS cfg)
    #else
    public void send_ModifyChannelLBS(ChannelCfgLBS cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ModifyChannelLBS", TMessageType.Call, seqid_));
      ModifyChannelLBS_args args = new ModifyChannelLBS_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_ModifyChannelLBS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ModifyChannelLBS_result result = new ModifyChannelLBS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ModifyChannelLBS failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryAllChannelLBS(AsyncCallback callback, object state)
    {
      return send_QueryAllChannelLBS(callback, state);
    }

    public List<ChannelCfgLBS> End_QueryAllChannelLBS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryAllChannelLBS();
    }

    #endif

    public List<ChannelCfgLBS> QueryAllChannelLBS()
    {
      #if !SILVERLIGHT
      send_QueryAllChannelLBS();
      return recv_QueryAllChannelLBS();

      #else
      var asyncResult = Begin_QueryAllChannelLBS(null, null);
      return End_QueryAllChannelLBS(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryAllChannelLBS(AsyncCallback callback, object state)
    #else
    public void send_QueryAllChannelLBS()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryAllChannelLBS", TMessageType.Call, seqid_));
      QueryAllChannelLBS_args args = new QueryAllChannelLBS_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<ChannelCfgLBS> recv_QueryAllChannelLBS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryAllChannelLBS_result result = new QueryAllChannelLBS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryAllChannelLBS failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryChannelLBS(AsyncCallback callback, object state, string channelID)
    {
      return send_QueryChannelLBS(callback, state, channelID);
    }

    public ChannelCfgLBS End_QueryChannelLBS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryChannelLBS();
    }

    #endif

    public ChannelCfgLBS QueryChannelLBS(string channelID)
    {
      #if !SILVERLIGHT
      send_QueryChannelLBS(channelID);
      return recv_QueryChannelLBS();

      #else
      var asyncResult = Begin_QueryChannelLBS(null, null, channelID);
      return End_QueryChannelLBS(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryChannelLBS(AsyncCallback callback, object state, string channelID)
    #else
    public void send_QueryChannelLBS(string channelID)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryChannelLBS", TMessageType.Call, seqid_));
      QueryChannelLBS_args args = new QueryChannelLBS_args();
      args.ChannelID = channelID;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ChannelCfgLBS recv_QueryChannelLBS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryChannelLBS_result result = new QueryChannelLBS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryChannelLBS failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryTargetedAnalysis(AsyncCallback callback, object state, string capid, byte[] capimg, int threshold, long btime, long etime)
    {
      return send_QueryTargetedAnalysis(callback, state, capid, capimg, threshold, btime, etime);
    }

    public List<TargetedAnalysis> End_QueryTargetedAnalysis(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryTargetedAnalysis();
    }

    #endif

    public List<TargetedAnalysis> QueryTargetedAnalysis(string capid, byte[] capimg, int threshold, long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryTargetedAnalysis(capid, capimg, threshold, btime, etime);
      return recv_QueryTargetedAnalysis();

      #else
      var asyncResult = Begin_QueryTargetedAnalysis(null, null, capid, capimg, threshold, btime, etime);
      return End_QueryTargetedAnalysis(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryTargetedAnalysis(AsyncCallback callback, object state, string capid, byte[] capimg, int threshold, long btime, long etime)
    #else
    public void send_QueryTargetedAnalysis(string capid, byte[] capimg, int threshold, long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryTargetedAnalysis", TMessageType.Call, seqid_));
      QueryTargetedAnalysis_args args = new QueryTargetedAnalysis_args();
      args.Capid = capid;
      args.Capimg = capimg;
      args.Threshold = threshold;
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TargetedAnalysis> recv_QueryTargetedAnalysis()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryTargetedAnalysis_result result = new QueryTargetedAnalysis_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryTargetedAnalysis failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryKeyAreaSuspectAnalysis(AsyncCallback callback, object state, long btime, long etime)
    {
      return send_QueryKeyAreaSuspectAnalysis(callback, state, btime, etime);
    }

    public SuspectAnalysisInfo End_QueryKeyAreaSuspectAnalysis(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryKeyAreaSuspectAnalysis();
    }

    #endif

    public SuspectAnalysisInfo QueryKeyAreaSuspectAnalysis(long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryKeyAreaSuspectAnalysis(btime, etime);
      return recv_QueryKeyAreaSuspectAnalysis();

      #else
      var asyncResult = Begin_QueryKeyAreaSuspectAnalysis(null, null, btime, etime);
      return End_QueryKeyAreaSuspectAnalysis(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryKeyAreaSuspectAnalysis(AsyncCallback callback, object state, long btime, long etime)
    #else
    public void send_QueryKeyAreaSuspectAnalysis(long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryKeyAreaSuspectAnalysis", TMessageType.Call, seqid_));
      QueryKeyAreaSuspectAnalysis_args args = new QueryKeyAreaSuspectAnalysis_args();
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public SuspectAnalysisInfo recv_QueryKeyAreaSuspectAnalysis()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryKeyAreaSuspectAnalysis_result result = new QueryKeyAreaSuspectAnalysis_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryKeyAreaSuspectAnalysis failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCrowdedAnalysis(AsyncCallback callback, object state, long btime, long etime)
    {
      return send_QueryCrowdedAnalysis(callback, state, btime, etime);
    }

    public List<TargetedAnalysis> End_QueryCrowdedAnalysis(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCrowdedAnalysis();
    }

    #endif

    public List<TargetedAnalysis> QueryCrowdedAnalysis(long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryCrowdedAnalysis(btime, etime);
      return recv_QueryCrowdedAnalysis();

      #else
      var asyncResult = Begin_QueryCrowdedAnalysis(null, null, btime, etime);
      return End_QueryCrowdedAnalysis(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCrowdedAnalysis(AsyncCallback callback, object state, long btime, long etime)
    #else
    public void send_QueryCrowdedAnalysis(long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCrowdedAnalysis", TMessageType.Call, seqid_));
      QueryCrowdedAnalysis_args args = new QueryCrowdedAnalysis_args();
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TargetedAnalysis> recv_QueryCrowdedAnalysis()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCrowdedAnalysis_result result = new QueryCrowdedAnalysis_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCrowdedAnalysis failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryTrackPlayback(AsyncCallback callback, object state, string capid, byte[] capimg, long btime, long etime)
    {
      return send_QueryTrackPlayback(callback, state, capid, capimg, btime, etime);
    }

    public List<TrackInfo> End_QueryTrackPlayback(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryTrackPlayback();
    }

    #endif

    public List<TrackInfo> QueryTrackPlayback(string capid, byte[] capimg, long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryTrackPlayback(capid, capimg, btime, etime);
      return recv_QueryTrackPlayback();

      #else
      var asyncResult = Begin_QueryTrackPlayback(null, null, capid, capimg, btime, etime);
      return End_QueryTrackPlayback(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryTrackPlayback(AsyncCallback callback, object state, string capid, byte[] capimg, long btime, long etime)
    #else
    public void send_QueryTrackPlayback(string capid, byte[] capimg, long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryTrackPlayback", TMessageType.Call, seqid_));
      QueryTrackPlayback_args args = new QueryTrackPlayback_args();
      args.Capid = capid;
      args.Capimg = capimg;
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TrackInfo> recv_QueryTrackPlayback()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryTrackPlayback_result result = new QueryTrackPlayback_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryTrackPlayback failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryStaticAnalysis(AsyncCallback callback, object state, string capid, byte[] capimg, long btime, long etime, int threshold, int maxcount)
    {
      return send_QueryStaticAnalysis(callback, state, capid, capimg, btime, etime, threshold, maxcount);
    }

    public List<RealtimeCapInfoLBS> End_QueryStaticAnalysis(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryStaticAnalysis();
    }

    #endif

    public List<RealtimeCapInfoLBS> QueryStaticAnalysis(string capid, byte[] capimg, long btime, long etime, int threshold, int maxcount)
    {
      #if !SILVERLIGHT
      send_QueryStaticAnalysis(capid, capimg, btime, etime, threshold, maxcount);
      return recv_QueryStaticAnalysis();

      #else
      var asyncResult = Begin_QueryStaticAnalysis(null, null, capid, capimg, btime, etime, threshold, maxcount);
      return End_QueryStaticAnalysis(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryStaticAnalysis(AsyncCallback callback, object state, string capid, byte[] capimg, long btime, long etime, int threshold, int maxcount)
    #else
    public void send_QueryStaticAnalysis(string capid, byte[] capimg, long btime, long etime, int threshold, int maxcount)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryStaticAnalysis", TMessageType.Call, seqid_));
      QueryStaticAnalysis_args args = new QueryStaticAnalysis_args();
      args.Capid = capid;
      args.Capimg = capimg;
      args.Btime = btime;
      args.Etime = etime;
      args.Threshold = threshold;
      args.Maxcount = maxcount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<RealtimeCapInfoLBS> recv_QueryStaticAnalysis()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryStaticAnalysis_result result = new QueryStaticAnalysis_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryStaticAnalysis failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapRecordTotalCountHLBS(AsyncCallback callback, object state, string channel, int channel_type, long btime, long etime)
    {
      return send_QueryCapRecordTotalCountHLBS(callback, state, channel, channel_type, btime, etime);
    }

    public List<SCountInfo> End_QueryCapRecordTotalCountHLBS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapRecordTotalCountHLBS();
    }

    #endif

    public List<SCountInfo> QueryCapRecordTotalCountHLBS(string channel, int channel_type, long btime, long etime)
    {
      #if !SILVERLIGHT
      send_QueryCapRecordTotalCountHLBS(channel, channel_type, btime, etime);
      return recv_QueryCapRecordTotalCountHLBS();

      #else
      var asyncResult = Begin_QueryCapRecordTotalCountHLBS(null, null, channel, channel_type, btime, etime);
      return End_QueryCapRecordTotalCountHLBS(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapRecordTotalCountHLBS(AsyncCallback callback, object state, string channel, int channel_type, long btime, long etime)
    #else
    public void send_QueryCapRecordTotalCountHLBS(string channel, int channel_type, long btime, long etime)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapRecordTotalCountHLBS", TMessageType.Call, seqid_));
      QueryCapRecordTotalCountHLBS_args args = new QueryCapRecordTotalCountHLBS_args();
      args.Channel = channel;
      args.Channel_type = channel_type;
      args.Btime = btime;
      args.Etime = etime;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfo> recv_QueryCapRecordTotalCountHLBS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapRecordTotalCountHLBS_result result = new QueryCapRecordTotalCountHLBS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapRecordTotalCountHLBS failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCapLogLBS(AsyncCallback callback, object state, string channel, int channel_type, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      return send_QueryCapLogLBS(callback, state, channel, channel_type, btime, etime, nPageFirstNum, nPageNum);
    }

    public List<CapFaceLogLBS> End_QueryCapLogLBS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCapLogLBS();
    }

    #endif

    public List<CapFaceLogLBS> QueryCapLogLBS(string channel, int channel_type, long btime, long etime, int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryCapLogLBS(channel, channel_type, btime, etime, nPageFirstNum, nPageNum);
      return recv_QueryCapLogLBS();

      #else
      var asyncResult = Begin_QueryCapLogLBS(null, null, channel, channel_type, btime, etime, nPageFirstNum, nPageNum);
      return End_QueryCapLogLBS(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCapLogLBS(AsyncCallback callback, object state, string channel, int channel_type, long btime, long etime, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryCapLogLBS(string channel, int channel_type, long btime, long etime, int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCapLogLBS", TMessageType.Call, seqid_));
      QueryCapLogLBS_args args = new QueryCapLogLBS_args();
      args.Channel = channel;
      args.Channel_type = channel_type;
      args.Btime = btime;
      args.Etime = etime;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CapFaceLogLBS> recv_QueryCapLogLBS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCapLogLBS_result result = new QueryCapLogLBS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCapLogLBS failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpRecordTotalCountHDSLBS(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type)
    {
      return send_QueryCmpRecordTotalCountHDSLBS(callback, state, channel, name, type, gender, bage, eage, btime, etime, channel_type);
    }

    public List<SCountInfo> End_QueryCmpRecordTotalCountHDSLBS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpRecordTotalCountHDSLBS();
    }

    #endif

    public List<SCountInfo> QueryCmpRecordTotalCountHDSLBS(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type)
    {
      #if !SILVERLIGHT
      send_QueryCmpRecordTotalCountHDSLBS(channel, name, type, gender, bage, eage, btime, etime, channel_type);
      return recv_QueryCmpRecordTotalCountHDSLBS();

      #else
      var asyncResult = Begin_QueryCmpRecordTotalCountHDSLBS(null, null, channel, name, type, gender, bage, eage, btime, etime, channel_type);
      return End_QueryCmpRecordTotalCountHDSLBS(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpRecordTotalCountHDSLBS(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type)
    #else
    public void send_QueryCmpRecordTotalCountHDSLBS(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpRecordTotalCountHDSLBS", TMessageType.Call, seqid_));
      QueryCmpRecordTotalCountHDSLBS_args args = new QueryCmpRecordTotalCountHDSLBS_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.Channel_type = channel_type;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfo> recv_QueryCmpRecordTotalCountHDSLBS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpRecordTotalCountHDSLBS_result result = new QueryCmpRecordTotalCountHDSLBS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpRecordTotalCountHDSLBS failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogDSLBS(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int nPageFirstNum, int nPageNum)
    {
      return send_QueryCmpLogDSLBS(callback, state, channel, name, type, gender, bage, eage, btime, etime, channel_type, nPageFirstNum, nPageNum);
    }

    public List<CmpFaceLogDSLBS> End_QueryCmpLogDSLBS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogDSLBS();
    }

    #endif

    public List<CmpFaceLogDSLBS> QueryCmpLogDSLBS(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogDSLBS(channel, name, type, gender, bage, eage, btime, etime, channel_type, nPageFirstNum, nPageNum);
      return recv_QueryCmpLogDSLBS();

      #else
      var asyncResult = Begin_QueryCmpLogDSLBS(null, null, channel, name, type, gender, bage, eage, btime, etime, channel_type, nPageFirstNum, nPageNum);
      return End_QueryCmpLogDSLBS(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogDSLBS(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryCmpLogDSLBS(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogDSLBS", TMessageType.Call, seqid_));
      QueryCmpLogDSLBS_args args = new QueryCmpLogDSLBS_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.Channel_type = channel_type;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLogDSLBS> recv_QueryCmpLogDSLBS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogDSLBS_result result = new QueryCmpLogDSLBS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogDSLBS failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpRecordTotalCountHDSLBSSX(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int pflag)
    {
      return send_QueryCmpRecordTotalCountHDSLBSSX(callback, state, channel, name, type, gender, bage, eage, btime, etime, channel_type, pflag);
    }

    public List<SCountInfo> End_QueryCmpRecordTotalCountHDSLBSSX(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpRecordTotalCountHDSLBSSX();
    }

    #endif

    public List<SCountInfo> QueryCmpRecordTotalCountHDSLBSSX(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int pflag)
    {
      #if !SILVERLIGHT
      send_QueryCmpRecordTotalCountHDSLBSSX(channel, name, type, gender, bage, eage, btime, etime, channel_type, pflag);
      return recv_QueryCmpRecordTotalCountHDSLBSSX();

      #else
      var asyncResult = Begin_QueryCmpRecordTotalCountHDSLBSSX(null, null, channel, name, type, gender, bage, eage, btime, etime, channel_type, pflag);
      return End_QueryCmpRecordTotalCountHDSLBSSX(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpRecordTotalCountHDSLBSSX(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int pflag)
    #else
    public void send_QueryCmpRecordTotalCountHDSLBSSX(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int pflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpRecordTotalCountHDSLBSSX", TMessageType.Call, seqid_));
      QueryCmpRecordTotalCountHDSLBSSX_args args = new QueryCmpRecordTotalCountHDSLBSSX_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.Channel_type = channel_type;
      args.Pflag = pflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfo> recv_QueryCmpRecordTotalCountHDSLBSSX()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpRecordTotalCountHDSLBSSX_result result = new QueryCmpRecordTotalCountHDSLBSSX_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpRecordTotalCountHDSLBSSX failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogDSLBSSX(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int pflag, int nPageFirstNum, int nPageNum)
    {
      return send_QueryCmpLogDSLBSSX(callback, state, channel, name, type, gender, bage, eage, btime, etime, channel_type, pflag, nPageFirstNum, nPageNum);
    }

    public List<CmpFaceLogDSLBS> End_QueryCmpLogDSLBSSX(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogDSLBSSX();
    }

    #endif

    public List<CmpFaceLogDSLBS> QueryCmpLogDSLBSSX(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int pflag, int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogDSLBSSX(channel, name, type, gender, bage, eage, btime, etime, channel_type, pflag, nPageFirstNum, nPageNum);
      return recv_QueryCmpLogDSLBSSX();

      #else
      var asyncResult = Begin_QueryCmpLogDSLBSSX(null, null, channel, name, type, gender, bage, eage, btime, etime, channel_type, pflag, nPageFirstNum, nPageNum);
      return End_QueryCmpLogDSLBSSX(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogDSLBSSX(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int pflag, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryCmpLogDSLBSSX(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int pflag, int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogDSLBSSX", TMessageType.Call, seqid_));
      QueryCmpLogDSLBSSX_args args = new QueryCmpLogDSLBSSX_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.Channel_type = channel_type;
      args.Pflag = pflag;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLogDSLBS> recv_QueryCmpLogDSLBSSX()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogDSLBSSX_result result = new QueryCmpLogDSLBSSX_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogDSLBSSX failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryLastRecordInfo(AsyncCallback callback, object state)
    {
      return send_QueryLastRecordInfo(callback, state);
    }

    public LastRecordInfo End_QueryLastRecordInfo(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryLastRecordInfo();
    }

    #endif

    public LastRecordInfo QueryLastRecordInfo()
    {
      #if !SILVERLIGHT
      send_QueryLastRecordInfo();
      return recv_QueryLastRecordInfo();

      #else
      var asyncResult = Begin_QueryLastRecordInfo(null, null);
      return End_QueryLastRecordInfo(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryLastRecordInfo(AsyncCallback callback, object state)
    #else
    public void send_QueryLastRecordInfo()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryLastRecordInfo", TMessageType.Call, seqid_));
      QueryLastRecordInfo_args args = new QueryLastRecordInfo_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public LastRecordInfo recv_QueryLastRecordInfo()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryLastRecordInfo_result result = new QueryLastRecordInfo_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryLastRecordInfo failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryRealtimeCapInfoQ(AsyncCallback callback, object state, int time)
    {
      return send_QueryRealtimeCapInfoQ(callback, state, time);
    }

    public List<RealtimeCapInfoQ> End_QueryRealtimeCapInfoQ(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryRealtimeCapInfoQ();
    }

    #endif

    /// <summary>
    /// *add for query real time record***
    /// </summary>
    /// <param name="time"></param>
    public List<RealtimeCapInfoQ> QueryRealtimeCapInfoQ(int time)
    {
      #if !SILVERLIGHT
      send_QueryRealtimeCapInfoQ(time);
      return recv_QueryRealtimeCapInfoQ();

      #else
      var asyncResult = Begin_QueryRealtimeCapInfoQ(null, null, time);
      return End_QueryRealtimeCapInfoQ(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryRealtimeCapInfoQ(AsyncCallback callback, object state, int time)
    #else
    public void send_QueryRealtimeCapInfoQ(int time)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryRealtimeCapInfoQ", TMessageType.Call, seqid_));
      QueryRealtimeCapInfoQ_args args = new QueryRealtimeCapInfoQ_args();
      args.Time = time;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<RealtimeCapInfoQ> recv_QueryRealtimeCapInfoQ()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryRealtimeCapInfoQ_result result = new QueryRealtimeCapInfoQ_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryRealtimeCapInfoQ failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_UpdateRealtimeCmpQ(AsyncCallback callback, object state, List<string> capid, int qflag)
    {
      return send_UpdateRealtimeCmpQ(callback, state, capid, qflag);
    }

    public int End_UpdateRealtimeCmpQ(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UpdateRealtimeCmpQ();
    }

    #endif

    public int UpdateRealtimeCmpQ(List<string> capid, int qflag)
    {
      #if !SILVERLIGHT
      send_UpdateRealtimeCmpQ(capid, qflag);
      return recv_UpdateRealtimeCmpQ();

      #else
      var asyncResult = Begin_UpdateRealtimeCmpQ(null, null, capid, qflag);
      return End_UpdateRealtimeCmpQ(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UpdateRealtimeCmpQ(AsyncCallback callback, object state, List<string> capid, int qflag)
    #else
    public void send_UpdateRealtimeCmpQ(List<string> capid, int qflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("UpdateRealtimeCmpQ", TMessageType.Call, seqid_));
      UpdateRealtimeCmpQ_args args = new UpdateRealtimeCmpQ_args();
      args.Capid = capid;
      args.Qflag = qflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_UpdateRealtimeCmpQ()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UpdateRealtimeCmpQ_result result = new UpdateRealtimeCmpQ_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateRealtimeCmpQ failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryRealtimeCmpInfoQ(AsyncCallback callback, object state, int time, int qflag)
    {
      return send_QueryRealtimeCmpInfoQ(callback, state, time, qflag);
    }

    public List<RealtimeCmpInfoQ> End_QueryRealtimeCmpInfoQ(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryRealtimeCmpInfoQ();
    }

    #endif

    public List<RealtimeCmpInfoQ> QueryRealtimeCmpInfoQ(int time, int qflag)
    {
      #if !SILVERLIGHT
      send_QueryRealtimeCmpInfoQ(time, qflag);
      return recv_QueryRealtimeCmpInfoQ();

      #else
      var asyncResult = Begin_QueryRealtimeCmpInfoQ(null, null, time, qflag);
      return End_QueryRealtimeCmpInfoQ(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryRealtimeCmpInfoQ(AsyncCallback callback, object state, int time, int qflag)
    #else
    public void send_QueryRealtimeCmpInfoQ(int time, int qflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryRealtimeCmpInfoQ", TMessageType.Call, seqid_));
      QueryRealtimeCmpInfoQ_args args = new QueryRealtimeCmpInfoQ_args();
      args.Time = time;
      args.Qflag = qflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<RealtimeCmpInfoQ> recv_QueryRealtimeCmpInfoQ()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryRealtimeCmpInfoQ_result result = new QueryRealtimeCmpInfoQ_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryRealtimeCmpInfoQ failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryRealtimeCapInfoQLBS(AsyncCallback callback, object state, int time)
    {
      return send_QueryRealtimeCapInfoQLBS(callback, state, time);
    }

    public List<RealtimeCapInfoLBS> End_QueryRealtimeCapInfoQLBS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryRealtimeCapInfoQLBS();
    }

    #endif

    public List<RealtimeCapInfoLBS> QueryRealtimeCapInfoQLBS(int time)
    {
      #if !SILVERLIGHT
      send_QueryRealtimeCapInfoQLBS(time);
      return recv_QueryRealtimeCapInfoQLBS();

      #else
      var asyncResult = Begin_QueryRealtimeCapInfoQLBS(null, null, time);
      return End_QueryRealtimeCapInfoQLBS(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryRealtimeCapInfoQLBS(AsyncCallback callback, object state, int time)
    #else
    public void send_QueryRealtimeCapInfoQLBS(int time)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryRealtimeCapInfoQLBS", TMessageType.Call, seqid_));
      QueryRealtimeCapInfoQLBS_args args = new QueryRealtimeCapInfoQLBS_args();
      args.Time = time;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<RealtimeCapInfoLBS> recv_QueryRealtimeCapInfoQLBS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryRealtimeCapInfoQLBS_result result = new QueryRealtimeCapInfoQLBS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryRealtimeCapInfoQLBS failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryRealtimeCmpInfoQLBS(AsyncCallback callback, object state, int time, int qflag)
    {
      return send_QueryRealtimeCmpInfoQLBS(callback, state, time, qflag);
    }

    public List<RealtimeCmpInfoLBS> End_QueryRealtimeCmpInfoQLBS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryRealtimeCmpInfoQLBS();
    }

    #endif

    public List<RealtimeCmpInfoLBS> QueryRealtimeCmpInfoQLBS(int time, int qflag)
    {
      #if !SILVERLIGHT
      send_QueryRealtimeCmpInfoQLBS(time, qflag);
      return recv_QueryRealtimeCmpInfoQLBS();

      #else
      var asyncResult = Begin_QueryRealtimeCmpInfoQLBS(null, null, time, qflag);
      return End_QueryRealtimeCmpInfoQLBS(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryRealtimeCmpInfoQLBS(AsyncCallback callback, object state, int time, int qflag)
    #else
    public void send_QueryRealtimeCmpInfoQLBS(int time, int qflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryRealtimeCmpInfoQLBS", TMessageType.Call, seqid_));
      QueryRealtimeCmpInfoQLBS_args args = new QueryRealtimeCmpInfoQLBS_args();
      args.Time = time;
      args.Qflag = qflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<RealtimeCmpInfoLBS> recv_QueryRealtimeCmpInfoQLBS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryRealtimeCmpInfoQLBS_result result = new QueryRealtimeCmpInfoQLBS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryRealtimeCmpInfoQLBS failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_UpLoadCapFaceMoblie(AsyncCallback callback, object state, string channelID, byte[] img, string latitude, string longitude, string address, long dtm)
    {
      return send_UpLoadCapFaceMoblie(callback, state, channelID, img, latitude, longitude, address, dtm);
    }

    public List<CompareImgResult> End_UpLoadCapFaceMoblie(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UpLoadCapFaceMoblie();
    }

    #endif

    /// <summary>
    /// **add for mobile phone interface ****
    /// </summary>
    /// <param name="channelID"></param>
    /// <param name="img"></param>
    /// <param name="latitude"></param>
    /// <param name="longitude"></param>
    /// <param name="address"></param>
    /// <param name="dtm"></param>
    public List<CompareImgResult> UpLoadCapFaceMoblie(string channelID, byte[] img, string latitude, string longitude, string address, long dtm)
    {
      #if !SILVERLIGHT
      send_UpLoadCapFaceMoblie(channelID, img, latitude, longitude, address, dtm);
      return recv_UpLoadCapFaceMoblie();

      #else
      var asyncResult = Begin_UpLoadCapFaceMoblie(null, null, channelID, img, latitude, longitude, address, dtm);
      return End_UpLoadCapFaceMoblie(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UpLoadCapFaceMoblie(AsyncCallback callback, object state, string channelID, byte[] img, string latitude, string longitude, string address, long dtm)
    #else
    public void send_UpLoadCapFaceMoblie(string channelID, byte[] img, string latitude, string longitude, string address, long dtm)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("UpLoadCapFaceMoblie", TMessageType.Call, seqid_));
      UpLoadCapFaceMoblie_args args = new UpLoadCapFaceMoblie_args();
      args.ChannelID = channelID;
      args.Img = img;
      args.Latitude = latitude;
      args.Longitude = longitude;
      args.Address = address;
      args.Dtm = dtm;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CompareImgResult> recv_UpLoadCapFaceMoblie()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UpLoadCapFaceMoblie_result result = new UpLoadCapFaceMoblie_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpLoadCapFaceMoblie failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpRecordLBSTotalCountM(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int qflag)
    {
      return send_QueryCmpRecordLBSTotalCountM(callback, state, channel, name, type, gender, bage, eage, btime, etime, channel_type, qflag);
    }

    public List<SCountInfo> End_QueryCmpRecordLBSTotalCountM(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpRecordLBSTotalCountM();
    }

    #endif

    public List<SCountInfo> QueryCmpRecordLBSTotalCountM(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int qflag)
    {
      #if !SILVERLIGHT
      send_QueryCmpRecordLBSTotalCountM(channel, name, type, gender, bage, eage, btime, etime, channel_type, qflag);
      return recv_QueryCmpRecordLBSTotalCountM();

      #else
      var asyncResult = Begin_QueryCmpRecordLBSTotalCountM(null, null, channel, name, type, gender, bage, eage, btime, etime, channel_type, qflag);
      return End_QueryCmpRecordLBSTotalCountM(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpRecordLBSTotalCountM(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int qflag)
    #else
    public void send_QueryCmpRecordLBSTotalCountM(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int qflag)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpRecordLBSTotalCountM", TMessageType.Call, seqid_));
      QueryCmpRecordLBSTotalCountM_args args = new QueryCmpRecordLBSTotalCountM_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.Channel_type = channel_type;
      args.Qflag = qflag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<SCountInfo> recv_QueryCmpRecordLBSTotalCountM()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpRecordLBSTotalCountM_result result = new QueryCmpRecordLBSTotalCountM_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpRecordLBSTotalCountM failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryCmpLogDSLBSM(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int qflag, int nPageFirstNum, int nPageNum)
    {
      return send_QueryCmpLogDSLBSM(callback, state, channel, name, type, gender, bage, eage, btime, etime, channel_type, qflag, nPageFirstNum, nPageNum);
    }

    public List<CmpFaceLogDSLBS> End_QueryCmpLogDSLBSM(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryCmpLogDSLBSM();
    }

    #endif

    public List<CmpFaceLogDSLBS> QueryCmpLogDSLBSM(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int qflag, int nPageFirstNum, int nPageNum)
    {
      #if !SILVERLIGHT
      send_QueryCmpLogDSLBSM(channel, name, type, gender, bage, eage, btime, etime, channel_type, qflag, nPageFirstNum, nPageNum);
      return recv_QueryCmpLogDSLBSM();

      #else
      var asyncResult = Begin_QueryCmpLogDSLBSM(null, null, channel, name, type, gender, bage, eage, btime, etime, channel_type, qflag, nPageFirstNum, nPageNum);
      return End_QueryCmpLogDSLBSM(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryCmpLogDSLBSM(AsyncCallback callback, object state, string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int qflag, int nPageFirstNum, int nPageNum)
    #else
    public void send_QueryCmpLogDSLBSM(string channel, string name, int type, int gender, int bage, int eage, long btime, long etime, int channel_type, int qflag, int nPageFirstNum, int nPageNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryCmpLogDSLBSM", TMessageType.Call, seqid_));
      QueryCmpLogDSLBSM_args args = new QueryCmpLogDSLBSM_args();
      args.Channel = channel;
      args.Name = name;
      args.Type = type;
      args.Gender = gender;
      args.Bage = bage;
      args.Eage = eage;
      args.Btime = btime;
      args.Etime = etime;
      args.Channel_type = channel_type;
      args.Qflag = qflag;
      args.NPageFirstNum = nPageFirstNum;
      args.NPageNum = nPageNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<CmpFaceLogDSLBS> recv_QueryCmpLogDSLBSM()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryCmpLogDSLBSM_result result = new QueryCmpLogDSLBSM_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryCmpLogDSLBSM failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["UpLoadCapFace"] = UpLoadCapFace_Process;
      processMap_["UpLoadCapFace1"] = UpLoadCapFace1_Process;
      processMap_["OpenChannel"] = OpenChannel_Process;
      processMap_["CloseChannel"] = CloseChannel_Process;
      processMap_["OpenAllChannel"] = OpenAllChannel_Process;
      processMap_["CloseAllChannel"] = CloseAllChannel_Process;
      processMap_["AddChannel"] = AddChannel_Process;
      processMap_["DelChannel"] = DelChannel_Process;
      processMap_["ModifyChannel"] = ModifyChannel_Process;
      processMap_["QueryAllChannel"] = QueryAllChannel_Process;
      processMap_["QueryChannel"] = QueryChannel_Process;
      processMap_["QueryCapDetails"] = QueryCapDetails_Process;
      processMap_["QueryCapLog"] = QueryCapLog_Process;
      processMap_["QueryCapLogImage"] = QueryCapLogImage_Process;
      processMap_["QueryCapRecordTotalCount"] = QueryCapRecordTotalCount_Process;
      processMap_["QueryCapLogWithImg"] = QueryCapLogWithImg_Process;
      processMap_["QueryCmpLog"] = QueryCmpLog_Process;
      processMap_["QueryCmpLogAndCount"] = QueryCmpLogAndCount_Process;
      processMap_["QueryCmpLogByObjId"] = QueryCmpLogByObjId_Process;
      processMap_["QueryCmpLogCountByObjId"] = QueryCmpLogCountByObjId_Process;
      processMap_["QueryCmpLogImage"] = QueryCmpLogImage_Process;
      processMap_["QueryCmpLogWidthImg"] = QueryCmpLogWidthImg_Process;
      processMap_["QueryCmpByCapIdWidthImg"] = QueryCmpByCapIdWidthImg_Process;
      processMap_["QueryCmpRecordTotalCount"] = QueryCmpRecordTotalCount_Process;
      processMap_["CompareImg"] = CompareImg_Process;
      processMap_["QueryFaceObj"] = QueryFaceObj_Process;
      processMap_["QueryFaceObjByImg"] = QueryFaceObjByImg_Process;
      processMap_["QueryFaceObjTotalCount"] = QueryFaceObjTotalCount_Process;
      processMap_["ChangeTemplateImark"] = ChangeTemplateImark_Process;
      processMap_["AddFaceObj"] = AddFaceObj_Process;
      processMap_["DelFaceObj"] = DelFaceObj_Process;
      processMap_["ModifyFaceObj"] = ModifyFaceObj_Process;
      processMap_["QueryDefGender"] = QueryDefGender_Process;
      processMap_["QueryDefFaceObjType"] = QueryDefFaceObjType_Process;
      processMap_["QueryDefChannelType"] = QueryDefChannelType_Process;
      processMap_["QueryDefCameraType"] = QueryDefCameraType_Process;
      processMap_["HearBeat"] = HearBeat_Process;
      processMap_["QueryChannelByIp"] = QueryChannelByIp_Process;
      processMap_["QueryListFaceObjNum"] = QueryListFaceObjNum_Process;
      processMap_["QueryListFaceObj"] = QueryListFaceObj_Process;
      processMap_["SetCMPthreshold"] = SetCMPthreshold_Process;
      processMap_["GetClientIPList"] = GetClientIPList_Process;
      processMap_["ClientRegion"] = ClientRegion_Process;
      processMap_["VisitorRegion"] = VisitorRegion_Process;
      processMap_["UploadCmpLogFromFront"] = UploadCmpLogFromFront_Process;
      processMap_["VisitorVerifi"] = VisitorVerifi_Process;
      processMap_["uploadrealcap"] = uploadrealcap_Process;
      processMap_["ServerRegion"] = ServerRegion_Process;
      processMap_["SetConfig"] = SetConfig_Process;
      processMap_["GetConfig"] = GetConfig_Process;
      processMap_["QueryCapRecordTotalCountH"] = QueryCapRecordTotalCountH_Process;
      processMap_["QueryCmpRecordTotalCountH"] = QueryCmpRecordTotalCountH_Process;
      processMap_["QueryCapDetailsH"] = QueryCapDetailsH_Process;
      processMap_["QueryCapLogImageH"] = QueryCapLogImageH_Process;
      processMap_["QueryCmpLogImageH"] = QueryCmpLogImageH_Process;
      processMap_["QueryCmpByCapIdWidthImgH"] = QueryCmpByCapIdWidthImgH_Process;
      processMap_["UpLoadCapFace2"] = UpLoadCapFace2_Process;
      processMap_["QuerySenceImg"] = QuerySenceImg_Process;
      processMap_["QueryDefGenderH"] = QueryDefGenderH_Process;
      processMap_["QueryDefFaceObjTypeH"] = QueryDefFaceObjTypeH_Process;
      processMap_["QueryDefChannelTypeH"] = QueryDefChannelTypeH_Process;
      processMap_["QueryDefCameraTypeH"] = QueryDefCameraTypeH_Process;
      processMap_["SetDefGenderH"] = SetDefGenderH_Process;
      processMap_["SetDefFaceObjTypeH"] = SetDefFaceObjTypeH_Process;
      processMap_["SetDefChannelTypeH"] = SetDefChannelTypeH_Process;
      processMap_["SetDefCameraTypeH"] = SetDefCameraTypeH_Process;
      processMap_["AddDiaplayArea"] = AddDiaplayArea_Process;
      processMap_["ModDiaplayArea"] = ModDiaplayArea_Process;
      processMap_["DelDiaplayArea"] = DelDiaplayArea_Process;
      processMap_["QueryListDiaplayAreaNum"] = QueryListDiaplayAreaNum_Process;
      processMap_["QueryListDiaplayArea"] = QueryListDiaplayArea_Process;
      processMap_["AddChannelGY"] = AddChannelGY_Process;
      processMap_["DelChannelGY"] = DelChannelGY_Process;
      processMap_["ModifyChannelGY"] = ModifyChannelGY_Process;
      processMap_["QueryAllChannelGY"] = QueryAllChannelGY_Process;
      processMap_["QueryChannelGY"] = QueryChannelGY_Process;
      processMap_["QueryChannelByIpGY"] = QueryChannelByIpGY_Process;
      processMap_["QueryCapLogGY"] = QueryCapLogGY_Process;
      processMap_["QueryCapRecordTotalCountHGY"] = QueryCapRecordTotalCountHGY_Process;
      processMap_["QueryCapDetailsHGY"] = QueryCapDetailsHGY_Process;
      processMap_["QueryCapLogImageHGY"] = QueryCapLogImageHGY_Process;
      processMap_["QueryCapLogWithImgGY"] = QueryCapLogWithImgGY_Process;
      processMap_["QueryCmpLogGY"] = QueryCmpLogGY_Process;
      processMap_["QueryCmpRecordTotalCountHGY"] = QueryCmpRecordTotalCountHGY_Process;
      processMap_["QueryCmpLogWidthImgGY"] = QueryCmpLogWidthImgGY_Process;
      processMap_["QueryCmpLogImageHGY"] = QueryCmpLogImageHGY_Process;
      processMap_["QueryCmpByCapIdWidthImgHGY"] = QueryCmpByCapIdWidthImgHGY_Process;
      processMap_["QueryCmpLogByObjIdGY"] = QueryCmpLogByObjIdGY_Process;
      processMap_["QueryCmpLogCountByObjIdGY"] = QueryCmpLogCountByObjIdGY_Process;
      processMap_["QueryAllStatGY"] = QueryAllStatGY_Process;
      processMap_["QueryStatByAreaOneDayGY"] = QueryStatByAreaOneDayGY_Process;
      processMap_["QueryStatByAreaOneHourGY"] = QueryStatByAreaOneHourGY_Process;
      processMap_["QueryVisitorStatGY"] = QueryVisitorStatGY_Process;
      processMap_["QueryVisitorOrbitGY"] = QueryVisitorOrbitGY_Process;
      processMap_["QueryPieChartGY"] = QueryPieChartGY_Process;
      processMap_["UpLoadCapFaceSyncGY"] = UpLoadCapFaceSyncGY_Process;
      processMap_["UpLoadCapFaceASyncGY"] = UpLoadCapFaceASyncGY_Process;
      processMap_["QueryCmpLogSX"] = QueryCmpLogSX_Process;
      processMap_["QueryCmpLogByObjIdSX"] = QueryCmpLogByObjIdSX_Process;
      processMap_["QueryCmpLogCountByObjIdSX"] = QueryCmpLogCountByObjIdSX_Process;
      processMap_["QueryCmpLogImageHSX"] = QueryCmpLogImageHSX_Process;
      processMap_["QueryCmpLogWidthImgSX"] = QueryCmpLogWidthImgSX_Process;
      processMap_["QueryCmpByCapIdWidthImgHSX"] = QueryCmpByCapIdWidthImgHSX_Process;
      processMap_["QueryCmpRecordTotalCountHSX"] = QueryCmpRecordTotalCountHSX_Process;
      processMap_["UpdateCmpLog"] = UpdateCmpLog_Process;
      processMap_["QueryThreshold"] = QueryThreshold_Process;
      processMap_["QueryCapLogSX"] = QueryCapLogSX_Process;
      processMap_["QueryCapRecordTotalCountHSX"] = QueryCapRecordTotalCountHSX_Process;
      processMap_["QueryCapDetailsHSX"] = QueryCapDetailsHSX_Process;
      processMap_["QueryCapLogImageHSX"] = QueryCapLogImageHSX_Process;
      processMap_["QueryCapLogSXC"] = QueryCapLogSXC_Process;
      processMap_["QueryCapRecordTotalCountHSXC"] = QueryCapRecordTotalCountHSXC_Process;
      processMap_["TerminalPhoneRegion"] = TerminalPhoneRegion_Process;
      processMap_["GetServerTime"] = GetServerTime_Process;
      processMap_["UploadCmpLogFromFrontPH"] = UploadCmpLogFromFrontPH_Process;
      processMap_["QueryListFaceObjPH"] = QueryListFaceObjPH_Process;
      processMap_["QueryCmpRecordTotalCountHDS"] = QueryCmpRecordTotalCountHDS_Process;
      processMap_["QueryCmpRecordTotalCountHSXDS"] = QueryCmpRecordTotalCountHSXDS_Process;
      processMap_["QueryCmpLogDS"] = QueryCmpLogDS_Process;
      processMap_["QueryCmpLogByObjIdDS"] = QueryCmpLogByObjIdDS_Process;
      processMap_["QueryCmpLogCountByObjIdDS"] = QueryCmpLogCountByObjIdDS_Process;
      processMap_["QueryCmpLogSXDS"] = QueryCmpLogSXDS_Process;
      processMap_["QueryCmpLogByObjIdSXDS"] = QueryCmpLogByObjIdSXDS_Process;
      processMap_["QueryCmpLogCountByObjIdSXDS"] = QueryCmpLogCountByObjIdSXDS_Process;
      processMap_["AddChannelLBS"] = AddChannelLBS_Process;
      processMap_["ModifyChannelLBS"] = ModifyChannelLBS_Process;
      processMap_["QueryAllChannelLBS"] = QueryAllChannelLBS_Process;
      processMap_["QueryChannelLBS"] = QueryChannelLBS_Process;
      processMap_["QueryTargetedAnalysis"] = QueryTargetedAnalysis_Process;
      processMap_["QueryKeyAreaSuspectAnalysis"] = QueryKeyAreaSuspectAnalysis_Process;
      processMap_["QueryCrowdedAnalysis"] = QueryCrowdedAnalysis_Process;
      processMap_["QueryTrackPlayback"] = QueryTrackPlayback_Process;
      processMap_["QueryStaticAnalysis"] = QueryStaticAnalysis_Process;
      processMap_["QueryCapRecordTotalCountHLBS"] = QueryCapRecordTotalCountHLBS_Process;
      processMap_["QueryCapLogLBS"] = QueryCapLogLBS_Process;
      processMap_["QueryCmpRecordTotalCountHDSLBS"] = QueryCmpRecordTotalCountHDSLBS_Process;
      processMap_["QueryCmpLogDSLBS"] = QueryCmpLogDSLBS_Process;
      processMap_["QueryCmpRecordTotalCountHDSLBSSX"] = QueryCmpRecordTotalCountHDSLBSSX_Process;
      processMap_["QueryCmpLogDSLBSSX"] = QueryCmpLogDSLBSSX_Process;
      processMap_["QueryLastRecordInfo"] = QueryLastRecordInfo_Process;
      processMap_["QueryRealtimeCapInfoQ"] = QueryRealtimeCapInfoQ_Process;
      processMap_["UpdateRealtimeCmpQ"] = UpdateRealtimeCmpQ_Process;
      processMap_["QueryRealtimeCmpInfoQ"] = QueryRealtimeCmpInfoQ_Process;
      processMap_["QueryRealtimeCapInfoQLBS"] = QueryRealtimeCapInfoQLBS_Process;
      processMap_["QueryRealtimeCmpInfoQLBS"] = QueryRealtimeCmpInfoQLBS_Process;
      processMap_["UpLoadCapFaceMoblie"] = UpLoadCapFaceMoblie_Process;
      processMap_["QueryCmpRecordLBSTotalCountM"] = QueryCmpRecordLBSTotalCountM_Process;
      processMap_["QueryCmpLogDSLBSM"] = QueryCmpLogDSLBSM_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void UpLoadCapFace_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UpLoadCapFace_args args = new UpLoadCapFace_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UpLoadCapFace_result result = new UpLoadCapFace_result();
      result.Success = iface_.UpLoadCapFace(args.Fi, args.NFeaLen, args.Feature, args.NImgLen, args.Image);
      oprot.WriteMessageBegin(new TMessage("UpLoadCapFace", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void UpLoadCapFace1_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UpLoadCapFace1_args args = new UpLoadCapFace1_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UpLoadCapFace1_result result = new UpLoadCapFace1_result();
      result.Success = iface_.UpLoadCapFace1(args.ChannelID, args.Index, args.TimeIn, args.TimeOut, args.Age, args.Gender, args.Fis);
      oprot.WriteMessageBegin(new TMessage("UpLoadCapFace1", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void OpenChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      OpenChannel_args args = new OpenChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      OpenChannel_result result = new OpenChannel_result();
      result.Success = iface_.OpenChannel(args.ChannelID);
      oprot.WriteMessageBegin(new TMessage("OpenChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void CloseChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      CloseChannel_args args = new CloseChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      CloseChannel_result result = new CloseChannel_result();
      result.Success = iface_.CloseChannel(args.ChannelID);
      oprot.WriteMessageBegin(new TMessage("CloseChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void OpenAllChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      OpenAllChannel_args args = new OpenAllChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      OpenAllChannel_result result = new OpenAllChannel_result();
      result.Success = iface_.OpenAllChannel();
      oprot.WriteMessageBegin(new TMessage("OpenAllChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void CloseAllChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      CloseAllChannel_args args = new CloseAllChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      CloseAllChannel_result result = new CloseAllChannel_result();
      result.Success = iface_.CloseAllChannel();
      oprot.WriteMessageBegin(new TMessage("CloseAllChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void AddChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      AddChannel_args args = new AddChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      AddChannel_result result = new AddChannel_result();
      result.Success = iface_.AddChannel(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("AddChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void DelChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      DelChannel_args args = new DelChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      DelChannel_result result = new DelChannel_result();
      result.Success = iface_.DelChannel(args.ChannelID);
      oprot.WriteMessageBegin(new TMessage("DelChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ModifyChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ModifyChannel_args args = new ModifyChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ModifyChannel_result result = new ModifyChannel_result();
      result.Success = iface_.ModifyChannel(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("ModifyChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryAllChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryAllChannel_args args = new QueryAllChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryAllChannel_result result = new QueryAllChannel_result();
      result.Success = iface_.QueryAllChannel();
      oprot.WriteMessageBegin(new TMessage("QueryAllChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryChannel_args args = new QueryChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryChannel_result result = new QueryChannel_result();
      result.Success = iface_.QueryChannel(args.ChannelID);
      oprot.WriteMessageBegin(new TMessage("QueryChannel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapDetails_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapDetails_args args = new QueryCapDetails_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapDetails_result result = new QueryCapDetails_result();
      result.Success = iface_.QueryCapDetails(args.Id);
      oprot.WriteMessageBegin(new TMessage("QueryCapDetails", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapLog_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapLog_args args = new QueryCapLog_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapLog_result result = new QueryCapLog_result();
      result.Success = iface_.QueryCapLog(args.Channel, args.Btime, args.Etime, args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryCapLog", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapLogImage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapLogImage_args args = new QueryCapLogImage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapLogImage_result result = new QueryCapLogImage_result();
      result.Success = iface_.QueryCapLogImage(args.ID);
      oprot.WriteMessageBegin(new TMessage("QueryCapLogImage", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapRecordTotalCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapRecordTotalCount_args args = new QueryCapRecordTotalCount_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapRecordTotalCount_result result = new QueryCapRecordTotalCount_result();
      result.Success = iface_.QueryCapRecordTotalCount(args.Channel, args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryCapRecordTotalCount", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapLogWithImg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapLogWithImg_args args = new QueryCapLogWithImg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapLogWithImg_result result = new QueryCapLogWithImg_result();
      result.Success = iface_.QueryCapLogWithImg(args.Channel, args.Btime, args.Etime, args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryCapLogWithImg", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLog_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLog_args args = new QueryCmpLog_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLog_result result = new QueryCmpLog_result();
      result.Success = iface_.QueryCmpLog(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLog", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogAndCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogAndCount_args args = new QueryCmpLogAndCount_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogAndCount_result result = new QueryCmpLogAndCount_result();
      result.Success = iface_.QueryCmpLogAndCount(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.NPageFirstNum, args.NPageNum, args.Pflag, args.QueryType);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogAndCount", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogByObjId_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogByObjId_args args = new QueryCmpLogByObjId_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogByObjId_result result = new QueryCmpLogByObjId_result();
      result.Success = iface_.QueryCmpLogByObjId(args.Objid, args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogByObjId", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogCountByObjId_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogCountByObjId_args args = new QueryCmpLogCountByObjId_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogCountByObjId_result result = new QueryCmpLogCountByObjId_result();
      result.Success = iface_.QueryCmpLogCountByObjId(args.Objid, args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogCountByObjId", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogImage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogImage_args args = new QueryCmpLogImage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogImage_result result = new QueryCmpLogImage_result();
      result.Success = iface_.QueryCmpLogImage(args.ID);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogImage", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogWidthImg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogWidthImg_args args = new QueryCmpLogWidthImg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogWidthImg_result result = new QueryCmpLogWidthImg_result();
      result.Success = iface_.QueryCmpLogWidthImg(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogWidthImg", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpByCapIdWidthImg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpByCapIdWidthImg_args args = new QueryCmpByCapIdWidthImg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpByCapIdWidthImg_result result = new QueryCmpByCapIdWidthImg_result();
      result.Success = iface_.QueryCmpByCapIdWidthImg(args.ID);
      oprot.WriteMessageBegin(new TMessage("QueryCmpByCapIdWidthImg", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpRecordTotalCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpRecordTotalCount_args args = new QueryCmpRecordTotalCount_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpRecordTotalCount_result result = new QueryCmpRecordTotalCount_result();
      result.Success = iface_.QueryCmpRecordTotalCount(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryCmpRecordTotalCount", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void CompareImg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      CompareImg_args args = new CompareImg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      CompareImg_result result = new CompareImg_result();
      result.Success = iface_.CompareImg(args.Image, args.NThreshold, args.NMaxCount);
      oprot.WriteMessageBegin(new TMessage("CompareImg", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryFaceObj_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryFaceObj_args args = new QueryFaceObj_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryFaceObj_result result = new QueryFaceObj_result();
      result.Success = iface_.QueryFaceObj(args.Id, args.Name, args.Bage, args.Eage, args.Gender, args.Type, args.Btime, args.Etime, args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryFaceObj", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryFaceObjByImg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryFaceObjByImg_args args = new QueryFaceObjByImg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryFaceObjByImg_result result = new QueryFaceObjByImg_result();
      result.Success = iface_.QueryFaceObjByImg(args.Image, args.NThreshold, args.NMaxCount);
      oprot.WriteMessageBegin(new TMessage("QueryFaceObjByImg", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryFaceObjTotalCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryFaceObjTotalCount_args args = new QueryFaceObjTotalCount_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryFaceObjTotalCount_result result = new QueryFaceObjTotalCount_result();
      result.Success = iface_.QueryFaceObjTotalCount(args.Id, args.Name, args.Bage, args.Eage, args.Gender, args.Type, args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryFaceObjTotalCount", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ChangeTemplateImark_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ChangeTemplateImark_args args = new ChangeTemplateImark_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ChangeTemplateImark_result result = new ChangeTemplateImark_result();
      result.Success = iface_.ChangeTemplateImark(args.Uuid, args.Imark);
      oprot.WriteMessageBegin(new TMessage("ChangeTemplateImark", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void AddFaceObj_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      AddFaceObj_args args = new AddFaceObj_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      AddFaceObj_result result = new AddFaceObj_result();
      result.Success = iface_.AddFaceObj(args.Obj);
      oprot.WriteMessageBegin(new TMessage("AddFaceObj", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void DelFaceObj_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      DelFaceObj_args args = new DelFaceObj_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      DelFaceObj_result result = new DelFaceObj_result();
      result.Success = iface_.DelFaceObj(args.ID);
      oprot.WriteMessageBegin(new TMessage("DelFaceObj", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ModifyFaceObj_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ModifyFaceObj_args args = new ModifyFaceObj_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ModifyFaceObj_result result = new ModifyFaceObj_result();
      result.Success = iface_.ModifyFaceObj(args.Id, args.Obj);
      oprot.WriteMessageBegin(new TMessage("ModifyFaceObj", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryDefGender_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryDefGender_args args = new QueryDefGender_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryDefGender_result result = new QueryDefGender_result();
      result.Success = iface_.QueryDefGender();
      oprot.WriteMessageBegin(new TMessage("QueryDefGender", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryDefFaceObjType_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryDefFaceObjType_args args = new QueryDefFaceObjType_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryDefFaceObjType_result result = new QueryDefFaceObjType_result();
      result.Success = iface_.QueryDefFaceObjType();
      oprot.WriteMessageBegin(new TMessage("QueryDefFaceObjType", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryDefChannelType_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryDefChannelType_args args = new QueryDefChannelType_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryDefChannelType_result result = new QueryDefChannelType_result();
      result.Success = iface_.QueryDefChannelType();
      oprot.WriteMessageBegin(new TMessage("QueryDefChannelType", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryDefCameraType_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryDefCameraType_args args = new QueryDefCameraType_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryDefCameraType_result result = new QueryDefCameraType_result();
      result.Success = iface_.QueryDefCameraType();
      oprot.WriteMessageBegin(new TMessage("QueryDefCameraType", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void HearBeat_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      HearBeat_args args = new HearBeat_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      HearBeat_result result = new HearBeat_result();
      result.Success = iface_.HearBeat();
      oprot.WriteMessageBegin(new TMessage("HearBeat", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryChannelByIp_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryChannelByIp_args args = new QueryChannelByIp_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryChannelByIp_result result = new QueryChannelByIp_result();
      result.Success = iface_.QueryChannelByIp(args.Capip);
      oprot.WriteMessageBegin(new TMessage("QueryChannelByIp", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryListFaceObjNum_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryListFaceObjNum_args args = new QueryListFaceObjNum_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryListFaceObjNum_result result = new QueryListFaceObjNum_result();
      result.Success = iface_.QueryListFaceObjNum();
      oprot.WriteMessageBegin(new TMessage("QueryListFaceObjNum", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryListFaceObj_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryListFaceObj_args args = new QueryListFaceObj_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryListFaceObj_result result = new QueryListFaceObj_result();
      result.Success = iface_.QueryListFaceObj(args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryListFaceObj", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void SetCMPthreshold_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      SetCMPthreshold_args args = new SetCMPthreshold_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      SetCMPthreshold_result result = new SetCMPthreshold_result();
      result.Success = iface_.SetCMPthreshold(args.Threshold);
      oprot.WriteMessageBegin(new TMessage("SetCMPthreshold", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void GetClientIPList_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      GetClientIPList_args args = new GetClientIPList_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      GetClientIPList_result result = new GetClientIPList_result();
      result.Success = iface_.GetClientIPList();
      oprot.WriteMessageBegin(new TMessage("GetClientIPList", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ClientRegion_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ClientRegion_args args = new ClientRegion_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ClientRegion_result result = new ClientRegion_result();
      result.Success = iface_.ClientRegion(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("ClientRegion", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void VisitorRegion_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      VisitorRegion_args args = new VisitorRegion_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      VisitorRegion_result result = new VisitorRegion_result();
      result.Success = iface_.VisitorRegion(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("VisitorRegion", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void UploadCmpLogFromFront_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UploadCmpLogFromFront_args args = new UploadCmpLogFromFront_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UploadCmpLogFromFront_result result = new UploadCmpLogFromFront_result();
      result.Success = iface_.UploadCmpLogFromFront(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("UploadCmpLogFromFront", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void VisitorVerifi_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      VisitorVerifi_args args = new VisitorVerifi_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      VisitorVerifi_result result = new VisitorVerifi_result();
      result.Success = iface_.VisitorVerifi(args.Img, args.ChannelID, args.Channelname);
      oprot.WriteMessageBegin(new TMessage("VisitorVerifi", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void uploadrealcap_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      uploadrealcap_args args = new uploadrealcap_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      uploadrealcap_result result = new uploadrealcap_result();
      result.Success = iface_.uploadrealcap(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("uploadrealcap", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ServerRegion_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ServerRegion_args args = new ServerRegion_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ServerRegion_result result = new ServerRegion_result();
      result.Success = iface_.ServerRegion(args.Server);
      oprot.WriteMessageBegin(new TMessage("ServerRegion", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void SetConfig_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      SetConfig_args args = new SetConfig_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      SetConfig_result result = new SetConfig_result();
      result.Success = iface_.SetConfig(args.Server, args.Config);
      oprot.WriteMessageBegin(new TMessage("SetConfig", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void GetConfig_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      GetConfig_args args = new GetConfig_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      GetConfig_result result = new GetConfig_result();
      result.Success = iface_.GetConfig(args.Stype);
      oprot.WriteMessageBegin(new TMessage("GetConfig", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapRecordTotalCountH_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapRecordTotalCountH_args args = new QueryCapRecordTotalCountH_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapRecordTotalCountH_result result = new QueryCapRecordTotalCountH_result();
      result.Success = iface_.QueryCapRecordTotalCountH(args.Channel, args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryCapRecordTotalCountH", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpRecordTotalCountH_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpRecordTotalCountH_args args = new QueryCmpRecordTotalCountH_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpRecordTotalCountH_result result = new QueryCmpRecordTotalCountH_result();
      result.Success = iface_.QueryCmpRecordTotalCountH(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryCmpRecordTotalCountH", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapDetailsH_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapDetailsH_args args = new QueryCapDetailsH_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapDetailsH_result result = new QueryCapDetailsH_result();
      result.Success = iface_.QueryCapDetailsH(args.Id, args.Day);
      oprot.WriteMessageBegin(new TMessage("QueryCapDetailsH", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapLogImageH_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapLogImageH_args args = new QueryCapLogImageH_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapLogImageH_result result = new QueryCapLogImageH_result();
      result.Success = iface_.QueryCapLogImageH(args.ID, args.Day);
      oprot.WriteMessageBegin(new TMessage("QueryCapLogImageH", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogImageH_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogImageH_args args = new QueryCmpLogImageH_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogImageH_result result = new QueryCmpLogImageH_result();
      result.Success = iface_.QueryCmpLogImageH(args.ID, args.Day);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogImageH", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpByCapIdWidthImgH_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpByCapIdWidthImgH_args args = new QueryCmpByCapIdWidthImgH_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpByCapIdWidthImgH_result result = new QueryCmpByCapIdWidthImgH_result();
      result.Success = iface_.QueryCmpByCapIdWidthImgH(args.ID, args.Day);
      oprot.WriteMessageBegin(new TMessage("QueryCmpByCapIdWidthImgH", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void UpLoadCapFace2_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UpLoadCapFace2_args args = new UpLoadCapFace2_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UpLoadCapFace2_result result = new UpLoadCapFace2_result();
      result.Success = iface_.UpLoadCapFace2(args.ChannelID, args.Index, args.TimeIn, args.TimeOut, args.Age, args.Gender, args.Fis);
      oprot.WriteMessageBegin(new TMessage("UpLoadCapFace2", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QuerySenceImg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QuerySenceImg_args args = new QuerySenceImg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QuerySenceImg_result result = new QuerySenceImg_result();
      result.Success = iface_.QuerySenceImg(args.ID, args.Day);
      oprot.WriteMessageBegin(new TMessage("QuerySenceImg", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryDefGenderH_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryDefGenderH_args args = new QueryDefGenderH_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryDefGenderH_result result = new QueryDefGenderH_result();
      result.Success = iface_.QueryDefGenderH(args.ID);
      oprot.WriteMessageBegin(new TMessage("QueryDefGenderH", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryDefFaceObjTypeH_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryDefFaceObjTypeH_args args = new QueryDefFaceObjTypeH_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryDefFaceObjTypeH_result result = new QueryDefFaceObjTypeH_result();
      result.Success = iface_.QueryDefFaceObjTypeH(args.ID);
      oprot.WriteMessageBegin(new TMessage("QueryDefFaceObjTypeH", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryDefChannelTypeH_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryDefChannelTypeH_args args = new QueryDefChannelTypeH_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryDefChannelTypeH_result result = new QueryDefChannelTypeH_result();
      result.Success = iface_.QueryDefChannelTypeH(args.ID);
      oprot.WriteMessageBegin(new TMessage("QueryDefChannelTypeH", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryDefCameraTypeH_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryDefCameraTypeH_args args = new QueryDefCameraTypeH_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryDefCameraTypeH_result result = new QueryDefCameraTypeH_result();
      result.Success = iface_.QueryDefCameraTypeH(args.ID);
      oprot.WriteMessageBegin(new TMessage("QueryDefCameraTypeH", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void SetDefGenderH_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      SetDefGenderH_args args = new SetDefGenderH_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      SetDefGenderH_result result = new SetDefGenderH_result();
      result.Success = iface_.SetDefGenderH(args.Sinfo);
      oprot.WriteMessageBegin(new TMessage("SetDefGenderH", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void SetDefFaceObjTypeH_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      SetDefFaceObjTypeH_args args = new SetDefFaceObjTypeH_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      SetDefFaceObjTypeH_result result = new SetDefFaceObjTypeH_result();
      result.Success = iface_.SetDefFaceObjTypeH(args.Sinfo);
      oprot.WriteMessageBegin(new TMessage("SetDefFaceObjTypeH", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void SetDefChannelTypeH_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      SetDefChannelTypeH_args args = new SetDefChannelTypeH_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      SetDefChannelTypeH_result result = new SetDefChannelTypeH_result();
      result.Success = iface_.SetDefChannelTypeH(args.Sinfo);
      oprot.WriteMessageBegin(new TMessage("SetDefChannelTypeH", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void SetDefCameraTypeH_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      SetDefCameraTypeH_args args = new SetDefCameraTypeH_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      SetDefCameraTypeH_result result = new SetDefCameraTypeH_result();
      result.Success = iface_.SetDefCameraTypeH(args.Sinfo);
      oprot.WriteMessageBegin(new TMessage("SetDefCameraTypeH", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void AddDiaplayArea_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      AddDiaplayArea_args args = new AddDiaplayArea_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      AddDiaplayArea_result result = new AddDiaplayArea_result();
      result.Success = iface_.AddDiaplayArea(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("AddDiaplayArea", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ModDiaplayArea_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ModDiaplayArea_args args = new ModDiaplayArea_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ModDiaplayArea_result result = new ModDiaplayArea_result();
      result.Success = iface_.ModDiaplayArea(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("ModDiaplayArea", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void DelDiaplayArea_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      DelDiaplayArea_args args = new DelDiaplayArea_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      DelDiaplayArea_result result = new DelDiaplayArea_result();
      result.Success = iface_.DelDiaplayArea(args.Zid);
      oprot.WriteMessageBegin(new TMessage("DelDiaplayArea", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryListDiaplayAreaNum_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryListDiaplayAreaNum_args args = new QueryListDiaplayAreaNum_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryListDiaplayAreaNum_result result = new QueryListDiaplayAreaNum_result();
      result.Success = iface_.QueryListDiaplayAreaNum(args.Name);
      oprot.WriteMessageBegin(new TMessage("QueryListDiaplayAreaNum", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryListDiaplayArea_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryListDiaplayArea_args args = new QueryListDiaplayArea_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryListDiaplayArea_result result = new QueryListDiaplayArea_result();
      result.Success = iface_.QueryListDiaplayArea(args.Name);
      oprot.WriteMessageBegin(new TMessage("QueryListDiaplayArea", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void AddChannelGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      AddChannelGY_args args = new AddChannelGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      AddChannelGY_result result = new AddChannelGY_result();
      result.Success = iface_.AddChannelGY(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("AddChannelGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void DelChannelGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      DelChannelGY_args args = new DelChannelGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      DelChannelGY_result result = new DelChannelGY_result();
      result.Success = iface_.DelChannelGY(args.ChannelID);
      oprot.WriteMessageBegin(new TMessage("DelChannelGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ModifyChannelGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ModifyChannelGY_args args = new ModifyChannelGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ModifyChannelGY_result result = new ModifyChannelGY_result();
      result.Success = iface_.ModifyChannelGY(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("ModifyChannelGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryAllChannelGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryAllChannelGY_args args = new QueryAllChannelGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryAllChannelGY_result result = new QueryAllChannelGY_result();
      result.Success = iface_.QueryAllChannelGY();
      oprot.WriteMessageBegin(new TMessage("QueryAllChannelGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryChannelGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryChannelGY_args args = new QueryChannelGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryChannelGY_result result = new QueryChannelGY_result();
      result.Success = iface_.QueryChannelGY(args.ChannelID);
      oprot.WriteMessageBegin(new TMessage("QueryChannelGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryChannelByIpGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryChannelByIpGY_args args = new QueryChannelByIpGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryChannelByIpGY_result result = new QueryChannelByIpGY_result();
      result.Success = iface_.QueryChannelByIpGY(args.Capip);
      oprot.WriteMessageBegin(new TMessage("QueryChannelByIpGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapLogGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapLogGY_args args = new QueryCapLogGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapLogGY_result result = new QueryCapLogGY_result();
      result.Success = iface_.QueryCapLogGY(args.Channel, args.Channel_div, args.Btime, args.Etime, args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryCapLogGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapRecordTotalCountHGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapRecordTotalCountHGY_args args = new QueryCapRecordTotalCountHGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapRecordTotalCountHGY_result result = new QueryCapRecordTotalCountHGY_result();
      result.Success = iface_.QueryCapRecordTotalCountHGY(args.Channel, args.Channel_div, args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryCapRecordTotalCountHGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapDetailsHGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapDetailsHGY_args args = new QueryCapDetailsHGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapDetailsHGY_result result = new QueryCapDetailsHGY_result();
      result.Success = iface_.QueryCapDetailsHGY(args.Id, args.Day);
      oprot.WriteMessageBegin(new TMessage("QueryCapDetailsHGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapLogImageHGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapLogImageHGY_args args = new QueryCapLogImageHGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapLogImageHGY_result result = new QueryCapLogImageHGY_result();
      result.Success = iface_.QueryCapLogImageHGY(args.ID, args.Day);
      oprot.WriteMessageBegin(new TMessage("QueryCapLogImageHGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapLogWithImgGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapLogWithImgGY_args args = new QueryCapLogWithImgGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapLogWithImgGY_result result = new QueryCapLogWithImgGY_result();
      result.Success = iface_.QueryCapLogWithImgGY(args.Channel, args.Channel_div, args.Btime, args.Etime, args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryCapLogWithImgGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogGY_args args = new QueryCmpLogGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogGY_result result = new QueryCmpLogGY_result();
      result.Success = iface_.QueryCmpLogGY(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.Channel_div, args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpRecordTotalCountHGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpRecordTotalCountHGY_args args = new QueryCmpRecordTotalCountHGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpRecordTotalCountHGY_result result = new QueryCmpRecordTotalCountHGY_result();
      result.Success = iface_.QueryCmpRecordTotalCountHGY(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.Channel_div);
      oprot.WriteMessageBegin(new TMessage("QueryCmpRecordTotalCountHGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogWidthImgGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogWidthImgGY_args args = new QueryCmpLogWidthImgGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogWidthImgGY_result result = new QueryCmpLogWidthImgGY_result();
      result.Success = iface_.QueryCmpLogWidthImgGY(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.Channel_div, args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogWidthImgGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogImageHGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogImageHGY_args args = new QueryCmpLogImageHGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogImageHGY_result result = new QueryCmpLogImageHGY_result();
      result.Success = iface_.QueryCmpLogImageHGY(args.ID, args.Day);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogImageHGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpByCapIdWidthImgHGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpByCapIdWidthImgHGY_args args = new QueryCmpByCapIdWidthImgHGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpByCapIdWidthImgHGY_result result = new QueryCmpByCapIdWidthImgHGY_result();
      result.Success = iface_.QueryCmpByCapIdWidthImgHGY(args.ID, args.Day);
      oprot.WriteMessageBegin(new TMessage("QueryCmpByCapIdWidthImgHGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogByObjIdGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogByObjIdGY_args args = new QueryCmpLogByObjIdGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogByObjIdGY_result result = new QueryCmpLogByObjIdGY_result();
      result.Success = iface_.QueryCmpLogByObjIdGY(args.Objid, args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogByObjIdGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogCountByObjIdGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogCountByObjIdGY_args args = new QueryCmpLogCountByObjIdGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogCountByObjIdGY_result result = new QueryCmpLogCountByObjIdGY_result();
      result.Success = iface_.QueryCmpLogCountByObjIdGY(args.Objid, args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogCountByObjIdGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryAllStatGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryAllStatGY_args args = new QueryAllStatGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryAllStatGY_result result = new QueryAllStatGY_result();
      result.Success = iface_.QueryAllStatGY();
      oprot.WriteMessageBegin(new TMessage("QueryAllStatGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryStatByAreaOneDayGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryStatByAreaOneDayGY_args args = new QueryStatByAreaOneDayGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryStatByAreaOneDayGY_result result = new QueryStatByAreaOneDayGY_result();
      result.Success = iface_.QueryStatByAreaOneDayGY(args.Channel_div, args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryStatByAreaOneDayGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryStatByAreaOneHourGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryStatByAreaOneHourGY_args args = new QueryStatByAreaOneHourGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryStatByAreaOneHourGY_result result = new QueryStatByAreaOneHourGY_result();
      result.Success = iface_.QueryStatByAreaOneHourGY(args.Channel_div, args.Daystr, args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryStatByAreaOneHourGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryVisitorStatGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryVisitorStatGY_args args = new QueryVisitorStatGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryVisitorStatGY_result result = new QueryVisitorStatGY_result();
      result.Success = iface_.QueryVisitorStatGY(args.Uid, args.Day);
      oprot.WriteMessageBegin(new TMessage("QueryVisitorStatGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryVisitorOrbitGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryVisitorOrbitGY_args args = new QueryVisitorOrbitGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryVisitorOrbitGY_result result = new QueryVisitorOrbitGY_result();
      result.Success = iface_.QueryVisitorOrbitGY(args.Uid, args.Day);
      oprot.WriteMessageBegin(new TMessage("QueryVisitorOrbitGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryPieChartGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryPieChartGY_args args = new QueryPieChartGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryPieChartGY_result result = new QueryPieChartGY_result();
      result.Success = iface_.QueryPieChartGY(args.Uid, args.Day, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryPieChartGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void UpLoadCapFaceSyncGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UpLoadCapFaceSyncGY_args args = new UpLoadCapFaceSyncGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UpLoadCapFaceSyncGY_result result = new UpLoadCapFaceSyncGY_result();
      result.Success = iface_.UpLoadCapFaceSyncGY(args.ChannelID, args.Index, args.TimeIn, args.TimeOut, args.Age, args.Gender, args.Fis);
      oprot.WriteMessageBegin(new TMessage("UpLoadCapFaceSyncGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void UpLoadCapFaceASyncGY_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UpLoadCapFaceASyncGY_args args = new UpLoadCapFaceASyncGY_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UpLoadCapFaceASyncGY_result result = new UpLoadCapFaceASyncGY_result();
      result.Success = iface_.UpLoadCapFaceASyncGY(args.ChannelID, args.Index, args.TimeIn, args.TimeOut, args.Age, args.Gender, args.Fis);
      oprot.WriteMessageBegin(new TMessage("UpLoadCapFaceASyncGY", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogSX_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogSX_args args = new QueryCmpLogSX_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogSX_result result = new QueryCmpLogSX_result();
      result.Success = iface_.QueryCmpLogSX(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.NPageFirstNum, args.NPageNum, args.Pflag);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogSX", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogByObjIdSX_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogByObjIdSX_args args = new QueryCmpLogByObjIdSX_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogByObjIdSX_result result = new QueryCmpLogByObjIdSX_result();
      result.Success = iface_.QueryCmpLogByObjIdSX(args.Objid, args.Btime, args.Etime, args.Pflag);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogByObjIdSX", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogCountByObjIdSX_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogCountByObjIdSX_args args = new QueryCmpLogCountByObjIdSX_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogCountByObjIdSX_result result = new QueryCmpLogCountByObjIdSX_result();
      result.Success = iface_.QueryCmpLogCountByObjIdSX(args.Objid, args.Btime, args.Etime, args.Pflag);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogCountByObjIdSX", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogImageHSX_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogImageHSX_args args = new QueryCmpLogImageHSX_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogImageHSX_result result = new QueryCmpLogImageHSX_result();
      result.Success = iface_.QueryCmpLogImageHSX(args.ID, args.Day, args.Pflag);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogImageHSX", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogWidthImgSX_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogWidthImgSX_args args = new QueryCmpLogWidthImgSX_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogWidthImgSX_result result = new QueryCmpLogWidthImgSX_result();
      result.Success = iface_.QueryCmpLogWidthImgSX(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.NPageFirstNum, args.NPageNum, args.Pflag);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogWidthImgSX", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpByCapIdWidthImgHSX_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpByCapIdWidthImgHSX_args args = new QueryCmpByCapIdWidthImgHSX_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpByCapIdWidthImgHSX_result result = new QueryCmpByCapIdWidthImgHSX_result();
      result.Success = iface_.QueryCmpByCapIdWidthImgHSX(args.ID, args.Day, args.Pflag);
      oprot.WriteMessageBegin(new TMessage("QueryCmpByCapIdWidthImgHSX", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpRecordTotalCountHSX_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpRecordTotalCountHSX_args args = new QueryCmpRecordTotalCountHSX_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpRecordTotalCountHSX_result result = new QueryCmpRecordTotalCountHSX_result();
      result.Success = iface_.QueryCmpRecordTotalCountHSX(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.Pflag);
      oprot.WriteMessageBegin(new TMessage("QueryCmpRecordTotalCountHSX", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void UpdateCmpLog_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UpdateCmpLog_args args = new UpdateCmpLog_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UpdateCmpLog_result result = new UpdateCmpLog_result();
      result.Success = iface_.UpdateCmpLog(args.ID, args.Uuid, args.Day, args.Pflag);
      oprot.WriteMessageBegin(new TMessage("UpdateCmpLog", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryThreshold_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryThreshold_args args = new QueryThreshold_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryThreshold_result result = new QueryThreshold_result();
      result.Success = iface_.QueryThreshold();
      oprot.WriteMessageBegin(new TMessage("QueryThreshold", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapLogSX_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapLogSX_args args = new QueryCapLogSX_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapLogSX_result result = new QueryCapLogSX_result();
      result.Success = iface_.QueryCapLogSX(args.Channel, args.Btime, args.Etime, args.NPageFirstNum, args.NPageNum, args.Pflag);
      oprot.WriteMessageBegin(new TMessage("QueryCapLogSX", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapRecordTotalCountHSX_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapRecordTotalCountHSX_args args = new QueryCapRecordTotalCountHSX_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapRecordTotalCountHSX_result result = new QueryCapRecordTotalCountHSX_result();
      result.Success = iface_.QueryCapRecordTotalCountHSX(args.Channel, args.Btime, args.Etime, args.Pflag);
      oprot.WriteMessageBegin(new TMessage("QueryCapRecordTotalCountHSX", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapDetailsHSX_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapDetailsHSX_args args = new QueryCapDetailsHSX_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapDetailsHSX_result result = new QueryCapDetailsHSX_result();
      result.Success = iface_.QueryCapDetailsHSX(args.Id, args.Day, args.Pflag);
      oprot.WriteMessageBegin(new TMessage("QueryCapDetailsHSX", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapLogImageHSX_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapLogImageHSX_args args = new QueryCapLogImageHSX_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapLogImageHSX_result result = new QueryCapLogImageHSX_result();
      result.Success = iface_.QueryCapLogImageHSX(args.ID, args.Day, args.Pflag);
      oprot.WriteMessageBegin(new TMessage("QueryCapLogImageHSX", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapLogSXC_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapLogSXC_args args = new QueryCapLogSXC_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapLogSXC_result result = new QueryCapLogSXC_result();
      result.Success = iface_.QueryCapLogSXC(args.Channel, args.Btime, args.Etime, args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryCapLogSXC", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapRecordTotalCountHSXC_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapRecordTotalCountHSXC_args args = new QueryCapRecordTotalCountHSXC_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapRecordTotalCountHSXC_result result = new QueryCapRecordTotalCountHSXC_result();
      result.Success = iface_.QueryCapRecordTotalCountHSXC(args.Channel, args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryCapRecordTotalCountHSXC", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void TerminalPhoneRegion_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      TerminalPhoneRegion_args args = new TerminalPhoneRegion_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      TerminalPhoneRegion_result result = new TerminalPhoneRegion_result();
      result.Success = iface_.TerminalPhoneRegion(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("TerminalPhoneRegion", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void GetServerTime_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      GetServerTime_args args = new GetServerTime_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      GetServerTime_result result = new GetServerTime_result();
      result.Success = iface_.GetServerTime();
      oprot.WriteMessageBegin(new TMessage("GetServerTime", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void UploadCmpLogFromFrontPH_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UploadCmpLogFromFrontPH_args args = new UploadCmpLogFromFrontPH_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UploadCmpLogFromFrontPH_result result = new UploadCmpLogFromFrontPH_result();
      result.Success = iface_.UploadCmpLogFromFrontPH(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("UploadCmpLogFromFrontPH", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryListFaceObjPH_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryListFaceObjPH_args args = new QueryListFaceObjPH_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryListFaceObjPH_result result = new QueryListFaceObjPH_result();
      result.Success = iface_.QueryListFaceObjPH(args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryListFaceObjPH", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpRecordTotalCountHDS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpRecordTotalCountHDS_args args = new QueryCmpRecordTotalCountHDS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpRecordTotalCountHDS_result result = new QueryCmpRecordTotalCountHDS_result();
      result.Success = iface_.QueryCmpRecordTotalCountHDS(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryCmpRecordTotalCountHDS", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpRecordTotalCountHSXDS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpRecordTotalCountHSXDS_args args = new QueryCmpRecordTotalCountHSXDS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpRecordTotalCountHSXDS_result result = new QueryCmpRecordTotalCountHSXDS_result();
      result.Success = iface_.QueryCmpRecordTotalCountHSXDS(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.Pflag);
      oprot.WriteMessageBegin(new TMessage("QueryCmpRecordTotalCountHSXDS", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogDS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogDS_args args = new QueryCmpLogDS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogDS_result result = new QueryCmpLogDS_result();
      result.Success = iface_.QueryCmpLogDS(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogDS", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogByObjIdDS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogByObjIdDS_args args = new QueryCmpLogByObjIdDS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogByObjIdDS_result result = new QueryCmpLogByObjIdDS_result();
      result.Success = iface_.QueryCmpLogByObjIdDS(args.Objid, args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogByObjIdDS", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogCountByObjIdDS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogCountByObjIdDS_args args = new QueryCmpLogCountByObjIdDS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogCountByObjIdDS_result result = new QueryCmpLogCountByObjIdDS_result();
      result.Success = iface_.QueryCmpLogCountByObjIdDS(args.Objid, args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogCountByObjIdDS", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogSXDS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogSXDS_args args = new QueryCmpLogSXDS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogSXDS_result result = new QueryCmpLogSXDS_result();
      result.Success = iface_.QueryCmpLogSXDS(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.NPageFirstNum, args.NPageNum, args.Pflag);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogSXDS", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogByObjIdSXDS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogByObjIdSXDS_args args = new QueryCmpLogByObjIdSXDS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogByObjIdSXDS_result result = new QueryCmpLogByObjIdSXDS_result();
      result.Success = iface_.QueryCmpLogByObjIdSXDS(args.Objid, args.Btime, args.Etime, args.Pflag);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogByObjIdSXDS", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogCountByObjIdSXDS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogCountByObjIdSXDS_args args = new QueryCmpLogCountByObjIdSXDS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogCountByObjIdSXDS_result result = new QueryCmpLogCountByObjIdSXDS_result();
      result.Success = iface_.QueryCmpLogCountByObjIdSXDS(args.Objid, args.Btime, args.Etime, args.Pflag);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogCountByObjIdSXDS", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void AddChannelLBS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      AddChannelLBS_args args = new AddChannelLBS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      AddChannelLBS_result result = new AddChannelLBS_result();
      result.Success = iface_.AddChannelLBS(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("AddChannelLBS", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ModifyChannelLBS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ModifyChannelLBS_args args = new ModifyChannelLBS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ModifyChannelLBS_result result = new ModifyChannelLBS_result();
      result.Success = iface_.ModifyChannelLBS(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("ModifyChannelLBS", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryAllChannelLBS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryAllChannelLBS_args args = new QueryAllChannelLBS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryAllChannelLBS_result result = new QueryAllChannelLBS_result();
      result.Success = iface_.QueryAllChannelLBS();
      oprot.WriteMessageBegin(new TMessage("QueryAllChannelLBS", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryChannelLBS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryChannelLBS_args args = new QueryChannelLBS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryChannelLBS_result result = new QueryChannelLBS_result();
      result.Success = iface_.QueryChannelLBS(args.ChannelID);
      oprot.WriteMessageBegin(new TMessage("QueryChannelLBS", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryTargetedAnalysis_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryTargetedAnalysis_args args = new QueryTargetedAnalysis_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryTargetedAnalysis_result result = new QueryTargetedAnalysis_result();
      result.Success = iface_.QueryTargetedAnalysis(args.Capid, args.Capimg, args.Threshold, args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryTargetedAnalysis", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryKeyAreaSuspectAnalysis_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryKeyAreaSuspectAnalysis_args args = new QueryKeyAreaSuspectAnalysis_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryKeyAreaSuspectAnalysis_result result = new QueryKeyAreaSuspectAnalysis_result();
      result.Success = iface_.QueryKeyAreaSuspectAnalysis(args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryKeyAreaSuspectAnalysis", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCrowdedAnalysis_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCrowdedAnalysis_args args = new QueryCrowdedAnalysis_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCrowdedAnalysis_result result = new QueryCrowdedAnalysis_result();
      result.Success = iface_.QueryCrowdedAnalysis(args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryCrowdedAnalysis", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryTrackPlayback_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryTrackPlayback_args args = new QueryTrackPlayback_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryTrackPlayback_result result = new QueryTrackPlayback_result();
      result.Success = iface_.QueryTrackPlayback(args.Capid, args.Capimg, args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryTrackPlayback", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryStaticAnalysis_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryStaticAnalysis_args args = new QueryStaticAnalysis_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryStaticAnalysis_result result = new QueryStaticAnalysis_result();
      result.Success = iface_.QueryStaticAnalysis(args.Capid, args.Capimg, args.Btime, args.Etime, args.Threshold, args.Maxcount);
      oprot.WriteMessageBegin(new TMessage("QueryStaticAnalysis", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapRecordTotalCountHLBS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapRecordTotalCountHLBS_args args = new QueryCapRecordTotalCountHLBS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapRecordTotalCountHLBS_result result = new QueryCapRecordTotalCountHLBS_result();
      result.Success = iface_.QueryCapRecordTotalCountHLBS(args.Channel, args.Channel_type, args.Btime, args.Etime);
      oprot.WriteMessageBegin(new TMessage("QueryCapRecordTotalCountHLBS", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCapLogLBS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCapLogLBS_args args = new QueryCapLogLBS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCapLogLBS_result result = new QueryCapLogLBS_result();
      result.Success = iface_.QueryCapLogLBS(args.Channel, args.Channel_type, args.Btime, args.Etime, args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryCapLogLBS", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpRecordTotalCountHDSLBS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpRecordTotalCountHDSLBS_args args = new QueryCmpRecordTotalCountHDSLBS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpRecordTotalCountHDSLBS_result result = new QueryCmpRecordTotalCountHDSLBS_result();
      result.Success = iface_.QueryCmpRecordTotalCountHDSLBS(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.Channel_type);
      oprot.WriteMessageBegin(new TMessage("QueryCmpRecordTotalCountHDSLBS", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogDSLBS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogDSLBS_args args = new QueryCmpLogDSLBS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogDSLBS_result result = new QueryCmpLogDSLBS_result();
      result.Success = iface_.QueryCmpLogDSLBS(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.Channel_type, args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogDSLBS", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpRecordTotalCountHDSLBSSX_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpRecordTotalCountHDSLBSSX_args args = new QueryCmpRecordTotalCountHDSLBSSX_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpRecordTotalCountHDSLBSSX_result result = new QueryCmpRecordTotalCountHDSLBSSX_result();
      result.Success = iface_.QueryCmpRecordTotalCountHDSLBSSX(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.Channel_type, args.Pflag);
      oprot.WriteMessageBegin(new TMessage("QueryCmpRecordTotalCountHDSLBSSX", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogDSLBSSX_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogDSLBSSX_args args = new QueryCmpLogDSLBSSX_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogDSLBSSX_result result = new QueryCmpLogDSLBSSX_result();
      result.Success = iface_.QueryCmpLogDSLBSSX(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.Channel_type, args.Pflag, args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogDSLBSSX", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryLastRecordInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryLastRecordInfo_args args = new QueryLastRecordInfo_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryLastRecordInfo_result result = new QueryLastRecordInfo_result();
      result.Success = iface_.QueryLastRecordInfo();
      oprot.WriteMessageBegin(new TMessage("QueryLastRecordInfo", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryRealtimeCapInfoQ_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryRealtimeCapInfoQ_args args = new QueryRealtimeCapInfoQ_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryRealtimeCapInfoQ_result result = new QueryRealtimeCapInfoQ_result();
      result.Success = iface_.QueryRealtimeCapInfoQ(args.Time);
      oprot.WriteMessageBegin(new TMessage("QueryRealtimeCapInfoQ", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void UpdateRealtimeCmpQ_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UpdateRealtimeCmpQ_args args = new UpdateRealtimeCmpQ_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UpdateRealtimeCmpQ_result result = new UpdateRealtimeCmpQ_result();
      result.Success = iface_.UpdateRealtimeCmpQ(args.Capid, args.Qflag);
      oprot.WriteMessageBegin(new TMessage("UpdateRealtimeCmpQ", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryRealtimeCmpInfoQ_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryRealtimeCmpInfoQ_args args = new QueryRealtimeCmpInfoQ_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryRealtimeCmpInfoQ_result result = new QueryRealtimeCmpInfoQ_result();
      result.Success = iface_.QueryRealtimeCmpInfoQ(args.Time, args.Qflag);
      oprot.WriteMessageBegin(new TMessage("QueryRealtimeCmpInfoQ", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryRealtimeCapInfoQLBS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryRealtimeCapInfoQLBS_args args = new QueryRealtimeCapInfoQLBS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryRealtimeCapInfoQLBS_result result = new QueryRealtimeCapInfoQLBS_result();
      result.Success = iface_.QueryRealtimeCapInfoQLBS(args.Time);
      oprot.WriteMessageBegin(new TMessage("QueryRealtimeCapInfoQLBS", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryRealtimeCmpInfoQLBS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryRealtimeCmpInfoQLBS_args args = new QueryRealtimeCmpInfoQLBS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryRealtimeCmpInfoQLBS_result result = new QueryRealtimeCmpInfoQLBS_result();
      result.Success = iface_.QueryRealtimeCmpInfoQLBS(args.Time, args.Qflag);
      oprot.WriteMessageBegin(new TMessage("QueryRealtimeCmpInfoQLBS", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void UpLoadCapFaceMoblie_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UpLoadCapFaceMoblie_args args = new UpLoadCapFaceMoblie_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UpLoadCapFaceMoblie_result result = new UpLoadCapFaceMoblie_result();
      result.Success = iface_.UpLoadCapFaceMoblie(args.ChannelID, args.Img, args.Latitude, args.Longitude, args.Address, args.Dtm);
      oprot.WriteMessageBegin(new TMessage("UpLoadCapFaceMoblie", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpRecordLBSTotalCountM_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpRecordLBSTotalCountM_args args = new QueryCmpRecordLBSTotalCountM_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpRecordLBSTotalCountM_result result = new QueryCmpRecordLBSTotalCountM_result();
      result.Success = iface_.QueryCmpRecordLBSTotalCountM(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.Channel_type, args.Qflag);
      oprot.WriteMessageBegin(new TMessage("QueryCmpRecordLBSTotalCountM", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryCmpLogDSLBSM_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryCmpLogDSLBSM_args args = new QueryCmpLogDSLBSM_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryCmpLogDSLBSM_result result = new QueryCmpLogDSLBSM_result();
      result.Success = iface_.QueryCmpLogDSLBSM(args.Channel, args.Name, args.Type, args.Gender, args.Bage, args.Eage, args.Btime, args.Etime, args.Channel_type, args.Qflag, args.NPageFirstNum, args.NPageNum);
      oprot.WriteMessageBegin(new TMessage("QueryCmpLogDSLBSM", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpLoadCapFace_args : TBase
  {
    private FaceInfo _fi;
    private int _nFeaLen;
    private byte[] _Feature;
    private int _nImgLen;
    private byte[] _Image;

    public FaceInfo Fi
    {
      get
      {
        return _fi;
      }
      set
      {
        __isset.fi = true;
        this._fi = value;
      }
    }

    public int NFeaLen
    {
      get
      {
        return _nFeaLen;
      }
      set
      {
        __isset.nFeaLen = true;
        this._nFeaLen = value;
      }
    }

    public byte[] Feature
    {
      get
      {
        return _Feature;
      }
      set
      {
        __isset.Feature = true;
        this._Feature = value;
      }
    }

    public int NImgLen
    {
      get
      {
        return _nImgLen;
      }
      set
      {
        __isset.nImgLen = true;
        this._nImgLen = value;
      }
    }

    public byte[] Image
    {
      get
      {
        return _Image;
      }
      set
      {
        __isset.Image = true;
        this._Image = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool fi;
      public bool nFeaLen;
      public bool Feature;
      public bool nImgLen;
      public bool Image;
    }

    public UpLoadCapFace_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Fi = new FaceInfo();
                Fi.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                NFeaLen = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Feature = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                NImgLen = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Image = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpLoadCapFace_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Fi != null && __isset.fi) {
          field.Name = "fi";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Fi.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.nFeaLen) {
          field.Name = "nFeaLen";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NFeaLen);
          oprot.WriteFieldEnd();
        }
        if (Feature != null && __isset.Feature) {
          field.Name = "Feature";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Feature);
          oprot.WriteFieldEnd();
        }
        if (__isset.nImgLen) {
          field.Name = "nImgLen";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NImgLen);
          oprot.WriteFieldEnd();
        }
        if (Image != null && __isset.Image) {
          field.Name = "Image";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Image);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpLoadCapFace_args(");
      bool __first = true;
      if (Fi != null && __isset.fi) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Fi: ");
        __sb.Append(Fi== null ? "<null>" : Fi.ToString());
      }
      if (__isset.nFeaLen) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NFeaLen: ");
        __sb.Append(NFeaLen);
      }
      if (Feature != null && __isset.Feature) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Feature: ");
        __sb.Append(Feature);
      }
      if (__isset.nImgLen) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NImgLen: ");
        __sb.Append(NImgLen);
      }
      if (Image != null && __isset.Image) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Image: ");
        __sb.Append(Image);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpLoadCapFace_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UpLoadCapFace_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpLoadCapFace_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpLoadCapFace_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpLoadCapFace1_args : TBase
  {
    private string _ChannelID;
    private int _index;
    private long _timeIn;
    private long _timeOut;
    private int _age;
    private int _gender;
    private List<FaceInfo> _fis;

    public string ChannelID
    {
      get
      {
        return _ChannelID;
      }
      set
      {
        __isset.ChannelID = true;
        this._ChannelID = value;
      }
    }

    public int Index
    {
      get
      {
        return _index;
      }
      set
      {
        __isset.index = true;
        this._index = value;
      }
    }

    public long TimeIn
    {
      get
      {
        return _timeIn;
      }
      set
      {
        __isset.timeIn = true;
        this._timeIn = value;
      }
    }

    public long TimeOut
    {
      get
      {
        return _timeOut;
      }
      set
      {
        __isset.timeOut = true;
        this._timeOut = value;
      }
    }

    public int Age
    {
      get
      {
        return _age;
      }
      set
      {
        __isset.age = true;
        this._age = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public List<FaceInfo> Fis
    {
      get
      {
        return _fis;
      }
      set
      {
        __isset.fis = true;
        this._fis = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ChannelID;
      public bool index;
      public bool timeIn;
      public bool timeOut;
      public bool age;
      public bool gender;
      public bool fis;
    }

    public UpLoadCapFace1_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Index = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                TimeIn = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                TimeOut = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Age = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.List) {
                {
                  Fis = new List<FaceInfo>();
                  TList _list144 = iprot.ReadListBegin();
                  for( int _i145 = 0; _i145 < _list144.Count; ++_i145)
                  {
                    FaceInfo _elem146;
                    _elem146 = new FaceInfo();
                    _elem146.Read(iprot);
                    Fis.Add(_elem146);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpLoadCapFace1_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.ChannelID) {
          field.Name = "ChannelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        if (__isset.index) {
          field.Name = "index";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Index);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeIn) {
          field.Name = "timeIn";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TimeIn);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOut) {
          field.Name = "timeOut";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TimeOut);
          oprot.WriteFieldEnd();
        }
        if (__isset.age) {
          field.Name = "age";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Age);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (Fis != null && __isset.fis) {
          field.Name = "fis";
          field.Type = TType.List;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Fis.Count));
            foreach (FaceInfo _iter147 in Fis)
            {
              _iter147.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpLoadCapFace1_args(");
      bool __first = true;
      if (ChannelID != null && __isset.ChannelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      if (__isset.index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Index: ");
        __sb.Append(Index);
      }
      if (__isset.timeIn) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeIn: ");
        __sb.Append(TimeIn);
      }
      if (__isset.timeOut) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeOut: ");
        __sb.Append(TimeOut);
      }
      if (__isset.age) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Age: ");
        __sb.Append(Age);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (Fis != null && __isset.fis) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Fis: ");
        __sb.Append(Fis);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpLoadCapFace1_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UpLoadCapFace1_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpLoadCapFace1_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpLoadCapFace1_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class OpenChannel_args : TBase
  {
    private string _channelID;

    public string ChannelID
    {
      get
      {
        return _channelID;
      }
      set
      {
        __isset.channelID = true;
        this._channelID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelID;
    }

    public OpenChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("OpenChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.channelID) {
          field.Name = "channelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("OpenChannel_args(");
      bool __first = true;
      if (ChannelID != null && __isset.channelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class OpenChannel_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public OpenChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("OpenChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("OpenChannel_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CloseChannel_args : TBase
  {
    private string _channelID;

    public string ChannelID
    {
      get
      {
        return _channelID;
      }
      set
      {
        __isset.channelID = true;
        this._channelID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelID;
    }

    public CloseChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CloseChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.channelID) {
          field.Name = "channelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CloseChannel_args(");
      bool __first = true;
      if (ChannelID != null && __isset.channelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CloseChannel_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public CloseChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CloseChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CloseChannel_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class OpenAllChannel_args : TBase
  {

    public OpenAllChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("OpenAllChannel_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("OpenAllChannel_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class OpenAllChannel_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public OpenAllChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list148 = iprot.ReadListBegin();
                  for( int _i149 = 0; _i149 < _list148.Count; ++_i149)
                  {
                    string _elem150;
                    _elem150 = iprot.ReadString();
                    Success.Add(_elem150);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("OpenAllChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter151 in Success)
              {
                oprot.WriteString(_iter151);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("OpenAllChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CloseAllChannel_args : TBase
  {

    public CloseAllChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CloseAllChannel_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CloseAllChannel_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CloseAllChannel_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public CloseAllChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list152 = iprot.ReadListBegin();
                  for( int _i153 = 0; _i153 < _list152.Count; ++_i153)
                  {
                    string _elem154;
                    _elem154 = iprot.ReadString();
                    Success.Add(_elem154);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CloseAllChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter155 in Success)
              {
                oprot.WriteString(_iter155);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CloseAllChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddChannel_args : TBase
  {
    private ChannelCfg _cfg;

    public ChannelCfg Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public AddChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new ChannelCfg();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddChannel_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddChannel_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public AddChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddChannel_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelChannel_args : TBase
  {
    private string _channelID;

    public string ChannelID
    {
      get
      {
        return _channelID;
      }
      set
      {
        __isset.channelID = true;
        this._channelID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelID;
    }

    public DelChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.channelID) {
          field.Name = "channelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelChannel_args(");
      bool __first = true;
      if (ChannelID != null && __isset.channelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelChannel_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public DelChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelChannel_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModifyChannel_args : TBase
  {
    private ChannelCfg _cfg;

    public ChannelCfg Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public ModifyChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new ChannelCfg();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModifyChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModifyChannel_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModifyChannel_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ModifyChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModifyChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModifyChannel_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryAllChannel_args : TBase
  {

    public QueryAllChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryAllChannel_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryAllChannel_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryAllChannel_result : TBase
  {
    private List<ChannelCfg> _success;

    public List<ChannelCfg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryAllChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ChannelCfg>();
                  TList _list156 = iprot.ReadListBegin();
                  for( int _i157 = 0; _i157 < _list156.Count; ++_i157)
                  {
                    ChannelCfg _elem158;
                    _elem158 = new ChannelCfg();
                    _elem158.Read(iprot);
                    Success.Add(_elem158);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryAllChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ChannelCfg _iter159 in Success)
              {
                _iter159.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryAllChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryChannel_args : TBase
  {
    private string _channelID;

    public string ChannelID
    {
      get
      {
        return _channelID;
      }
      set
      {
        __isset.channelID = true;
        this._channelID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelID;
    }

    public QueryChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.channelID) {
          field.Name = "channelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryChannel_args(");
      bool __first = true;
      if (ChannelID != null && __isset.channelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryChannel_result : TBase
  {
    private ChannelCfg _success;

    public ChannelCfg Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ChannelCfg();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapDetails_args : TBase
  {
    private string _id;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public QueryCapDetails_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapDetails_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapDetails_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapDetails_result : TBase
  {
    private List<CapObjImg> _success;

    public List<CapObjImg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapDetails_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CapObjImg>();
                  TList _list160 = iprot.ReadListBegin();
                  for( int _i161 = 0; _i161 < _list160.Count; ++_i161)
                  {
                    CapObjImg _elem162;
                    _elem162 = new CapObjImg();
                    _elem162.Read(iprot);
                    Success.Add(_elem162);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapDetails_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CapObjImg _iter163 in Success)
              {
                _iter163.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapDetails_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLog_args : TBase
  {
    private string _channel;
    private long _btime;
    private long _etime;
    private int _nPageFirstNum;
    private int _nPageNum;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool btime;
      public bool etime;
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryCapLog_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLog_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLog_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLog_result : TBase
  {
    private List<CapFaceLog> _success;

    public List<CapFaceLog> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapLog_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CapFaceLog>();
                  TList _list164 = iprot.ReadListBegin();
                  for( int _i165 = 0; _i165 < _list164.Count; ++_i165)
                  {
                    CapFaceLog _elem166;
                    _elem166 = new CapFaceLog();
                    _elem166.Read(iprot);
                    Success.Add(_elem166);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLog_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CapFaceLog _iter167 in Success)
              {
                _iter167.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLog_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogImage_args : TBase
  {
    private string _ID;

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
    }

    public QueryCapLogImage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogImage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogImage_args(");
      bool __first = true;
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogImage_result : TBase
  {
    private List<byte[]> _success;

    public List<byte[]> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapLogImage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<byte[]>();
                  TList _list168 = iprot.ReadListBegin();
                  for( int _i169 = 0; _i169 < _list168.Count; ++_i169)
                  {
                    byte[] _elem170;
                    _elem170 = iprot.ReadBinary();
                    Success.Add(_elem170);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogImage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (byte[] _iter171 in Success)
              {
                oprot.WriteBinary(_iter171);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogImage_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapRecordTotalCount_args : TBase
  {
    private string _channel;
    private long _btime;
    private long _etime;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool btime;
      public bool etime;
    }

    public QueryCapRecordTotalCount_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapRecordTotalCount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapRecordTotalCount_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapRecordTotalCount_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapRecordTotalCount_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapRecordTotalCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapRecordTotalCount_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogWithImg_args : TBase
  {
    private string _channel;
    private long _btime;
    private long _etime;
    private int _nPageFirstNum;
    private int _nPageNum;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool btime;
      public bool etime;
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryCapLogWithImg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogWithImg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogWithImg_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogWithImg_result : TBase
  {
    private List<CapFaceLogWithImg> _success;

    public List<CapFaceLogWithImg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapLogWithImg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CapFaceLogWithImg>();
                  TList _list172 = iprot.ReadListBegin();
                  for( int _i173 = 0; _i173 < _list172.Count; ++_i173)
                  {
                    CapFaceLogWithImg _elem174;
                    _elem174 = new CapFaceLogWithImg();
                    _elem174.Read(iprot);
                    Success.Add(_elem174);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogWithImg_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CapFaceLogWithImg _iter175 in Success)
              {
                _iter175.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogWithImg_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLog_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private int _nPageFirstNum;
    private int _nPageNum;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryCmpLog_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLog_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLog_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLog_result : TBase
  {
    private List<CmpFaceLog> _success;

    public List<CmpFaceLog> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLog_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLog>();
                  TList _list176 = iprot.ReadListBegin();
                  for( int _i177 = 0; _i177 < _list176.Count; ++_i177)
                  {
                    CmpFaceLog _elem178;
                    _elem178 = new CmpFaceLog();
                    _elem178.Read(iprot);
                    Success.Add(_elem178);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLog_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLog _iter179 in Success)
              {
                _iter179.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLog_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogAndCount_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private int _nPageFirstNum;
    private int _nPageNum;
    private int _pflag;
    private int _queryType;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }

    public int Pflag
    {
      get
      {
        return _pflag;
      }
      set
      {
        __isset.pflag = true;
        this._pflag = value;
      }
    }

    public int QueryType
    {
      get
      {
        return _queryType;
      }
      set
      {
        __isset.queryType = true;
        this._queryType = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool nPageFirstNum;
      public bool nPageNum;
      public bool pflag;
      public bool queryType;
    }

    public QueryCmpLogAndCount_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                Pflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I32) {
                QueryType = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogAndCount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.pflag) {
          field.Name = "pflag";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Pflag);
          oprot.WriteFieldEnd();
        }
        if (__isset.queryType) {
          field.Name = "queryType";
          field.Type = TType.I32;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(QueryType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogAndCount_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      if (__isset.pflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pflag: ");
        __sb.Append(Pflag);
      }
      if (__isset.queryType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("QueryType: ");
        __sb.Append(QueryType);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogAndCount_result : TBase
  {
    private SCountInfoAndCmpFaceLog _success;

    public SCountInfoAndCmpFaceLog Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogAndCount_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SCountInfoAndCmpFaceLog();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogAndCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogAndCount_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogByObjId_args : TBase
  {
    private string _objid;
    private long _btime;
    private long _etime;

    public string Objid
    {
      get
      {
        return _objid;
      }
      set
      {
        __isset.objid = true;
        this._objid = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool objid;
      public bool btime;
      public bool etime;
    }

    public QueryCmpLogByObjId_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Objid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogByObjId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Objid != null && __isset.objid) {
          field.Name = "objid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Objid);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogByObjId_args(");
      bool __first = true;
      if (Objid != null && __isset.objid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Objid: ");
        __sb.Append(Objid);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogByObjId_result : TBase
  {
    private List<CmpFaceLog> _success;

    public List<CmpFaceLog> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogByObjId_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLog>();
                  TList _list180 = iprot.ReadListBegin();
                  for( int _i181 = 0; _i181 < _list180.Count; ++_i181)
                  {
                    CmpFaceLog _elem182;
                    _elem182 = new CmpFaceLog();
                    _elem182.Read(iprot);
                    Success.Add(_elem182);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogByObjId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLog _iter183 in Success)
              {
                _iter183.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogByObjId_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogCountByObjId_args : TBase
  {
    private string _objid;
    private long _btime;
    private long _etime;

    public string Objid
    {
      get
      {
        return _objid;
      }
      set
      {
        __isset.objid = true;
        this._objid = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool objid;
      public bool btime;
      public bool etime;
    }

    public QueryCmpLogCountByObjId_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Objid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogCountByObjId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Objid != null && __isset.objid) {
          field.Name = "objid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Objid);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogCountByObjId_args(");
      bool __first = true;
      if (Objid != null && __isset.objid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Objid: ");
        __sb.Append(Objid);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogCountByObjId_result : TBase
  {
    private List<SCountInfo> _success;

    public List<SCountInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogCountByObjId_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfo>();
                  TList _list184 = iprot.ReadListBegin();
                  for( int _i185 = 0; _i185 < _list184.Count; ++_i185)
                  {
                    SCountInfo _elem186;
                    _elem186 = new SCountInfo();
                    _elem186.Read(iprot);
                    Success.Add(_elem186);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogCountByObjId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfo _iter187 in Success)
              {
                _iter187.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogCountByObjId_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogImage_args : TBase
  {
    private string _ID;

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
    }

    public QueryCmpLogImage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogImage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogImage_args(");
      bool __first = true;
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogImage_result : TBase
  {
    private List<byte[]> _success;

    public List<byte[]> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogImage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<byte[]>();
                  TList _list188 = iprot.ReadListBegin();
                  for( int _i189 = 0; _i189 < _list188.Count; ++_i189)
                  {
                    byte[] _elem190;
                    _elem190 = iprot.ReadBinary();
                    Success.Add(_elem190);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogImage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (byte[] _iter191 in Success)
              {
                oprot.WriteBinary(_iter191);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogImage_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogWidthImg_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private int _nPageFirstNum;
    private int _nPageNum;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryCmpLogWidthImg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogWidthImg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogWidthImg_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogWidthImg_result : TBase
  {
    private List<CmpFaceLogWidthImg> _success;

    public List<CmpFaceLogWidthImg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogWidthImg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLogWidthImg>();
                  TList _list192 = iprot.ReadListBegin();
                  for( int _i193 = 0; _i193 < _list192.Count; ++_i193)
                  {
                    CmpFaceLogWidthImg _elem194;
                    _elem194 = new CmpFaceLogWidthImg();
                    _elem194.Read(iprot);
                    Success.Add(_elem194);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogWidthImg_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLogWidthImg _iter195 in Success)
              {
                _iter195.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogWidthImg_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpByCapIdWidthImg_args : TBase
  {
    private string _ID;

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
    }

    public QueryCmpByCapIdWidthImg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpByCapIdWidthImg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpByCapIdWidthImg_args(");
      bool __first = true;
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpByCapIdWidthImg_result : TBase
  {
    private List<CmpFaceLogWidthImg> _success;

    public List<CmpFaceLogWidthImg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpByCapIdWidthImg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLogWidthImg>();
                  TList _list196 = iprot.ReadListBegin();
                  for( int _i197 = 0; _i197 < _list196.Count; ++_i197)
                  {
                    CmpFaceLogWidthImg _elem198;
                    _elem198 = new CmpFaceLogWidthImg();
                    _elem198.Read(iprot);
                    Success.Add(_elem198);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpByCapIdWidthImg_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLogWidthImg _iter199 in Success)
              {
                _iter199.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpByCapIdWidthImg_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpRecordTotalCount_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
    }

    public QueryCmpRecordTotalCount_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpRecordTotalCount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpRecordTotalCount_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpRecordTotalCount_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpRecordTotalCount_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpRecordTotalCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpRecordTotalCount_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CompareImg_args : TBase
  {
    private byte[] _image;
    private int _nThreshold;
    private int _nMaxCount;

    public byte[] Image
    {
      get
      {
        return _image;
      }
      set
      {
        __isset.image = true;
        this._image = value;
      }
    }

    public int NThreshold
    {
      get
      {
        return _nThreshold;
      }
      set
      {
        __isset.nThreshold = true;
        this._nThreshold = value;
      }
    }

    public int NMaxCount
    {
      get
      {
        return _nMaxCount;
      }
      set
      {
        __isset.nMaxCount = true;
        this._nMaxCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool image;
      public bool nThreshold;
      public bool nMaxCount;
    }

    public CompareImg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Image = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                NThreshold = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                NMaxCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CompareImg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Image != null && __isset.image) {
          field.Name = "image";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Image);
          oprot.WriteFieldEnd();
        }
        if (__isset.nThreshold) {
          field.Name = "nThreshold";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NThreshold);
          oprot.WriteFieldEnd();
        }
        if (__isset.nMaxCount) {
          field.Name = "nMaxCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NMaxCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CompareImg_args(");
      bool __first = true;
      if (Image != null && __isset.image) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Image: ");
        __sb.Append(Image);
      }
      if (__isset.nThreshold) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NThreshold: ");
        __sb.Append(NThreshold);
      }
      if (__isset.nMaxCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NMaxCount: ");
        __sb.Append(NMaxCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CompareImg_result : TBase
  {
    private List<CompareImgResult> _success;

    public List<CompareImgResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public CompareImg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CompareImgResult>();
                  TList _list200 = iprot.ReadListBegin();
                  for( int _i201 = 0; _i201 < _list200.Count; ++_i201)
                  {
                    CompareImgResult _elem202;
                    _elem202 = new CompareImgResult();
                    _elem202.Read(iprot);
                    Success.Add(_elem202);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CompareImg_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CompareImgResult _iter203 in Success)
              {
                _iter203.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CompareImg_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryFaceObj_args : TBase
  {
    private string _id;
    private string _name;
    private int _bage;
    private int _eage;
    private int _gender;
    private int _type;
    private long _btime;
    private long _etime;
    private int _nPageFirstNum;
    private int _nPageNum;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool name;
      public bool bage;
      public bool eage;
      public bool gender;
      public bool type;
      public bool btime;
      public bool etime;
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryFaceObj_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryFaceObj_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryFaceObj_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryFaceObj_result : TBase
  {
    private List<FaceObj> _success;

    public List<FaceObj> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryFaceObj_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<FaceObj>();
                  TList _list204 = iprot.ReadListBegin();
                  for( int _i205 = 0; _i205 < _list204.Count; ++_i205)
                  {
                    FaceObj _elem206;
                    _elem206 = new FaceObj();
                    _elem206.Read(iprot);
                    Success.Add(_elem206);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryFaceObj_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (FaceObj _iter207 in Success)
              {
                _iter207.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryFaceObj_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryFaceObjByImg_args : TBase
  {
    private byte[] _image;
    private int _nThreshold;
    private int _nMaxCount;

    public byte[] Image
    {
      get
      {
        return _image;
      }
      set
      {
        __isset.image = true;
        this._image = value;
      }
    }

    public int NThreshold
    {
      get
      {
        return _nThreshold;
      }
      set
      {
        __isset.nThreshold = true;
        this._nThreshold = value;
      }
    }

    public int NMaxCount
    {
      get
      {
        return _nMaxCount;
      }
      set
      {
        __isset.nMaxCount = true;
        this._nMaxCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool image;
      public bool nThreshold;
      public bool nMaxCount;
    }

    public QueryFaceObjByImg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Image = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                NThreshold = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                NMaxCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryFaceObjByImg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Image != null && __isset.image) {
          field.Name = "image";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Image);
          oprot.WriteFieldEnd();
        }
        if (__isset.nThreshold) {
          field.Name = "nThreshold";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NThreshold);
          oprot.WriteFieldEnd();
        }
        if (__isset.nMaxCount) {
          field.Name = "nMaxCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NMaxCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryFaceObjByImg_args(");
      bool __first = true;
      if (Image != null && __isset.image) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Image: ");
        __sb.Append(Image);
      }
      if (__isset.nThreshold) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NThreshold: ");
        __sb.Append(NThreshold);
      }
      if (__isset.nMaxCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NMaxCount: ");
        __sb.Append(NMaxCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryFaceObjByImg_result : TBase
  {
    private List<FaceObj> _success;

    public List<FaceObj> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryFaceObjByImg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<FaceObj>();
                  TList _list208 = iprot.ReadListBegin();
                  for( int _i209 = 0; _i209 < _list208.Count; ++_i209)
                  {
                    FaceObj _elem210;
                    _elem210 = new FaceObj();
                    _elem210.Read(iprot);
                    Success.Add(_elem210);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryFaceObjByImg_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (FaceObj _iter211 in Success)
              {
                _iter211.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryFaceObjByImg_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryFaceObjTotalCount_args : TBase
  {
    private string _id;
    private string _name;
    private int _bage;
    private int _eage;
    private int _gender;
    private int _type;
    private long _btime;
    private long _etime;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool name;
      public bool bage;
      public bool eage;
      public bool gender;
      public bool type;
      public bool btime;
      public bool etime;
    }

    public QueryFaceObjTotalCount_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryFaceObjTotalCount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryFaceObjTotalCount_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryFaceObjTotalCount_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryFaceObjTotalCount_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryFaceObjTotalCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryFaceObjTotalCount_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ChangeTemplateImark_args : TBase
  {
    private string _uuid;
    private int _imark;

    public string Uuid
    {
      get
      {
        return _uuid;
      }
      set
      {
        __isset.uuid = true;
        this._uuid = value;
      }
    }

    public int Imark
    {
      get
      {
        return _imark;
      }
      set
      {
        __isset.imark = true;
        this._imark = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uuid;
      public bool imark;
    }

    public ChangeTemplateImark_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Uuid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Imark = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ChangeTemplateImark_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Uuid != null && __isset.uuid) {
          field.Name = "uuid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uuid);
          oprot.WriteFieldEnd();
        }
        if (__isset.imark) {
          field.Name = "imark";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Imark);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ChangeTemplateImark_args(");
      bool __first = true;
      if (Uuid != null && __isset.uuid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uuid: ");
        __sb.Append(Uuid);
      }
      if (__isset.imark) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Imark: ");
        __sb.Append(Imark);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ChangeTemplateImark_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ChangeTemplateImark_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ChangeTemplateImark_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ChangeTemplateImark_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddFaceObj_args : TBase
  {
    private FaceObj _obj;

    public FaceObj Obj
    {
      get
      {
        return _obj;
      }
      set
      {
        __isset.obj = true;
        this._obj = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool obj;
    }

    public AddFaceObj_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Obj = new FaceObj();
                Obj.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddFaceObj_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Obj != null && __isset.obj) {
          field.Name = "obj";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Obj.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddFaceObj_args(");
      bool __first = true;
      if (Obj != null && __isset.obj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Obj: ");
        __sb.Append(Obj== null ? "<null>" : Obj.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddFaceObj_result : TBase
  {
    private List<ErrorInfo> _success;

    public List<ErrorInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public AddFaceObj_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ErrorInfo>();
                  TList _list212 = iprot.ReadListBegin();
                  for( int _i213 = 0; _i213 < _list212.Count; ++_i213)
                  {
                    ErrorInfo _elem214;
                    _elem214 = new ErrorInfo();
                    _elem214.Read(iprot);
                    Success.Add(_elem214);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddFaceObj_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ErrorInfo _iter215 in Success)
              {
                _iter215.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddFaceObj_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelFaceObj_args : TBase
  {
    private string _ID;

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
    }

    public DelFaceObj_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelFaceObj_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelFaceObj_args(");
      bool __first = true;
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelFaceObj_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public DelFaceObj_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelFaceObj_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelFaceObj_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModifyFaceObj_args : TBase
  {
    private string _id;
    private FaceObj _obj;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public FaceObj Obj
    {
      get
      {
        return _obj;
      }
      set
      {
        __isset.obj = true;
        this._obj = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool obj;
    }

    public ModifyFaceObj_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Obj = new FaceObj();
                Obj.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModifyFaceObj_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (Obj != null && __isset.obj) {
          field.Name = "obj";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Obj.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModifyFaceObj_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Obj != null && __isset.obj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Obj: ");
        __sb.Append(Obj== null ? "<null>" : Obj.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModifyFaceObj_result : TBase
  {
    private List<ErrorInfo> _success;

    public List<ErrorInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ModifyFaceObj_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ErrorInfo>();
                  TList _list216 = iprot.ReadListBegin();
                  for( int _i217 = 0; _i217 < _list216.Count; ++_i217)
                  {
                    ErrorInfo _elem218;
                    _elem218 = new ErrorInfo();
                    _elem218.Read(iprot);
                    Success.Add(_elem218);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModifyFaceObj_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ErrorInfo _iter219 in Success)
              {
                _iter219.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModifyFaceObj_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefGender_args : TBase
  {

    public QueryDefGender_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefGender_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefGender_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefGender_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryDefGender_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list220 = iprot.ReadListBegin();
                  for( int _i221 = 0; _i221 < _list220.Count; ++_i221)
                  {
                    string _elem222;
                    _elem222 = iprot.ReadString();
                    Success.Add(_elem222);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefGender_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter223 in Success)
              {
                oprot.WriteString(_iter223);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefGender_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefFaceObjType_args : TBase
  {

    public QueryDefFaceObjType_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefFaceObjType_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefFaceObjType_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefFaceObjType_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryDefFaceObjType_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list224 = iprot.ReadListBegin();
                  for( int _i225 = 0; _i225 < _list224.Count; ++_i225)
                  {
                    string _elem226;
                    _elem226 = iprot.ReadString();
                    Success.Add(_elem226);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefFaceObjType_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter227 in Success)
              {
                oprot.WriteString(_iter227);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefFaceObjType_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefChannelType_args : TBase
  {

    public QueryDefChannelType_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefChannelType_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefChannelType_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefChannelType_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryDefChannelType_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list228 = iprot.ReadListBegin();
                  for( int _i229 = 0; _i229 < _list228.Count; ++_i229)
                  {
                    string _elem230;
                    _elem230 = iprot.ReadString();
                    Success.Add(_elem230);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefChannelType_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter231 in Success)
              {
                oprot.WriteString(_iter231);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefChannelType_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefCameraType_args : TBase
  {

    public QueryDefCameraType_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefCameraType_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefCameraType_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefCameraType_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryDefCameraType_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list232 = iprot.ReadListBegin();
                  for( int _i233 = 0; _i233 < _list232.Count; ++_i233)
                  {
                    string _elem234;
                    _elem234 = iprot.ReadString();
                    Success.Add(_elem234);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefCameraType_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter235 in Success)
              {
                oprot.WriteString(_iter235);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefCameraType_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HearBeat_args : TBase
  {

    public HearBeat_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("HearBeat_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("HearBeat_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HearBeat_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public HearBeat_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("HearBeat_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("HearBeat_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryChannelByIp_args : TBase
  {
    private string _capip;

    public string Capip
    {
      get
      {
        return _capip;
      }
      set
      {
        __isset.capip = true;
        this._capip = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool capip;
    }

    public QueryChannelByIp_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Capip = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryChannelByIp_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Capip != null && __isset.capip) {
          field.Name = "capip";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Capip);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryChannelByIp_args(");
      bool __first = true;
      if (Capip != null && __isset.capip) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Capip: ");
        __sb.Append(Capip);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryChannelByIp_result : TBase
  {
    private List<ChannelCfg> _success;

    public List<ChannelCfg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryChannelByIp_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ChannelCfg>();
                  TList _list236 = iprot.ReadListBegin();
                  for( int _i237 = 0; _i237 < _list236.Count; ++_i237)
                  {
                    ChannelCfg _elem238;
                    _elem238 = new ChannelCfg();
                    _elem238.Read(iprot);
                    Success.Add(_elem238);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryChannelByIp_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ChannelCfg _iter239 in Success)
              {
                _iter239.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryChannelByIp_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListFaceObjNum_args : TBase
  {

    public QueryListFaceObjNum_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListFaceObjNum_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListFaceObjNum_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListFaceObjNum_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryListFaceObjNum_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListFaceObjNum_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListFaceObjNum_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListFaceObj_args : TBase
  {
    private int _nPageFirstNum;
    private int _nPageNum;

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryListFaceObj_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListFaceObj_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListFaceObj_args(");
      bool __first = true;
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListFaceObj_result : TBase
  {
    private List<FaceObjTemplate> _success;

    public List<FaceObjTemplate> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryListFaceObj_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<FaceObjTemplate>();
                  TList _list240 = iprot.ReadListBegin();
                  for( int _i241 = 0; _i241 < _list240.Count; ++_i241)
                  {
                    FaceObjTemplate _elem242;
                    _elem242 = new FaceObjTemplate();
                    _elem242.Read(iprot);
                    Success.Add(_elem242);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListFaceObj_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (FaceObjTemplate _iter243 in Success)
              {
                _iter243.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListFaceObj_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SetCMPthreshold_args : TBase
  {
    private int _threshold;

    public int Threshold
    {
      get
      {
        return _threshold;
      }
      set
      {
        __isset.threshold = true;
        this._threshold = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool threshold;
    }

    public SetCMPthreshold_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Threshold = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SetCMPthreshold_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.threshold) {
          field.Name = "threshold";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Threshold);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SetCMPthreshold_args(");
      bool __first = true;
      if (__isset.threshold) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Threshold: ");
        __sb.Append(Threshold);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SetCMPthreshold_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public SetCMPthreshold_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SetCMPthreshold_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SetCMPthreshold_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetClientIPList_args : TBase
  {

    public GetClientIPList_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("GetClientIPList_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GetClientIPList_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetClientIPList_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public GetClientIPList_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list244 = iprot.ReadListBegin();
                  for( int _i245 = 0; _i245 < _list244.Count; ++_i245)
                  {
                    string _elem246;
                    _elem246 = iprot.ReadString();
                    Success.Add(_elem246);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("GetClientIPList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter247 in Success)
              {
                oprot.WriteString(_iter247);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GetClientIPList_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ClientRegion_args : TBase
  {
    private ClientCfg _cfg;

    public ClientCfg Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public ClientRegion_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new ClientCfg();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ClientRegion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ClientRegion_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ClientRegion_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ClientRegion_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ClientRegion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ClientRegion_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class VisitorRegion_args : TBase
  {
    private VisitorInfo _cfg;

    public VisitorInfo Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public VisitorRegion_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new VisitorInfo();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("VisitorRegion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("VisitorRegion_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class VisitorRegion_result : TBase
  {
    private CResultCfg _success;

    public CResultCfg Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public VisitorRegion_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new CResultCfg();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("VisitorRegion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("VisitorRegion_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UploadCmpLogFromFront_args : TBase
  {
    private CmpFaceLogInfo _cfg;

    public CmpFaceLogInfo Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public UploadCmpLogFromFront_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new CmpFaceLogInfo();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UploadCmpLogFromFront_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UploadCmpLogFromFront_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UploadCmpLogFromFront_result : TBase
  {
    private ErrorInfo _success;

    public ErrorInfo Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UploadCmpLogFromFront_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ErrorInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UploadCmpLogFromFront_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UploadCmpLogFromFront_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class VisitorVerifi_args : TBase
  {
    private List<byte[]> _img;
    private string _channelID;
    private string _channelname;

    public List<byte[]> Img
    {
      get
      {
        return _img;
      }
      set
      {
        __isset.img = true;
        this._img = value;
      }
    }

    public string ChannelID
    {
      get
      {
        return _channelID;
      }
      set
      {
        __isset.channelID = true;
        this._channelID = value;
      }
    }

    public string Channelname
    {
      get
      {
        return _channelname;
      }
      set
      {
        __isset.channelname = true;
        this._channelname = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool img;
      public bool channelID;
      public bool channelname;
    }

    public VisitorVerifi_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Img = new List<byte[]>();
                  TList _list248 = iprot.ReadListBegin();
                  for( int _i249 = 0; _i249 < _list248.Count; ++_i249)
                  {
                    byte[] _elem250;
                    _elem250 = iprot.ReadBinary();
                    Img.Add(_elem250);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Channelname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("VisitorVerifi_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Img != null && __isset.img) {
          field.Name = "img";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Img.Count));
            foreach (byte[] _iter251 in Img)
            {
              oprot.WriteBinary(_iter251);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ChannelID != null && __isset.channelID) {
          field.Name = "channelID";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        if (Channelname != null && __isset.channelname) {
          field.Name = "channelname";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channelname);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("VisitorVerifi_args(");
      bool __first = true;
      if (Img != null && __isset.img) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Img: ");
        __sb.Append(Img);
      }
      if (ChannelID != null && __isset.channelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      if (Channelname != null && __isset.channelname) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channelname: ");
        __sb.Append(Channelname);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class VisitorVerifi_result : TBase
  {
    private List<CResultCfg> _success;

    public List<CResultCfg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public VisitorVerifi_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CResultCfg>();
                  TList _list252 = iprot.ReadListBegin();
                  for( int _i253 = 0; _i253 < _list252.Count; ++_i253)
                  {
                    CResultCfg _elem254;
                    _elem254 = new CResultCfg();
                    _elem254.Read(iprot);
                    Success.Add(_elem254);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("VisitorVerifi_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CResultCfg _iter255 in Success)
              {
                _iter255.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("VisitorVerifi_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class uploadrealcap_args : TBase
  {
    private RealtimeCapInfo _cfg;

    public RealtimeCapInfo Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public uploadrealcap_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new RealtimeCapInfo();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("uploadrealcap_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("uploadrealcap_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class uploadrealcap_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public uploadrealcap_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("uploadrealcap_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("uploadrealcap_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ServerRegion_args : TBase
  {
    private List<SServerInfo> _server;

    public List<SServerInfo> Server
    {
      get
      {
        return _server;
      }
      set
      {
        __isset.server = true;
        this._server = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool server;
    }

    public ServerRegion_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Server = new List<SServerInfo>();
                  TList _list256 = iprot.ReadListBegin();
                  for( int _i257 = 0; _i257 < _list256.Count; ++_i257)
                  {
                    SServerInfo _elem258;
                    _elem258 = new SServerInfo();
                    _elem258.Read(iprot);
                    Server.Add(_elem258);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ServerRegion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Server != null && __isset.server) {
          field.Name = "server";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Server.Count));
            foreach (SServerInfo _iter259 in Server)
            {
              _iter259.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ServerRegion_args(");
      bool __first = true;
      if (Server != null && __isset.server) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Server: ");
        __sb.Append(Server);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ServerRegion_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ServerRegion_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ServerRegion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ServerRegion_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SetConfig_args : TBase
  {
    private List<SServerInfo> _server;
    private List<SConfigInfo> _config;

    public List<SServerInfo> Server
    {
      get
      {
        return _server;
      }
      set
      {
        __isset.server = true;
        this._server = value;
      }
    }

    public List<SConfigInfo> Config
    {
      get
      {
        return _config;
      }
      set
      {
        __isset.config = true;
        this._config = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool server;
      public bool config;
    }

    public SetConfig_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Server = new List<SServerInfo>();
                  TList _list260 = iprot.ReadListBegin();
                  for( int _i261 = 0; _i261 < _list260.Count; ++_i261)
                  {
                    SServerInfo _elem262;
                    _elem262 = new SServerInfo();
                    _elem262.Read(iprot);
                    Server.Add(_elem262);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Config = new List<SConfigInfo>();
                  TList _list263 = iprot.ReadListBegin();
                  for( int _i264 = 0; _i264 < _list263.Count; ++_i264)
                  {
                    SConfigInfo _elem265;
                    _elem265 = new SConfigInfo();
                    _elem265.Read(iprot);
                    Config.Add(_elem265);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SetConfig_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Server != null && __isset.server) {
          field.Name = "server";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Server.Count));
            foreach (SServerInfo _iter266 in Server)
            {
              _iter266.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Config != null && __isset.config) {
          field.Name = "config";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Config.Count));
            foreach (SConfigInfo _iter267 in Config)
            {
              _iter267.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SetConfig_args(");
      bool __first = true;
      if (Server != null && __isset.server) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Server: ");
        __sb.Append(Server);
      }
      if (Config != null && __isset.config) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Config: ");
        __sb.Append(Config);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SetConfig_result : TBase
  {
    private List<ErrorInfo> _success;

    public List<ErrorInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public SetConfig_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ErrorInfo>();
                  TList _list268 = iprot.ReadListBegin();
                  for( int _i269 = 0; _i269 < _list268.Count; ++_i269)
                  {
                    ErrorInfo _elem270;
                    _elem270 = new ErrorInfo();
                    _elem270.Read(iprot);
                    Success.Add(_elem270);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SetConfig_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ErrorInfo _iter271 in Success)
              {
                _iter271.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SetConfig_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetConfig_args : TBase
  {
    private int _stype;

    public int Stype
    {
      get
      {
        return _stype;
      }
      set
      {
        __isset.stype = true;
        this._stype = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool stype;
    }

    public GetConfig_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Stype = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("GetConfig_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.stype) {
          field.Name = "stype";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Stype);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GetConfig_args(");
      bool __first = true;
      if (__isset.stype) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Stype: ");
        __sb.Append(Stype);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetConfig_result : TBase
  {
    private List<SConfigInfo> _success;

    public List<SConfigInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public GetConfig_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SConfigInfo>();
                  TList _list272 = iprot.ReadListBegin();
                  for( int _i273 = 0; _i273 < _list272.Count; ++_i273)
                  {
                    SConfigInfo _elem274;
                    _elem274 = new SConfigInfo();
                    _elem274.Read(iprot);
                    Success.Add(_elem274);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("GetConfig_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SConfigInfo _iter275 in Success)
              {
                _iter275.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GetConfig_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapRecordTotalCountH_args : TBase
  {
    private string _channel;
    private long _btime;
    private long _etime;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool btime;
      public bool etime;
    }

    public QueryCapRecordTotalCountH_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapRecordTotalCountH_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapRecordTotalCountH_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapRecordTotalCountH_result : TBase
  {
    private List<SCountInfo> _success;

    public List<SCountInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapRecordTotalCountH_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfo>();
                  TList _list276 = iprot.ReadListBegin();
                  for( int _i277 = 0; _i277 < _list276.Count; ++_i277)
                  {
                    SCountInfo _elem278;
                    _elem278 = new SCountInfo();
                    _elem278.Read(iprot);
                    Success.Add(_elem278);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapRecordTotalCountH_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfo _iter279 in Success)
              {
                _iter279.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapRecordTotalCountH_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpRecordTotalCountH_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
    }

    public QueryCmpRecordTotalCountH_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpRecordTotalCountH_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpRecordTotalCountH_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpRecordTotalCountH_result : TBase
  {
    private List<SCountInfo> _success;

    public List<SCountInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpRecordTotalCountH_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfo>();
                  TList _list280 = iprot.ReadListBegin();
                  for( int _i281 = 0; _i281 < _list280.Count; ++_i281)
                  {
                    SCountInfo _elem282;
                    _elem282 = new SCountInfo();
                    _elem282.Read(iprot);
                    Success.Add(_elem282);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpRecordTotalCountH_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfo _iter283 in Success)
              {
                _iter283.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpRecordTotalCountH_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapDetailsH_args : TBase
  {
    private string _id;
    private string _day;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Day
    {
      get
      {
        return _day;
      }
      set
      {
        __isset.day = true;
        this._day = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool day;
    }

    public QueryCapDetailsH_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Day = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapDetailsH_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (Day != null && __isset.day) {
          field.Name = "day";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Day);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapDetailsH_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Day != null && __isset.day) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Day: ");
        __sb.Append(Day);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapDetailsH_result : TBase
  {
    private List<CapObjImg> _success;

    public List<CapObjImg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapDetailsH_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CapObjImg>();
                  TList _list284 = iprot.ReadListBegin();
                  for( int _i285 = 0; _i285 < _list284.Count; ++_i285)
                  {
                    CapObjImg _elem286;
                    _elem286 = new CapObjImg();
                    _elem286.Read(iprot);
                    Success.Add(_elem286);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapDetailsH_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CapObjImg _iter287 in Success)
              {
                _iter287.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapDetailsH_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogImageH_args : TBase
  {
    private string _ID;
    private string _day;

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public string Day
    {
      get
      {
        return _day;
      }
      set
      {
        __isset.day = true;
        this._day = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
      public bool day;
    }

    public QueryCapLogImageH_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Day = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogImageH_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        if (Day != null && __isset.day) {
          field.Name = "day";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Day);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogImageH_args(");
      bool __first = true;
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      if (Day != null && __isset.day) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Day: ");
        __sb.Append(Day);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogImageH_result : TBase
  {
    private List<byte[]> _success;

    public List<byte[]> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapLogImageH_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<byte[]>();
                  TList _list288 = iprot.ReadListBegin();
                  for( int _i289 = 0; _i289 < _list288.Count; ++_i289)
                  {
                    byte[] _elem290;
                    _elem290 = iprot.ReadBinary();
                    Success.Add(_elem290);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogImageH_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (byte[] _iter291 in Success)
              {
                oprot.WriteBinary(_iter291);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogImageH_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogImageH_args : TBase
  {
    private string _ID;
    private string _day;

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public string Day
    {
      get
      {
        return _day;
      }
      set
      {
        __isset.day = true;
        this._day = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
      public bool day;
    }

    public QueryCmpLogImageH_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Day = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogImageH_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        if (Day != null && __isset.day) {
          field.Name = "day";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Day);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogImageH_args(");
      bool __first = true;
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      if (Day != null && __isset.day) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Day: ");
        __sb.Append(Day);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogImageH_result : TBase
  {
    private List<byte[]> _success;

    public List<byte[]> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogImageH_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<byte[]>();
                  TList _list292 = iprot.ReadListBegin();
                  for( int _i293 = 0; _i293 < _list292.Count; ++_i293)
                  {
                    byte[] _elem294;
                    _elem294 = iprot.ReadBinary();
                    Success.Add(_elem294);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogImageH_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (byte[] _iter295 in Success)
              {
                oprot.WriteBinary(_iter295);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogImageH_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpByCapIdWidthImgH_args : TBase
  {
    private string _ID;
    private string _day;

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public string Day
    {
      get
      {
        return _day;
      }
      set
      {
        __isset.day = true;
        this._day = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
      public bool day;
    }

    public QueryCmpByCapIdWidthImgH_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Day = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpByCapIdWidthImgH_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        if (Day != null && __isset.day) {
          field.Name = "day";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Day);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpByCapIdWidthImgH_args(");
      bool __first = true;
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      if (Day != null && __isset.day) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Day: ");
        __sb.Append(Day);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpByCapIdWidthImgH_result : TBase
  {
    private List<CmpFaceLogWidthImg> _success;

    public List<CmpFaceLogWidthImg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpByCapIdWidthImgH_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLogWidthImg>();
                  TList _list296 = iprot.ReadListBegin();
                  for( int _i297 = 0; _i297 < _list296.Count; ++_i297)
                  {
                    CmpFaceLogWidthImg _elem298;
                    _elem298 = new CmpFaceLogWidthImg();
                    _elem298.Read(iprot);
                    Success.Add(_elem298);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpByCapIdWidthImgH_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLogWidthImg _iter299 in Success)
              {
                _iter299.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpByCapIdWidthImgH_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpLoadCapFace2_args : TBase
  {
    private string _ChannelID;
    private int _index;
    private long _timeIn;
    private long _timeOut;
    private int _age;
    private int _gender;
    private List<FaceInfo> _fis;

    public string ChannelID
    {
      get
      {
        return _ChannelID;
      }
      set
      {
        __isset.ChannelID = true;
        this._ChannelID = value;
      }
    }

    public int Index
    {
      get
      {
        return _index;
      }
      set
      {
        __isset.index = true;
        this._index = value;
      }
    }

    public long TimeIn
    {
      get
      {
        return _timeIn;
      }
      set
      {
        __isset.timeIn = true;
        this._timeIn = value;
      }
    }

    public long TimeOut
    {
      get
      {
        return _timeOut;
      }
      set
      {
        __isset.timeOut = true;
        this._timeOut = value;
      }
    }

    public int Age
    {
      get
      {
        return _age;
      }
      set
      {
        __isset.age = true;
        this._age = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public List<FaceInfo> Fis
    {
      get
      {
        return _fis;
      }
      set
      {
        __isset.fis = true;
        this._fis = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ChannelID;
      public bool index;
      public bool timeIn;
      public bool timeOut;
      public bool age;
      public bool gender;
      public bool fis;
    }

    public UpLoadCapFace2_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Index = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                TimeIn = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                TimeOut = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Age = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.List) {
                {
                  Fis = new List<FaceInfo>();
                  TList _list300 = iprot.ReadListBegin();
                  for( int _i301 = 0; _i301 < _list300.Count; ++_i301)
                  {
                    FaceInfo _elem302;
                    _elem302 = new FaceInfo();
                    _elem302.Read(iprot);
                    Fis.Add(_elem302);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpLoadCapFace2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.ChannelID) {
          field.Name = "ChannelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        if (__isset.index) {
          field.Name = "index";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Index);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeIn) {
          field.Name = "timeIn";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TimeIn);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOut) {
          field.Name = "timeOut";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TimeOut);
          oprot.WriteFieldEnd();
        }
        if (__isset.age) {
          field.Name = "age";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Age);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (Fis != null && __isset.fis) {
          field.Name = "fis";
          field.Type = TType.List;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Fis.Count));
            foreach (FaceInfo _iter303 in Fis)
            {
              _iter303.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpLoadCapFace2_args(");
      bool __first = true;
      if (ChannelID != null && __isset.ChannelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      if (__isset.index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Index: ");
        __sb.Append(Index);
      }
      if (__isset.timeIn) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeIn: ");
        __sb.Append(TimeIn);
      }
      if (__isset.timeOut) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeOut: ");
        __sb.Append(TimeOut);
      }
      if (__isset.age) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Age: ");
        __sb.Append(Age);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (Fis != null && __isset.fis) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Fis: ");
        __sb.Append(Fis);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpLoadCapFace2_result : TBase
  {
    private List<CmpInfo2Cap> _success;

    public List<CmpInfo2Cap> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UpLoadCapFace2_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpInfo2Cap>();
                  TList _list304 = iprot.ReadListBegin();
                  for( int _i305 = 0; _i305 < _list304.Count; ++_i305)
                  {
                    CmpInfo2Cap _elem306;
                    _elem306 = new CmpInfo2Cap();
                    _elem306.Read(iprot);
                    Success.Add(_elem306);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpLoadCapFace2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpInfo2Cap _iter307 in Success)
              {
                _iter307.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpLoadCapFace2_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QuerySenceImg_args : TBase
  {
    private string _ID;
    private string _day;

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public string Day
    {
      get
      {
        return _day;
      }
      set
      {
        __isset.day = true;
        this._day = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
      public bool day;
    }

    public QuerySenceImg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Day = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QuerySenceImg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        if (Day != null && __isset.day) {
          field.Name = "day";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Day);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QuerySenceImg_args(");
      bool __first = true;
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      if (Day != null && __isset.day) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Day: ");
        __sb.Append(Day);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QuerySenceImg_result : TBase
  {
    private List<byte[]> _success;

    public List<byte[]> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QuerySenceImg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<byte[]>();
                  TList _list308 = iprot.ReadListBegin();
                  for( int _i309 = 0; _i309 < _list308.Count; ++_i309)
                  {
                    byte[] _elem310;
                    _elem310 = iprot.ReadBinary();
                    Success.Add(_elem310);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QuerySenceImg_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (byte[] _iter311 in Success)
              {
                oprot.WriteBinary(_iter311);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QuerySenceImg_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefGenderH_args : TBase
  {
    private int _ID;

    public int ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
    }

    public QueryDefGenderH_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ID = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefGenderH_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ID) {
          field.Name = "ID";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefGenderH_args(");
      bool __first = true;
      if (__isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefGenderH_result : TBase
  {
    private List<STypeInfo> _success;

    public List<STypeInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryDefGenderH_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<STypeInfo>();
                  TList _list312 = iprot.ReadListBegin();
                  for( int _i313 = 0; _i313 < _list312.Count; ++_i313)
                  {
                    STypeInfo _elem314;
                    _elem314 = new STypeInfo();
                    _elem314.Read(iprot);
                    Success.Add(_elem314);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefGenderH_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (STypeInfo _iter315 in Success)
              {
                _iter315.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefGenderH_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefFaceObjTypeH_args : TBase
  {
    private int _ID;

    public int ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
    }

    public QueryDefFaceObjTypeH_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ID = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefFaceObjTypeH_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ID) {
          field.Name = "ID";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefFaceObjTypeH_args(");
      bool __first = true;
      if (__isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefFaceObjTypeH_result : TBase
  {
    private List<STypeInfo> _success;

    public List<STypeInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryDefFaceObjTypeH_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<STypeInfo>();
                  TList _list316 = iprot.ReadListBegin();
                  for( int _i317 = 0; _i317 < _list316.Count; ++_i317)
                  {
                    STypeInfo _elem318;
                    _elem318 = new STypeInfo();
                    _elem318.Read(iprot);
                    Success.Add(_elem318);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefFaceObjTypeH_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (STypeInfo _iter319 in Success)
              {
                _iter319.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefFaceObjTypeH_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefChannelTypeH_args : TBase
  {
    private int _ID;

    public int ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
    }

    public QueryDefChannelTypeH_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ID = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefChannelTypeH_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ID) {
          field.Name = "ID";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefChannelTypeH_args(");
      bool __first = true;
      if (__isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefChannelTypeH_result : TBase
  {
    private List<STypeInfo> _success;

    public List<STypeInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryDefChannelTypeH_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<STypeInfo>();
                  TList _list320 = iprot.ReadListBegin();
                  for( int _i321 = 0; _i321 < _list320.Count; ++_i321)
                  {
                    STypeInfo _elem322;
                    _elem322 = new STypeInfo();
                    _elem322.Read(iprot);
                    Success.Add(_elem322);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefChannelTypeH_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (STypeInfo _iter323 in Success)
              {
                _iter323.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefChannelTypeH_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefCameraTypeH_args : TBase
  {
    private int _ID;

    public int ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
    }

    public QueryDefCameraTypeH_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ID = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefCameraTypeH_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ID) {
          field.Name = "ID";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefCameraTypeH_args(");
      bool __first = true;
      if (__isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDefCameraTypeH_result : TBase
  {
    private List<STypeInfo> _success;

    public List<STypeInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryDefCameraTypeH_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<STypeInfo>();
                  TList _list324 = iprot.ReadListBegin();
                  for( int _i325 = 0; _i325 < _list324.Count; ++_i325)
                  {
                    STypeInfo _elem326;
                    _elem326 = new STypeInfo();
                    _elem326.Read(iprot);
                    Success.Add(_elem326);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryDefCameraTypeH_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (STypeInfo _iter327 in Success)
              {
                _iter327.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDefCameraTypeH_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SetDefGenderH_args : TBase
  {
    private List<STypeInfo> _sinfo;

    public List<STypeInfo> Sinfo
    {
      get
      {
        return _sinfo;
      }
      set
      {
        __isset.sinfo = true;
        this._sinfo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sinfo;
    }

    public SetDefGenderH_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Sinfo = new List<STypeInfo>();
                  TList _list328 = iprot.ReadListBegin();
                  for( int _i329 = 0; _i329 < _list328.Count; ++_i329)
                  {
                    STypeInfo _elem330;
                    _elem330 = new STypeInfo();
                    _elem330.Read(iprot);
                    Sinfo.Add(_elem330);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SetDefGenderH_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Sinfo != null && __isset.sinfo) {
          field.Name = "sinfo";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Sinfo.Count));
            foreach (STypeInfo _iter331 in Sinfo)
            {
              _iter331.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SetDefGenderH_args(");
      bool __first = true;
      if (Sinfo != null && __isset.sinfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sinfo: ");
        __sb.Append(Sinfo);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SetDefGenderH_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public SetDefGenderH_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SetDefGenderH_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SetDefGenderH_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SetDefFaceObjTypeH_args : TBase
  {
    private List<STypeInfo> _sinfo;

    public List<STypeInfo> Sinfo
    {
      get
      {
        return _sinfo;
      }
      set
      {
        __isset.sinfo = true;
        this._sinfo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sinfo;
    }

    public SetDefFaceObjTypeH_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Sinfo = new List<STypeInfo>();
                  TList _list332 = iprot.ReadListBegin();
                  for( int _i333 = 0; _i333 < _list332.Count; ++_i333)
                  {
                    STypeInfo _elem334;
                    _elem334 = new STypeInfo();
                    _elem334.Read(iprot);
                    Sinfo.Add(_elem334);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SetDefFaceObjTypeH_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Sinfo != null && __isset.sinfo) {
          field.Name = "sinfo";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Sinfo.Count));
            foreach (STypeInfo _iter335 in Sinfo)
            {
              _iter335.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SetDefFaceObjTypeH_args(");
      bool __first = true;
      if (Sinfo != null && __isset.sinfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sinfo: ");
        __sb.Append(Sinfo);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SetDefFaceObjTypeH_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public SetDefFaceObjTypeH_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SetDefFaceObjTypeH_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SetDefFaceObjTypeH_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SetDefChannelTypeH_args : TBase
  {
    private List<STypeInfo> _sinfo;

    public List<STypeInfo> Sinfo
    {
      get
      {
        return _sinfo;
      }
      set
      {
        __isset.sinfo = true;
        this._sinfo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sinfo;
    }

    public SetDefChannelTypeH_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Sinfo = new List<STypeInfo>();
                  TList _list336 = iprot.ReadListBegin();
                  for( int _i337 = 0; _i337 < _list336.Count; ++_i337)
                  {
                    STypeInfo _elem338;
                    _elem338 = new STypeInfo();
                    _elem338.Read(iprot);
                    Sinfo.Add(_elem338);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SetDefChannelTypeH_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Sinfo != null && __isset.sinfo) {
          field.Name = "sinfo";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Sinfo.Count));
            foreach (STypeInfo _iter339 in Sinfo)
            {
              _iter339.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SetDefChannelTypeH_args(");
      bool __first = true;
      if (Sinfo != null && __isset.sinfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sinfo: ");
        __sb.Append(Sinfo);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SetDefChannelTypeH_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public SetDefChannelTypeH_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SetDefChannelTypeH_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SetDefChannelTypeH_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SetDefCameraTypeH_args : TBase
  {
    private List<STypeInfo> _sinfo;

    public List<STypeInfo> Sinfo
    {
      get
      {
        return _sinfo;
      }
      set
      {
        __isset.sinfo = true;
        this._sinfo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sinfo;
    }

    public SetDefCameraTypeH_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Sinfo = new List<STypeInfo>();
                  TList _list340 = iprot.ReadListBegin();
                  for( int _i341 = 0; _i341 < _list340.Count; ++_i341)
                  {
                    STypeInfo _elem342;
                    _elem342 = new STypeInfo();
                    _elem342.Read(iprot);
                    Sinfo.Add(_elem342);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SetDefCameraTypeH_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Sinfo != null && __isset.sinfo) {
          field.Name = "sinfo";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Sinfo.Count));
            foreach (STypeInfo _iter343 in Sinfo)
            {
              _iter343.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SetDefCameraTypeH_args(");
      bool __first = true;
      if (Sinfo != null && __isset.sinfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sinfo: ");
        __sb.Append(Sinfo);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SetDefCameraTypeH_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public SetDefCameraTypeH_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SetDefCameraTypeH_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SetDefCameraTypeH_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddDiaplayArea_args : TBase
  {
    private DiaplayAreaCfg _cfg;

    public DiaplayAreaCfg Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public AddDiaplayArea_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new DiaplayAreaCfg();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddDiaplayArea_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddDiaplayArea_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddDiaplayArea_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public AddDiaplayArea_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddDiaplayArea_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddDiaplayArea_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModDiaplayArea_args : TBase
  {
    private DiaplayAreaCfg _cfg;

    public DiaplayAreaCfg Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public ModDiaplayArea_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new DiaplayAreaCfg();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModDiaplayArea_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModDiaplayArea_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModDiaplayArea_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ModDiaplayArea_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModDiaplayArea_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModDiaplayArea_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelDiaplayArea_args : TBase
  {
    private string _zid;

    public string Zid
    {
      get
      {
        return _zid;
      }
      set
      {
        __isset.zid = true;
        this._zid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool zid;
    }

    public DelDiaplayArea_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Zid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelDiaplayArea_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Zid != null && __isset.zid) {
          field.Name = "zid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Zid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelDiaplayArea_args(");
      bool __first = true;
      if (Zid != null && __isset.zid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Zid: ");
        __sb.Append(Zid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelDiaplayArea_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public DelDiaplayArea_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelDiaplayArea_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelDiaplayArea_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListDiaplayAreaNum_args : TBase
  {
    private string _name;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
    }

    public QueryListDiaplayAreaNum_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListDiaplayAreaNum_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListDiaplayAreaNum_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListDiaplayAreaNum_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryListDiaplayAreaNum_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListDiaplayAreaNum_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListDiaplayAreaNum_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListDiaplayArea_args : TBase
  {
    private string _name;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
    }

    public QueryListDiaplayArea_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListDiaplayArea_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListDiaplayArea_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListDiaplayArea_result : TBase
  {
    private List<DiaplayAreaCfg> _success;

    public List<DiaplayAreaCfg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryListDiaplayArea_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<DiaplayAreaCfg>();
                  TList _list344 = iprot.ReadListBegin();
                  for( int _i345 = 0; _i345 < _list344.Count; ++_i345)
                  {
                    DiaplayAreaCfg _elem346;
                    _elem346 = new DiaplayAreaCfg();
                    _elem346.Read(iprot);
                    Success.Add(_elem346);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListDiaplayArea_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (DiaplayAreaCfg _iter347 in Success)
              {
                _iter347.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListDiaplayArea_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddChannelGY_args : TBase
  {
    private ChannelCfgGY _cfg;

    public ChannelCfgGY Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public AddChannelGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new ChannelCfgGY();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddChannelGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddChannelGY_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddChannelGY_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public AddChannelGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddChannelGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddChannelGY_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelChannelGY_args : TBase
  {
    private string _channelID;

    public string ChannelID
    {
      get
      {
        return _channelID;
      }
      set
      {
        __isset.channelID = true;
        this._channelID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelID;
    }

    public DelChannelGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelChannelGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.channelID) {
          field.Name = "channelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelChannelGY_args(");
      bool __first = true;
      if (ChannelID != null && __isset.channelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DelChannelGY_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public DelChannelGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DelChannelGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DelChannelGY_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModifyChannelGY_args : TBase
  {
    private ChannelCfgGY _cfg;

    public ChannelCfgGY Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public ModifyChannelGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new ChannelCfgGY();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModifyChannelGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModifyChannelGY_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModifyChannelGY_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ModifyChannelGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModifyChannelGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModifyChannelGY_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryAllChannelGY_args : TBase
  {

    public QueryAllChannelGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryAllChannelGY_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryAllChannelGY_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryAllChannelGY_result : TBase
  {
    private List<ChannelCfgGY> _success;

    public List<ChannelCfgGY> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryAllChannelGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ChannelCfgGY>();
                  TList _list348 = iprot.ReadListBegin();
                  for( int _i349 = 0; _i349 < _list348.Count; ++_i349)
                  {
                    ChannelCfgGY _elem350;
                    _elem350 = new ChannelCfgGY();
                    _elem350.Read(iprot);
                    Success.Add(_elem350);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryAllChannelGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ChannelCfgGY _iter351 in Success)
              {
                _iter351.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryAllChannelGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryChannelGY_args : TBase
  {
    private string _channelID;

    public string ChannelID
    {
      get
      {
        return _channelID;
      }
      set
      {
        __isset.channelID = true;
        this._channelID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelID;
    }

    public QueryChannelGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryChannelGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.channelID) {
          field.Name = "channelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryChannelGY_args(");
      bool __first = true;
      if (ChannelID != null && __isset.channelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryChannelGY_result : TBase
  {
    private ChannelCfgGY _success;

    public ChannelCfgGY Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryChannelGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ChannelCfgGY();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryChannelGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryChannelGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryChannelByIpGY_args : TBase
  {
    private string _capip;

    public string Capip
    {
      get
      {
        return _capip;
      }
      set
      {
        __isset.capip = true;
        this._capip = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool capip;
    }

    public QueryChannelByIpGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Capip = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryChannelByIpGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Capip != null && __isset.capip) {
          field.Name = "capip";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Capip);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryChannelByIpGY_args(");
      bool __first = true;
      if (Capip != null && __isset.capip) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Capip: ");
        __sb.Append(Capip);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryChannelByIpGY_result : TBase
  {
    private List<ChannelCfgGY> _success;

    public List<ChannelCfgGY> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryChannelByIpGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ChannelCfgGY>();
                  TList _list352 = iprot.ReadListBegin();
                  for( int _i353 = 0; _i353 < _list352.Count; ++_i353)
                  {
                    ChannelCfgGY _elem354;
                    _elem354 = new ChannelCfgGY();
                    _elem354.Read(iprot);
                    Success.Add(_elem354);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryChannelByIpGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ChannelCfgGY _iter355 in Success)
              {
                _iter355.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryChannelByIpGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogGY_args : TBase
  {
    private string _channel;
    private string _channel_div;
    private long _btime;
    private long _etime;
    private int _nPageFirstNum;
    private int _nPageNum;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Channel_div
    {
      get
      {
        return _channel_div;
      }
      set
      {
        __isset.channel_div = true;
        this._channel_div = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool channel_div;
      public bool btime;
      public bool etime;
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryCapLogGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Channel_div = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Channel_div != null && __isset.channel_div) {
          field.Name = "channel_div";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel_div);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogGY_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Channel_div != null && __isset.channel_div) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel_div: ");
        __sb.Append(Channel_div);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogGY_result : TBase
  {
    private List<CapFaceLogGY> _success;

    public List<CapFaceLogGY> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapLogGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CapFaceLogGY>();
                  TList _list356 = iprot.ReadListBegin();
                  for( int _i357 = 0; _i357 < _list356.Count; ++_i357)
                  {
                    CapFaceLogGY _elem358;
                    _elem358 = new CapFaceLogGY();
                    _elem358.Read(iprot);
                    Success.Add(_elem358);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CapFaceLogGY _iter359 in Success)
              {
                _iter359.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapRecordTotalCountHGY_args : TBase
  {
    private string _channel;
    private string _channel_div;
    private long _btime;
    private long _etime;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Channel_div
    {
      get
      {
        return _channel_div;
      }
      set
      {
        __isset.channel_div = true;
        this._channel_div = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool channel_div;
      public bool btime;
      public bool etime;
    }

    public QueryCapRecordTotalCountHGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Channel_div = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapRecordTotalCountHGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Channel_div != null && __isset.channel_div) {
          field.Name = "channel_div";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel_div);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapRecordTotalCountHGY_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Channel_div != null && __isset.channel_div) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel_div: ");
        __sb.Append(Channel_div);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapRecordTotalCountHGY_result : TBase
  {
    private List<SCountInfo> _success;

    public List<SCountInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapRecordTotalCountHGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfo>();
                  TList _list360 = iprot.ReadListBegin();
                  for( int _i361 = 0; _i361 < _list360.Count; ++_i361)
                  {
                    SCountInfo _elem362;
                    _elem362 = new SCountInfo();
                    _elem362.Read(iprot);
                    Success.Add(_elem362);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapRecordTotalCountHGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfo _iter363 in Success)
              {
                _iter363.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapRecordTotalCountHGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapDetailsHGY_args : TBase
  {
    private string _id;
    private string _day;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Day
    {
      get
      {
        return _day;
      }
      set
      {
        __isset.day = true;
        this._day = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool day;
    }

    public QueryCapDetailsHGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Day = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapDetailsHGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (Day != null && __isset.day) {
          field.Name = "day";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Day);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapDetailsHGY_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Day != null && __isset.day) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Day: ");
        __sb.Append(Day);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapDetailsHGY_result : TBase
  {
    private List<CapObjImgGY> _success;

    public List<CapObjImgGY> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapDetailsHGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CapObjImgGY>();
                  TList _list364 = iprot.ReadListBegin();
                  for( int _i365 = 0; _i365 < _list364.Count; ++_i365)
                  {
                    CapObjImgGY _elem366;
                    _elem366 = new CapObjImgGY();
                    _elem366.Read(iprot);
                    Success.Add(_elem366);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapDetailsHGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CapObjImgGY _iter367 in Success)
              {
                _iter367.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapDetailsHGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogImageHGY_args : TBase
  {
    private string _ID;
    private string _day;

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public string Day
    {
      get
      {
        return _day;
      }
      set
      {
        __isset.day = true;
        this._day = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
      public bool day;
    }

    public QueryCapLogImageHGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Day = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogImageHGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        if (Day != null && __isset.day) {
          field.Name = "day";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Day);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogImageHGY_args(");
      bool __first = true;
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      if (Day != null && __isset.day) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Day: ");
        __sb.Append(Day);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogImageHGY_result : TBase
  {
    private List<byte[]> _success;

    public List<byte[]> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapLogImageHGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<byte[]>();
                  TList _list368 = iprot.ReadListBegin();
                  for( int _i369 = 0; _i369 < _list368.Count; ++_i369)
                  {
                    byte[] _elem370;
                    _elem370 = iprot.ReadBinary();
                    Success.Add(_elem370);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogImageHGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (byte[] _iter371 in Success)
              {
                oprot.WriteBinary(_iter371);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogImageHGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogWithImgGY_args : TBase
  {
    private string _channel;
    private string _channel_div;
    private long _btime;
    private long _etime;
    private int _nPageFirstNum;
    private int _nPageNum;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Channel_div
    {
      get
      {
        return _channel_div;
      }
      set
      {
        __isset.channel_div = true;
        this._channel_div = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool channel_div;
      public bool btime;
      public bool etime;
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryCapLogWithImgGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Channel_div = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogWithImgGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Channel_div != null && __isset.channel_div) {
          field.Name = "channel_div";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel_div);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogWithImgGY_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Channel_div != null && __isset.channel_div) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel_div: ");
        __sb.Append(Channel_div);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogWithImgGY_result : TBase
  {
    private List<CapFaceLogWithImgGY> _success;

    public List<CapFaceLogWithImgGY> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapLogWithImgGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CapFaceLogWithImgGY>();
                  TList _list372 = iprot.ReadListBegin();
                  for( int _i373 = 0; _i373 < _list372.Count; ++_i373)
                  {
                    CapFaceLogWithImgGY _elem374;
                    _elem374 = new CapFaceLogWithImgGY();
                    _elem374.Read(iprot);
                    Success.Add(_elem374);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogWithImgGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CapFaceLogWithImgGY _iter375 in Success)
              {
                _iter375.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogWithImgGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogGY_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private string _channel_div;
    private int _nPageFirstNum;
    private int _nPageNum;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public string Channel_div
    {
      get
      {
        return _channel_div;
      }
      set
      {
        __isset.channel_div = true;
        this._channel_div = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool channel_div;
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryCmpLogGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Channel_div = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (Channel_div != null && __isset.channel_div) {
          field.Name = "channel_div";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel_div);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogGY_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (Channel_div != null && __isset.channel_div) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel_div: ");
        __sb.Append(Channel_div);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogGY_result : TBase
  {
    private List<CmpFaceLogGY> _success;

    public List<CmpFaceLogGY> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLogGY>();
                  TList _list376 = iprot.ReadListBegin();
                  for( int _i377 = 0; _i377 < _list376.Count; ++_i377)
                  {
                    CmpFaceLogGY _elem378;
                    _elem378 = new CmpFaceLogGY();
                    _elem378.Read(iprot);
                    Success.Add(_elem378);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLogGY _iter379 in Success)
              {
                _iter379.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpRecordTotalCountHGY_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private string _channel_div;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public string Channel_div
    {
      get
      {
        return _channel_div;
      }
      set
      {
        __isset.channel_div = true;
        this._channel_div = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool channel_div;
    }

    public QueryCmpRecordTotalCountHGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Channel_div = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpRecordTotalCountHGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (Channel_div != null && __isset.channel_div) {
          field.Name = "channel_div";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel_div);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpRecordTotalCountHGY_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (Channel_div != null && __isset.channel_div) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel_div: ");
        __sb.Append(Channel_div);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpRecordTotalCountHGY_result : TBase
  {
    private List<SCountInfo> _success;

    public List<SCountInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpRecordTotalCountHGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfo>();
                  TList _list380 = iprot.ReadListBegin();
                  for( int _i381 = 0; _i381 < _list380.Count; ++_i381)
                  {
                    SCountInfo _elem382;
                    _elem382 = new SCountInfo();
                    _elem382.Read(iprot);
                    Success.Add(_elem382);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpRecordTotalCountHGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfo _iter383 in Success)
              {
                _iter383.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpRecordTotalCountHGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogWidthImgGY_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private string _channel_div;
    private int _nPageFirstNum;
    private int _nPageNum;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public string Channel_div
    {
      get
      {
        return _channel_div;
      }
      set
      {
        __isset.channel_div = true;
        this._channel_div = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool channel_div;
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryCmpLogWidthImgGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Channel_div = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogWidthImgGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (Channel_div != null && __isset.channel_div) {
          field.Name = "channel_div";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel_div);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogWidthImgGY_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (Channel_div != null && __isset.channel_div) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel_div: ");
        __sb.Append(Channel_div);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogWidthImgGY_result : TBase
  {
    private List<CmpFaceLogWidthImgGY> _success;

    public List<CmpFaceLogWidthImgGY> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogWidthImgGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLogWidthImgGY>();
                  TList _list384 = iprot.ReadListBegin();
                  for( int _i385 = 0; _i385 < _list384.Count; ++_i385)
                  {
                    CmpFaceLogWidthImgGY _elem386;
                    _elem386 = new CmpFaceLogWidthImgGY();
                    _elem386.Read(iprot);
                    Success.Add(_elem386);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogWidthImgGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLogWidthImgGY _iter387 in Success)
              {
                _iter387.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogWidthImgGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogImageHGY_args : TBase
  {
    private string _ID;
    private string _day;

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public string Day
    {
      get
      {
        return _day;
      }
      set
      {
        __isset.day = true;
        this._day = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
      public bool day;
    }

    public QueryCmpLogImageHGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Day = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogImageHGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        if (Day != null && __isset.day) {
          field.Name = "day";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Day);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogImageHGY_args(");
      bool __first = true;
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      if (Day != null && __isset.day) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Day: ");
        __sb.Append(Day);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogImageHGY_result : TBase
  {
    private List<byte[]> _success;

    public List<byte[]> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogImageHGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<byte[]>();
                  TList _list388 = iprot.ReadListBegin();
                  for( int _i389 = 0; _i389 < _list388.Count; ++_i389)
                  {
                    byte[] _elem390;
                    _elem390 = iprot.ReadBinary();
                    Success.Add(_elem390);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogImageHGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (byte[] _iter391 in Success)
              {
                oprot.WriteBinary(_iter391);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogImageHGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpByCapIdWidthImgHGY_args : TBase
  {
    private string _ID;
    private string _day;

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public string Day
    {
      get
      {
        return _day;
      }
      set
      {
        __isset.day = true;
        this._day = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
      public bool day;
    }

    public QueryCmpByCapIdWidthImgHGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Day = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpByCapIdWidthImgHGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        if (Day != null && __isset.day) {
          field.Name = "day";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Day);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpByCapIdWidthImgHGY_args(");
      bool __first = true;
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      if (Day != null && __isset.day) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Day: ");
        __sb.Append(Day);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpByCapIdWidthImgHGY_result : TBase
  {
    private List<CmpFaceLogWidthImgGY> _success;

    public List<CmpFaceLogWidthImgGY> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpByCapIdWidthImgHGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLogWidthImgGY>();
                  TList _list392 = iprot.ReadListBegin();
                  for( int _i393 = 0; _i393 < _list392.Count; ++_i393)
                  {
                    CmpFaceLogWidthImgGY _elem394;
                    _elem394 = new CmpFaceLogWidthImgGY();
                    _elem394.Read(iprot);
                    Success.Add(_elem394);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpByCapIdWidthImgHGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLogWidthImgGY _iter395 in Success)
              {
                _iter395.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpByCapIdWidthImgHGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogByObjIdGY_args : TBase
  {
    private string _objid;
    private long _btime;
    private long _etime;

    public string Objid
    {
      get
      {
        return _objid;
      }
      set
      {
        __isset.objid = true;
        this._objid = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool objid;
      public bool btime;
      public bool etime;
    }

    public QueryCmpLogByObjIdGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Objid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogByObjIdGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Objid != null && __isset.objid) {
          field.Name = "objid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Objid);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogByObjIdGY_args(");
      bool __first = true;
      if (Objid != null && __isset.objid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Objid: ");
        __sb.Append(Objid);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogByObjIdGY_result : TBase
  {
    private List<CmpFaceLogGY> _success;

    public List<CmpFaceLogGY> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogByObjIdGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLogGY>();
                  TList _list396 = iprot.ReadListBegin();
                  for( int _i397 = 0; _i397 < _list396.Count; ++_i397)
                  {
                    CmpFaceLogGY _elem398;
                    _elem398 = new CmpFaceLogGY();
                    _elem398.Read(iprot);
                    Success.Add(_elem398);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogByObjIdGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLogGY _iter399 in Success)
              {
                _iter399.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogByObjIdGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogCountByObjIdGY_args : TBase
  {
    private string _objid;
    private long _btime;
    private long _etime;

    public string Objid
    {
      get
      {
        return _objid;
      }
      set
      {
        __isset.objid = true;
        this._objid = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool objid;
      public bool btime;
      public bool etime;
    }

    public QueryCmpLogCountByObjIdGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Objid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogCountByObjIdGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Objid != null && __isset.objid) {
          field.Name = "objid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Objid);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogCountByObjIdGY_args(");
      bool __first = true;
      if (Objid != null && __isset.objid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Objid: ");
        __sb.Append(Objid);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogCountByObjIdGY_result : TBase
  {
    private List<SCountInfo> _success;

    public List<SCountInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogCountByObjIdGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfo>();
                  TList _list400 = iprot.ReadListBegin();
                  for( int _i401 = 0; _i401 < _list400.Count; ++_i401)
                  {
                    SCountInfo _elem402;
                    _elem402 = new SCountInfo();
                    _elem402.Read(iprot);
                    Success.Add(_elem402);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogCountByObjIdGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfo _iter403 in Success)
              {
                _iter403.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogCountByObjIdGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryAllStatGY_args : TBase
  {

    public QueryAllStatGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryAllStatGY_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryAllStatGY_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryAllStatGY_result : TBase
  {
    private List<AllAreaStatInfo> _success;

    public List<AllAreaStatInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryAllStatGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<AllAreaStatInfo>();
                  TList _list404 = iprot.ReadListBegin();
                  for( int _i405 = 0; _i405 < _list404.Count; ++_i405)
                  {
                    AllAreaStatInfo _elem406;
                    _elem406 = new AllAreaStatInfo();
                    _elem406.Read(iprot);
                    Success.Add(_elem406);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryAllStatGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (AllAreaStatInfo _iter407 in Success)
              {
                _iter407.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryAllStatGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryStatByAreaOneDayGY_args : TBase
  {
    private string _channel_div;
    private long _btime;
    private long _etime;

    public string Channel_div
    {
      get
      {
        return _channel_div;
      }
      set
      {
        __isset.channel_div = true;
        this._channel_div = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel_div;
      public bool btime;
      public bool etime;
    }

    public QueryStatByAreaOneDayGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel_div = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryStatByAreaOneDayGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel_div != null && __isset.channel_div) {
          field.Name = "channel_div";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel_div);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryStatByAreaOneDayGY_args(");
      bool __first = true;
      if (Channel_div != null && __isset.channel_div) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel_div: ");
        __sb.Append(Channel_div);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryStatByAreaOneDayGY_result : TBase
  {
    private List<SCountInfoOneDay> _success;

    public List<SCountInfoOneDay> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryStatByAreaOneDayGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfoOneDay>();
                  TList _list408 = iprot.ReadListBegin();
                  for( int _i409 = 0; _i409 < _list408.Count; ++_i409)
                  {
                    SCountInfoOneDay _elem410;
                    _elem410 = new SCountInfoOneDay();
                    _elem410.Read(iprot);
                    Success.Add(_elem410);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryStatByAreaOneDayGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfoOneDay _iter411 in Success)
              {
                _iter411.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryStatByAreaOneDayGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryStatByAreaOneHourGY_args : TBase
  {
    private string _channel_div;
    private string _daystr;
    private long _btime;
    private long _etime;

    public string Channel_div
    {
      get
      {
        return _channel_div;
      }
      set
      {
        __isset.channel_div = true;
        this._channel_div = value;
      }
    }

    public string Daystr
    {
      get
      {
        return _daystr;
      }
      set
      {
        __isset.daystr = true;
        this._daystr = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel_div;
      public bool daystr;
      public bool btime;
      public bool etime;
    }

    public QueryStatByAreaOneHourGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel_div = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Daystr = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryStatByAreaOneHourGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel_div != null && __isset.channel_div) {
          field.Name = "channel_div";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel_div);
          oprot.WriteFieldEnd();
        }
        if (Daystr != null && __isset.daystr) {
          field.Name = "daystr";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Daystr);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryStatByAreaOneHourGY_args(");
      bool __first = true;
      if (Channel_div != null && __isset.channel_div) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel_div: ");
        __sb.Append(Channel_div);
      }
      if (Daystr != null && __isset.daystr) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Daystr: ");
        __sb.Append(Daystr);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryStatByAreaOneHourGY_result : TBase
  {
    private List<SCountInfoOneDay> _success;

    public List<SCountInfoOneDay> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryStatByAreaOneHourGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfoOneDay>();
                  TList _list412 = iprot.ReadListBegin();
                  for( int _i413 = 0; _i413 < _list412.Count; ++_i413)
                  {
                    SCountInfoOneDay _elem414;
                    _elem414 = new SCountInfoOneDay();
                    _elem414.Read(iprot);
                    Success.Add(_elem414);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryStatByAreaOneHourGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfoOneDay _iter415 in Success)
              {
                _iter415.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryStatByAreaOneHourGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryVisitorStatGY_args : TBase
  {
    private string _uid;
    private string _day;

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }

    public string Day
    {
      get
      {
        return _day;
      }
      set
      {
        __isset.day = true;
        this._day = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uid;
      public bool day;
    }

    public QueryVisitorStatGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Day = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryVisitorStatGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        if (Day != null && __isset.day) {
          field.Name = "day";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Day);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryVisitorStatGY_args(");
      bool __first = true;
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      if (Day != null && __isset.day) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Day: ");
        __sb.Append(Day);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryVisitorStatGY_result : TBase
  {
    private List<SCountInfoArea> _success;

    public List<SCountInfoArea> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryVisitorStatGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfoArea>();
                  TList _list416 = iprot.ReadListBegin();
                  for( int _i417 = 0; _i417 < _list416.Count; ++_i417)
                  {
                    SCountInfoArea _elem418;
                    _elem418 = new SCountInfoArea();
                    _elem418.Read(iprot);
                    Success.Add(_elem418);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryVisitorStatGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfoArea _iter419 in Success)
              {
                _iter419.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryVisitorStatGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryVisitorOrbitGY_args : TBase
  {
    private string _uid;
    private string _day;

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }

    public string Day
    {
      get
      {
        return _day;
      }
      set
      {
        __isset.day = true;
        this._day = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uid;
      public bool day;
    }

    public QueryVisitorOrbitGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Day = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryVisitorOrbitGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        if (Day != null && __isset.day) {
          field.Name = "day";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Day);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryVisitorOrbitGY_args(");
      bool __first = true;
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      if (Day != null && __isset.day) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Day: ");
        __sb.Append(Day);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryVisitorOrbitGY_result : TBase
  {
    private List<SVisitorOrbit> _success;

    public List<SVisitorOrbit> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryVisitorOrbitGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SVisitorOrbit>();
                  TList _list420 = iprot.ReadListBegin();
                  for( int _i421 = 0; _i421 < _list420.Count; ++_i421)
                  {
                    SVisitorOrbit _elem422;
                    _elem422 = new SVisitorOrbit();
                    _elem422.Read(iprot);
                    Success.Add(_elem422);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryVisitorOrbitGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SVisitorOrbit _iter423 in Success)
              {
                _iter423.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryVisitorOrbitGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryPieChartGY_args : TBase
  {
    private string _uid;
    private string _day;
    private long _etime;

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }

    public string Day
    {
      get
      {
        return _day;
      }
      set
      {
        __isset.day = true;
        this._day = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uid;
      public bool day;
      public bool etime;
    }

    public QueryPieChartGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Day = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryPieChartGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        if (Day != null && __isset.day) {
          field.Name = "day";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Day);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryPieChartGY_args(");
      bool __first = true;
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      if (Day != null && __isset.day) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Day: ");
        __sb.Append(Day);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryPieChartGY_result : TBase
  {
    private List<PieChartStat> _success;

    public List<PieChartStat> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryPieChartGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<PieChartStat>();
                  TList _list424 = iprot.ReadListBegin();
                  for( int _i425 = 0; _i425 < _list424.Count; ++_i425)
                  {
                    PieChartStat _elem426;
                    _elem426 = new PieChartStat();
                    _elem426.Read(iprot);
                    Success.Add(_elem426);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryPieChartGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (PieChartStat _iter427 in Success)
              {
                _iter427.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryPieChartGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpLoadCapFaceSyncGY_args : TBase
  {
    private string _ChannelID;
    private int _index;
    private long _timeIn;
    private long _timeOut;
    private int _age;
    private int _gender;
    private List<FaceInfo> _fis;

    public string ChannelID
    {
      get
      {
        return _ChannelID;
      }
      set
      {
        __isset.ChannelID = true;
        this._ChannelID = value;
      }
    }

    public int Index
    {
      get
      {
        return _index;
      }
      set
      {
        __isset.index = true;
        this._index = value;
      }
    }

    public long TimeIn
    {
      get
      {
        return _timeIn;
      }
      set
      {
        __isset.timeIn = true;
        this._timeIn = value;
      }
    }

    public long TimeOut
    {
      get
      {
        return _timeOut;
      }
      set
      {
        __isset.timeOut = true;
        this._timeOut = value;
      }
    }

    public int Age
    {
      get
      {
        return _age;
      }
      set
      {
        __isset.age = true;
        this._age = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public List<FaceInfo> Fis
    {
      get
      {
        return _fis;
      }
      set
      {
        __isset.fis = true;
        this._fis = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ChannelID;
      public bool index;
      public bool timeIn;
      public bool timeOut;
      public bool age;
      public bool gender;
      public bool fis;
    }

    public UpLoadCapFaceSyncGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Index = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                TimeIn = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                TimeOut = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Age = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.List) {
                {
                  Fis = new List<FaceInfo>();
                  TList _list428 = iprot.ReadListBegin();
                  for( int _i429 = 0; _i429 < _list428.Count; ++_i429)
                  {
                    FaceInfo _elem430;
                    _elem430 = new FaceInfo();
                    _elem430.Read(iprot);
                    Fis.Add(_elem430);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpLoadCapFaceSyncGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.ChannelID) {
          field.Name = "ChannelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        if (__isset.index) {
          field.Name = "index";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Index);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeIn) {
          field.Name = "timeIn";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TimeIn);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOut) {
          field.Name = "timeOut";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TimeOut);
          oprot.WriteFieldEnd();
        }
        if (__isset.age) {
          field.Name = "age";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Age);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (Fis != null && __isset.fis) {
          field.Name = "fis";
          field.Type = TType.List;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Fis.Count));
            foreach (FaceInfo _iter431 in Fis)
            {
              _iter431.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpLoadCapFaceSyncGY_args(");
      bool __first = true;
      if (ChannelID != null && __isset.ChannelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      if (__isset.index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Index: ");
        __sb.Append(Index);
      }
      if (__isset.timeIn) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeIn: ");
        __sb.Append(TimeIn);
      }
      if (__isset.timeOut) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeOut: ");
        __sb.Append(TimeOut);
      }
      if (__isset.age) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Age: ");
        __sb.Append(Age);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (Fis != null && __isset.fis) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Fis: ");
        __sb.Append(Fis);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpLoadCapFaceSyncGY_result : TBase
  {
    private List<CmpInfo2CapGY> _success;

    public List<CmpInfo2CapGY> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UpLoadCapFaceSyncGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpInfo2CapGY>();
                  TList _list432 = iprot.ReadListBegin();
                  for( int _i433 = 0; _i433 < _list432.Count; ++_i433)
                  {
                    CmpInfo2CapGY _elem434;
                    _elem434 = new CmpInfo2CapGY();
                    _elem434.Read(iprot);
                    Success.Add(_elem434);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpLoadCapFaceSyncGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpInfo2CapGY _iter435 in Success)
              {
                _iter435.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpLoadCapFaceSyncGY_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpLoadCapFaceASyncGY_args : TBase
  {
    private string _ChannelID;
    private int _index;
    private long _timeIn;
    private long _timeOut;
    private int _age;
    private int _gender;
    private List<FaceInfo> _fis;

    public string ChannelID
    {
      get
      {
        return _ChannelID;
      }
      set
      {
        __isset.ChannelID = true;
        this._ChannelID = value;
      }
    }

    public int Index
    {
      get
      {
        return _index;
      }
      set
      {
        __isset.index = true;
        this._index = value;
      }
    }

    public long TimeIn
    {
      get
      {
        return _timeIn;
      }
      set
      {
        __isset.timeIn = true;
        this._timeIn = value;
      }
    }

    public long TimeOut
    {
      get
      {
        return _timeOut;
      }
      set
      {
        __isset.timeOut = true;
        this._timeOut = value;
      }
    }

    public int Age
    {
      get
      {
        return _age;
      }
      set
      {
        __isset.age = true;
        this._age = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public List<FaceInfo> Fis
    {
      get
      {
        return _fis;
      }
      set
      {
        __isset.fis = true;
        this._fis = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ChannelID;
      public bool index;
      public bool timeIn;
      public bool timeOut;
      public bool age;
      public bool gender;
      public bool fis;
    }

    public UpLoadCapFaceASyncGY_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Index = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                TimeIn = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                TimeOut = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Age = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.List) {
                {
                  Fis = new List<FaceInfo>();
                  TList _list436 = iprot.ReadListBegin();
                  for( int _i437 = 0; _i437 < _list436.Count; ++_i437)
                  {
                    FaceInfo _elem438;
                    _elem438 = new FaceInfo();
                    _elem438.Read(iprot);
                    Fis.Add(_elem438);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpLoadCapFaceASyncGY_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.ChannelID) {
          field.Name = "ChannelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        if (__isset.index) {
          field.Name = "index";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Index);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeIn) {
          field.Name = "timeIn";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TimeIn);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeOut) {
          field.Name = "timeOut";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TimeOut);
          oprot.WriteFieldEnd();
        }
        if (__isset.age) {
          field.Name = "age";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Age);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (Fis != null && __isset.fis) {
          field.Name = "fis";
          field.Type = TType.List;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Fis.Count));
            foreach (FaceInfo _iter439 in Fis)
            {
              _iter439.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpLoadCapFaceASyncGY_args(");
      bool __first = true;
      if (ChannelID != null && __isset.ChannelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      if (__isset.index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Index: ");
        __sb.Append(Index);
      }
      if (__isset.timeIn) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeIn: ");
        __sb.Append(TimeIn);
      }
      if (__isset.timeOut) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeOut: ");
        __sb.Append(TimeOut);
      }
      if (__isset.age) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Age: ");
        __sb.Append(Age);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (Fis != null && __isset.fis) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Fis: ");
        __sb.Append(Fis);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpLoadCapFaceASyncGY_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UpLoadCapFaceASyncGY_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpLoadCapFaceASyncGY_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpLoadCapFaceASyncGY_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogSX_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private int _nPageFirstNum;
    private int _nPageNum;
    private int _pflag;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }

    public int Pflag
    {
      get
      {
        return _pflag;
      }
      set
      {
        __isset.pflag = true;
        this._pflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool nPageFirstNum;
      public bool nPageNum;
      public bool pflag;
    }

    public QueryCmpLogSX_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                Pflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogSX_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.pflag) {
          field.Name = "pflag";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Pflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogSX_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      if (__isset.pflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pflag: ");
        __sb.Append(Pflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogSX_result : TBase
  {
    private List<CmpFaceLog> _success;

    public List<CmpFaceLog> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogSX_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLog>();
                  TList _list440 = iprot.ReadListBegin();
                  for( int _i441 = 0; _i441 < _list440.Count; ++_i441)
                  {
                    CmpFaceLog _elem442;
                    _elem442 = new CmpFaceLog();
                    _elem442.Read(iprot);
                    Success.Add(_elem442);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogSX_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLog _iter443 in Success)
              {
                _iter443.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogSX_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogByObjIdSX_args : TBase
  {
    private string _objid;
    private long _btime;
    private long _etime;
    private int _pflag;

    public string Objid
    {
      get
      {
        return _objid;
      }
      set
      {
        __isset.objid = true;
        this._objid = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int Pflag
    {
      get
      {
        return _pflag;
      }
      set
      {
        __isset.pflag = true;
        this._pflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool objid;
      public bool btime;
      public bool etime;
      public bool pflag;
    }

    public QueryCmpLogByObjIdSX_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Objid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Pflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogByObjIdSX_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Objid != null && __isset.objid) {
          field.Name = "objid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Objid);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.pflag) {
          field.Name = "pflag";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Pflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogByObjIdSX_args(");
      bool __first = true;
      if (Objid != null && __isset.objid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Objid: ");
        __sb.Append(Objid);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.pflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pflag: ");
        __sb.Append(Pflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogByObjIdSX_result : TBase
  {
    private List<CmpFaceLog> _success;

    public List<CmpFaceLog> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogByObjIdSX_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLog>();
                  TList _list444 = iprot.ReadListBegin();
                  for( int _i445 = 0; _i445 < _list444.Count; ++_i445)
                  {
                    CmpFaceLog _elem446;
                    _elem446 = new CmpFaceLog();
                    _elem446.Read(iprot);
                    Success.Add(_elem446);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogByObjIdSX_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLog _iter447 in Success)
              {
                _iter447.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogByObjIdSX_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogCountByObjIdSX_args : TBase
  {
    private string _objid;
    private long _btime;
    private long _etime;
    private int _pflag;

    public string Objid
    {
      get
      {
        return _objid;
      }
      set
      {
        __isset.objid = true;
        this._objid = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int Pflag
    {
      get
      {
        return _pflag;
      }
      set
      {
        __isset.pflag = true;
        this._pflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool objid;
      public bool btime;
      public bool etime;
      public bool pflag;
    }

    public QueryCmpLogCountByObjIdSX_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Objid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Pflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogCountByObjIdSX_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Objid != null && __isset.objid) {
          field.Name = "objid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Objid);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.pflag) {
          field.Name = "pflag";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Pflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogCountByObjIdSX_args(");
      bool __first = true;
      if (Objid != null && __isset.objid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Objid: ");
        __sb.Append(Objid);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.pflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pflag: ");
        __sb.Append(Pflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogCountByObjIdSX_result : TBase
  {
    private List<SCountInfo> _success;

    public List<SCountInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogCountByObjIdSX_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfo>();
                  TList _list448 = iprot.ReadListBegin();
                  for( int _i449 = 0; _i449 < _list448.Count; ++_i449)
                  {
                    SCountInfo _elem450;
                    _elem450 = new SCountInfo();
                    _elem450.Read(iprot);
                    Success.Add(_elem450);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogCountByObjIdSX_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfo _iter451 in Success)
              {
                _iter451.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogCountByObjIdSX_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogImageHSX_args : TBase
  {
    private string _ID;
    private string _day;
    private int _pflag;

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public string Day
    {
      get
      {
        return _day;
      }
      set
      {
        __isset.day = true;
        this._day = value;
      }
    }

    public int Pflag
    {
      get
      {
        return _pflag;
      }
      set
      {
        __isset.pflag = true;
        this._pflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
      public bool day;
      public bool pflag;
    }

    public QueryCmpLogImageHSX_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Day = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Pflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogImageHSX_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        if (Day != null && __isset.day) {
          field.Name = "day";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Day);
          oprot.WriteFieldEnd();
        }
        if (__isset.pflag) {
          field.Name = "pflag";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Pflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogImageHSX_args(");
      bool __first = true;
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      if (Day != null && __isset.day) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Day: ");
        __sb.Append(Day);
      }
      if (__isset.pflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pflag: ");
        __sb.Append(Pflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogImageHSX_result : TBase
  {
    private List<byte[]> _success;

    public List<byte[]> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogImageHSX_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<byte[]>();
                  TList _list452 = iprot.ReadListBegin();
                  for( int _i453 = 0; _i453 < _list452.Count; ++_i453)
                  {
                    byte[] _elem454;
                    _elem454 = iprot.ReadBinary();
                    Success.Add(_elem454);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogImageHSX_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (byte[] _iter455 in Success)
              {
                oprot.WriteBinary(_iter455);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogImageHSX_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogWidthImgSX_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private int _nPageFirstNum;
    private int _nPageNum;
    private int _pflag;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }

    public int Pflag
    {
      get
      {
        return _pflag;
      }
      set
      {
        __isset.pflag = true;
        this._pflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool nPageFirstNum;
      public bool nPageNum;
      public bool pflag;
    }

    public QueryCmpLogWidthImgSX_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                Pflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogWidthImgSX_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.pflag) {
          field.Name = "pflag";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Pflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogWidthImgSX_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      if (__isset.pflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pflag: ");
        __sb.Append(Pflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogWidthImgSX_result : TBase
  {
    private List<CmpFaceLogWidthImg> _success;

    public List<CmpFaceLogWidthImg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogWidthImgSX_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLogWidthImg>();
                  TList _list456 = iprot.ReadListBegin();
                  for( int _i457 = 0; _i457 < _list456.Count; ++_i457)
                  {
                    CmpFaceLogWidthImg _elem458;
                    _elem458 = new CmpFaceLogWidthImg();
                    _elem458.Read(iprot);
                    Success.Add(_elem458);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogWidthImgSX_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLogWidthImg _iter459 in Success)
              {
                _iter459.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogWidthImgSX_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpByCapIdWidthImgHSX_args : TBase
  {
    private string _ID;
    private string _day;
    private int _pflag;

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public string Day
    {
      get
      {
        return _day;
      }
      set
      {
        __isset.day = true;
        this._day = value;
      }
    }

    public int Pflag
    {
      get
      {
        return _pflag;
      }
      set
      {
        __isset.pflag = true;
        this._pflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
      public bool day;
      public bool pflag;
    }

    public QueryCmpByCapIdWidthImgHSX_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Day = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Pflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpByCapIdWidthImgHSX_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        if (Day != null && __isset.day) {
          field.Name = "day";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Day);
          oprot.WriteFieldEnd();
        }
        if (__isset.pflag) {
          field.Name = "pflag";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Pflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpByCapIdWidthImgHSX_args(");
      bool __first = true;
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      if (Day != null && __isset.day) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Day: ");
        __sb.Append(Day);
      }
      if (__isset.pflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pflag: ");
        __sb.Append(Pflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpByCapIdWidthImgHSX_result : TBase
  {
    private List<CmpFaceLogWidthImg> _success;

    public List<CmpFaceLogWidthImg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpByCapIdWidthImgHSX_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLogWidthImg>();
                  TList _list460 = iprot.ReadListBegin();
                  for( int _i461 = 0; _i461 < _list460.Count; ++_i461)
                  {
                    CmpFaceLogWidthImg _elem462;
                    _elem462 = new CmpFaceLogWidthImg();
                    _elem462.Read(iprot);
                    Success.Add(_elem462);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpByCapIdWidthImgHSX_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLogWidthImg _iter463 in Success)
              {
                _iter463.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpByCapIdWidthImgHSX_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpRecordTotalCountHSX_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private int _pflag;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int Pflag
    {
      get
      {
        return _pflag;
      }
      set
      {
        __isset.pflag = true;
        this._pflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool pflag;
    }

    public QueryCmpRecordTotalCountHSX_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                Pflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpRecordTotalCountHSX_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.pflag) {
          field.Name = "pflag";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Pflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpRecordTotalCountHSX_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.pflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pflag: ");
        __sb.Append(Pflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpRecordTotalCountHSX_result : TBase
  {
    private List<SCountInfo> _success;

    public List<SCountInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpRecordTotalCountHSX_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfo>();
                  TList _list464 = iprot.ReadListBegin();
                  for( int _i465 = 0; _i465 < _list464.Count; ++_i465)
                  {
                    SCountInfo _elem466;
                    _elem466 = new SCountInfo();
                    _elem466.Read(iprot);
                    Success.Add(_elem466);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpRecordTotalCountHSX_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfo _iter467 in Success)
              {
                _iter467.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpRecordTotalCountHSX_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpdateCmpLog_args : TBase
  {
    private string _ID;
    private string _uuid;
    private string _day;
    private int _pflag;

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public string Uuid
    {
      get
      {
        return _uuid;
      }
      set
      {
        __isset.uuid = true;
        this._uuid = value;
      }
    }

    public string Day
    {
      get
      {
        return _day;
      }
      set
      {
        __isset.day = true;
        this._day = value;
      }
    }

    public int Pflag
    {
      get
      {
        return _pflag;
      }
      set
      {
        __isset.pflag = true;
        this._pflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
      public bool uuid;
      public bool day;
      public bool pflag;
    }

    public UpdateCmpLog_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Uuid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Day = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Pflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpdateCmpLog_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        if (Uuid != null && __isset.uuid) {
          field.Name = "uuid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uuid);
          oprot.WriteFieldEnd();
        }
        if (Day != null && __isset.day) {
          field.Name = "day";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Day);
          oprot.WriteFieldEnd();
        }
        if (__isset.pflag) {
          field.Name = "pflag";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Pflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpdateCmpLog_args(");
      bool __first = true;
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      if (Uuid != null && __isset.uuid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uuid: ");
        __sb.Append(Uuid);
      }
      if (Day != null && __isset.day) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Day: ");
        __sb.Append(Day);
      }
      if (__isset.pflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pflag: ");
        __sb.Append(Pflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpdateCmpLog_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UpdateCmpLog_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpdateCmpLog_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpdateCmpLog_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryThreshold_args : TBase
  {

    public QueryThreshold_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryThreshold_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryThreshold_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryThreshold_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryThreshold_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryThreshold_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryThreshold_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogSX_args : TBase
  {
    private string _channel;
    private long _btime;
    private long _etime;
    private int _nPageFirstNum;
    private int _nPageNum;
    private int _pflag;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }

    public int Pflag
    {
      get
      {
        return _pflag;
      }
      set
      {
        __isset.pflag = true;
        this._pflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool btime;
      public bool etime;
      public bool nPageFirstNum;
      public bool nPageNum;
      public bool pflag;
    }

    public QueryCapLogSX_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Pflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogSX_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.pflag) {
          field.Name = "pflag";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Pflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogSX_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      if (__isset.pflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pflag: ");
        __sb.Append(Pflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogSX_result : TBase
  {
    private List<CapFaceLog> _success;

    public List<CapFaceLog> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapLogSX_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CapFaceLog>();
                  TList _list468 = iprot.ReadListBegin();
                  for( int _i469 = 0; _i469 < _list468.Count; ++_i469)
                  {
                    CapFaceLog _elem470;
                    _elem470 = new CapFaceLog();
                    _elem470.Read(iprot);
                    Success.Add(_elem470);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogSX_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CapFaceLog _iter471 in Success)
              {
                _iter471.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogSX_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapRecordTotalCountHSX_args : TBase
  {
    private string _channel;
    private long _btime;
    private long _etime;
    private int _pflag;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int Pflag
    {
      get
      {
        return _pflag;
      }
      set
      {
        __isset.pflag = true;
        this._pflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool btime;
      public bool etime;
      public bool pflag;
    }

    public QueryCapRecordTotalCountHSX_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Pflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapRecordTotalCountHSX_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.pflag) {
          field.Name = "pflag";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Pflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapRecordTotalCountHSX_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.pflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pflag: ");
        __sb.Append(Pflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapRecordTotalCountHSX_result : TBase
  {
    private List<SCountInfo> _success;

    public List<SCountInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapRecordTotalCountHSX_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfo>();
                  TList _list472 = iprot.ReadListBegin();
                  for( int _i473 = 0; _i473 < _list472.Count; ++_i473)
                  {
                    SCountInfo _elem474;
                    _elem474 = new SCountInfo();
                    _elem474.Read(iprot);
                    Success.Add(_elem474);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapRecordTotalCountHSX_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfo _iter475 in Success)
              {
                _iter475.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapRecordTotalCountHSX_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapDetailsHSX_args : TBase
  {
    private string _id;
    private string _day;
    private int _pflag;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Day
    {
      get
      {
        return _day;
      }
      set
      {
        __isset.day = true;
        this._day = value;
      }
    }

    public int Pflag
    {
      get
      {
        return _pflag;
      }
      set
      {
        __isset.pflag = true;
        this._pflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool day;
      public bool pflag;
    }

    public QueryCapDetailsHSX_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Day = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Pflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapDetailsHSX_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (Day != null && __isset.day) {
          field.Name = "day";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Day);
          oprot.WriteFieldEnd();
        }
        if (__isset.pflag) {
          field.Name = "pflag";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Pflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapDetailsHSX_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Day != null && __isset.day) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Day: ");
        __sb.Append(Day);
      }
      if (__isset.pflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pflag: ");
        __sb.Append(Pflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapDetailsHSX_result : TBase
  {
    private List<CapObjImg> _success;

    public List<CapObjImg> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapDetailsHSX_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CapObjImg>();
                  TList _list476 = iprot.ReadListBegin();
                  for( int _i477 = 0; _i477 < _list476.Count; ++_i477)
                  {
                    CapObjImg _elem478;
                    _elem478 = new CapObjImg();
                    _elem478.Read(iprot);
                    Success.Add(_elem478);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapDetailsHSX_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CapObjImg _iter479 in Success)
              {
                _iter479.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapDetailsHSX_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogImageHSX_args : TBase
  {
    private string _ID;
    private string _day;
    private int _pflag;

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public string Day
    {
      get
      {
        return _day;
      }
      set
      {
        __isset.day = true;
        this._day = value;
      }
    }

    public int Pflag
    {
      get
      {
        return _pflag;
      }
      set
      {
        __isset.pflag = true;
        this._pflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
      public bool day;
      public bool pflag;
    }

    public QueryCapLogImageHSX_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Day = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Pflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogImageHSX_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        if (Day != null && __isset.day) {
          field.Name = "day";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Day);
          oprot.WriteFieldEnd();
        }
        if (__isset.pflag) {
          field.Name = "pflag";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Pflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogImageHSX_args(");
      bool __first = true;
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      if (Day != null && __isset.day) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Day: ");
        __sb.Append(Day);
      }
      if (__isset.pflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pflag: ");
        __sb.Append(Pflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogImageHSX_result : TBase
  {
    private List<byte[]> _success;

    public List<byte[]> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapLogImageHSX_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<byte[]>();
                  TList _list480 = iprot.ReadListBegin();
                  for( int _i481 = 0; _i481 < _list480.Count; ++_i481)
                  {
                    byte[] _elem482;
                    _elem482 = iprot.ReadBinary();
                    Success.Add(_elem482);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogImageHSX_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (byte[] _iter483 in Success)
              {
                oprot.WriteBinary(_iter483);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogImageHSX_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogSXC_args : TBase
  {
    private List<string> _channel;
    private long _btime;
    private long _etime;
    private int _nPageFirstNum;
    private int _nPageNum;

    public List<string> Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool btime;
      public bool etime;
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryCapLogSXC_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Channel = new List<string>();
                  TList _list484 = iprot.ReadListBegin();
                  for( int _i485 = 0; _i485 < _list484.Count; ++_i485)
                  {
                    string _elem486;
                    _elem486 = iprot.ReadString();
                    Channel.Add(_elem486);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogSXC_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Channel.Count));
            foreach (string _iter487 in Channel)
            {
              oprot.WriteString(_iter487);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogSXC_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogSXC_result : TBase
  {
    private List<CapFaceLog> _success;

    public List<CapFaceLog> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapLogSXC_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CapFaceLog>();
                  TList _list488 = iprot.ReadListBegin();
                  for( int _i489 = 0; _i489 < _list488.Count; ++_i489)
                  {
                    CapFaceLog _elem490;
                    _elem490 = new CapFaceLog();
                    _elem490.Read(iprot);
                    Success.Add(_elem490);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogSXC_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CapFaceLog _iter491 in Success)
              {
                _iter491.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogSXC_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapRecordTotalCountHSXC_args : TBase
  {
    private List<string> _channel;
    private long _btime;
    private long _etime;

    public List<string> Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool btime;
      public bool etime;
    }

    public QueryCapRecordTotalCountHSXC_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Channel = new List<string>();
                  TList _list492 = iprot.ReadListBegin();
                  for( int _i493 = 0; _i493 < _list492.Count; ++_i493)
                  {
                    string _elem494;
                    _elem494 = iprot.ReadString();
                    Channel.Add(_elem494);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapRecordTotalCountHSXC_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Channel.Count));
            foreach (string _iter495 in Channel)
            {
              oprot.WriteString(_iter495);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapRecordTotalCountHSXC_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapRecordTotalCountHSXC_result : TBase
  {
    private List<SCountInfo> _success;

    public List<SCountInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapRecordTotalCountHSXC_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfo>();
                  TList _list496 = iprot.ReadListBegin();
                  for( int _i497 = 0; _i497 < _list496.Count; ++_i497)
                  {
                    SCountInfo _elem498;
                    _elem498 = new SCountInfo();
                    _elem498.Read(iprot);
                    Success.Add(_elem498);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapRecordTotalCountHSXC_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfo _iter499 in Success)
              {
                _iter499.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapRecordTotalCountHSXC_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TerminalPhoneRegion_args : TBase
  {
    private TerminalPhone _cfg;

    public TerminalPhone Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public TerminalPhoneRegion_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new TerminalPhone();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TerminalPhoneRegion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TerminalPhoneRegion_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TerminalPhoneRegion_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public TerminalPhoneRegion_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TerminalPhoneRegion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TerminalPhoneRegion_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetServerTime_args : TBase
  {

    public GetServerTime_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("GetServerTime_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GetServerTime_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetServerTime_result : TBase
  {
    private TimeData _success;

    public TimeData Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public GetServerTime_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TimeData();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("GetServerTime_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GetServerTime_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UploadCmpLogFromFrontPH_args : TBase
  {
    private CmpFaceLogInfoPH _cfg;

    public CmpFaceLogInfoPH Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public UploadCmpLogFromFrontPH_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new CmpFaceLogInfoPH();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UploadCmpLogFromFrontPH_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UploadCmpLogFromFrontPH_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UploadCmpLogFromFrontPH_result : TBase
  {
    private ErrorInfo _success;

    public ErrorInfo Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UploadCmpLogFromFrontPH_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ErrorInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UploadCmpLogFromFrontPH_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UploadCmpLogFromFrontPH_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListFaceObjPH_args : TBase
  {
    private int _nPageFirstNum;
    private int _nPageNum;

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryListFaceObjPH_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListFaceObjPH_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListFaceObjPH_args(");
      bool __first = true;
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryListFaceObjPH_result : TBase
  {
    private List<FaceObjTemplatePhone> _success;

    public List<FaceObjTemplatePhone> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryListFaceObjPH_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<FaceObjTemplatePhone>();
                  TList _list500 = iprot.ReadListBegin();
                  for( int _i501 = 0; _i501 < _list500.Count; ++_i501)
                  {
                    FaceObjTemplatePhone _elem502;
                    _elem502 = new FaceObjTemplatePhone();
                    _elem502.Read(iprot);
                    Success.Add(_elem502);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryListFaceObjPH_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (FaceObjTemplatePhone _iter503 in Success)
              {
                _iter503.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryListFaceObjPH_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpRecordTotalCountHDS_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
    }

    public QueryCmpRecordTotalCountHDS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpRecordTotalCountHDS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpRecordTotalCountHDS_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpRecordTotalCountHDS_result : TBase
  {
    private List<SCountInfo> _success;

    public List<SCountInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpRecordTotalCountHDS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfo>();
                  TList _list504 = iprot.ReadListBegin();
                  for( int _i505 = 0; _i505 < _list504.Count; ++_i505)
                  {
                    SCountInfo _elem506;
                    _elem506 = new SCountInfo();
                    _elem506.Read(iprot);
                    Success.Add(_elem506);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpRecordTotalCountHDS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfo _iter507 in Success)
              {
                _iter507.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpRecordTotalCountHDS_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpRecordTotalCountHSXDS_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private int _pflag;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int Pflag
    {
      get
      {
        return _pflag;
      }
      set
      {
        __isset.pflag = true;
        this._pflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool pflag;
    }

    public QueryCmpRecordTotalCountHSXDS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                Pflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpRecordTotalCountHSXDS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.pflag) {
          field.Name = "pflag";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Pflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpRecordTotalCountHSXDS_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.pflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pflag: ");
        __sb.Append(Pflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpRecordTotalCountHSXDS_result : TBase
  {
    private List<SCountInfo> _success;

    public List<SCountInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpRecordTotalCountHSXDS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfo>();
                  TList _list508 = iprot.ReadListBegin();
                  for( int _i509 = 0; _i509 < _list508.Count; ++_i509)
                  {
                    SCountInfo _elem510;
                    _elem510 = new SCountInfo();
                    _elem510.Read(iprot);
                    Success.Add(_elem510);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpRecordTotalCountHSXDS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfo _iter511 in Success)
              {
                _iter511.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpRecordTotalCountHSXDS_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogDS_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private int _nPageFirstNum;
    private int _nPageNum;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryCmpLogDS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogDS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogDS_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogDS_result : TBase
  {
    private List<CmpFaceLogDS> _success;

    public List<CmpFaceLogDS> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogDS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLogDS>();
                  TList _list512 = iprot.ReadListBegin();
                  for( int _i513 = 0; _i513 < _list512.Count; ++_i513)
                  {
                    CmpFaceLogDS _elem514;
                    _elem514 = new CmpFaceLogDS();
                    _elem514.Read(iprot);
                    Success.Add(_elem514);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogDS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLogDS _iter515 in Success)
              {
                _iter515.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogDS_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogByObjIdDS_args : TBase
  {
    private string _objid;
    private long _btime;
    private long _etime;

    public string Objid
    {
      get
      {
        return _objid;
      }
      set
      {
        __isset.objid = true;
        this._objid = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool objid;
      public bool btime;
      public bool etime;
    }

    public QueryCmpLogByObjIdDS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Objid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogByObjIdDS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Objid != null && __isset.objid) {
          field.Name = "objid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Objid);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogByObjIdDS_args(");
      bool __first = true;
      if (Objid != null && __isset.objid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Objid: ");
        __sb.Append(Objid);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogByObjIdDS_result : TBase
  {
    private List<CmpFaceLogDS> _success;

    public List<CmpFaceLogDS> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogByObjIdDS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLogDS>();
                  TList _list516 = iprot.ReadListBegin();
                  for( int _i517 = 0; _i517 < _list516.Count; ++_i517)
                  {
                    CmpFaceLogDS _elem518;
                    _elem518 = new CmpFaceLogDS();
                    _elem518.Read(iprot);
                    Success.Add(_elem518);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogByObjIdDS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLogDS _iter519 in Success)
              {
                _iter519.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogByObjIdDS_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogCountByObjIdDS_args : TBase
  {
    private string _objid;
    private long _btime;
    private long _etime;

    public string Objid
    {
      get
      {
        return _objid;
      }
      set
      {
        __isset.objid = true;
        this._objid = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool objid;
      public bool btime;
      public bool etime;
    }

    public QueryCmpLogCountByObjIdDS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Objid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogCountByObjIdDS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Objid != null && __isset.objid) {
          field.Name = "objid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Objid);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogCountByObjIdDS_args(");
      bool __first = true;
      if (Objid != null && __isset.objid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Objid: ");
        __sb.Append(Objid);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogCountByObjIdDS_result : TBase
  {
    private List<SCountInfo> _success;

    public List<SCountInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogCountByObjIdDS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfo>();
                  TList _list520 = iprot.ReadListBegin();
                  for( int _i521 = 0; _i521 < _list520.Count; ++_i521)
                  {
                    SCountInfo _elem522;
                    _elem522 = new SCountInfo();
                    _elem522.Read(iprot);
                    Success.Add(_elem522);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogCountByObjIdDS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfo _iter523 in Success)
              {
                _iter523.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogCountByObjIdDS_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogSXDS_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private int _nPageFirstNum;
    private int _nPageNum;
    private int _pflag;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }

    public int Pflag
    {
      get
      {
        return _pflag;
      }
      set
      {
        __isset.pflag = true;
        this._pflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool nPageFirstNum;
      public bool nPageNum;
      public bool pflag;
    }

    public QueryCmpLogSXDS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                Pflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogSXDS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.pflag) {
          field.Name = "pflag";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Pflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogSXDS_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      if (__isset.pflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pflag: ");
        __sb.Append(Pflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogSXDS_result : TBase
  {
    private List<CmpFaceLogDS> _success;

    public List<CmpFaceLogDS> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogSXDS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLogDS>();
                  TList _list524 = iprot.ReadListBegin();
                  for( int _i525 = 0; _i525 < _list524.Count; ++_i525)
                  {
                    CmpFaceLogDS _elem526;
                    _elem526 = new CmpFaceLogDS();
                    _elem526.Read(iprot);
                    Success.Add(_elem526);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogSXDS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLogDS _iter527 in Success)
              {
                _iter527.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogSXDS_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogByObjIdSXDS_args : TBase
  {
    private string _objid;
    private long _btime;
    private long _etime;
    private int _pflag;

    public string Objid
    {
      get
      {
        return _objid;
      }
      set
      {
        __isset.objid = true;
        this._objid = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int Pflag
    {
      get
      {
        return _pflag;
      }
      set
      {
        __isset.pflag = true;
        this._pflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool objid;
      public bool btime;
      public bool etime;
      public bool pflag;
    }

    public QueryCmpLogByObjIdSXDS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Objid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Pflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogByObjIdSXDS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Objid != null && __isset.objid) {
          field.Name = "objid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Objid);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.pflag) {
          field.Name = "pflag";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Pflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogByObjIdSXDS_args(");
      bool __first = true;
      if (Objid != null && __isset.objid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Objid: ");
        __sb.Append(Objid);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.pflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pflag: ");
        __sb.Append(Pflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogByObjIdSXDS_result : TBase
  {
    private List<CmpFaceLogDS> _success;

    public List<CmpFaceLogDS> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogByObjIdSXDS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLogDS>();
                  TList _list528 = iprot.ReadListBegin();
                  for( int _i529 = 0; _i529 < _list528.Count; ++_i529)
                  {
                    CmpFaceLogDS _elem530;
                    _elem530 = new CmpFaceLogDS();
                    _elem530.Read(iprot);
                    Success.Add(_elem530);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogByObjIdSXDS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLogDS _iter531 in Success)
              {
                _iter531.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogByObjIdSXDS_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogCountByObjIdSXDS_args : TBase
  {
    private string _objid;
    private long _btime;
    private long _etime;
    private int _pflag;

    public string Objid
    {
      get
      {
        return _objid;
      }
      set
      {
        __isset.objid = true;
        this._objid = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int Pflag
    {
      get
      {
        return _pflag;
      }
      set
      {
        __isset.pflag = true;
        this._pflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool objid;
      public bool btime;
      public bool etime;
      public bool pflag;
    }

    public QueryCmpLogCountByObjIdSXDS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Objid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Pflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogCountByObjIdSXDS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Objid != null && __isset.objid) {
          field.Name = "objid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Objid);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.pflag) {
          field.Name = "pflag";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Pflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogCountByObjIdSXDS_args(");
      bool __first = true;
      if (Objid != null && __isset.objid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Objid: ");
        __sb.Append(Objid);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.pflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pflag: ");
        __sb.Append(Pflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogCountByObjIdSXDS_result : TBase
  {
    private List<SCountInfo> _success;

    public List<SCountInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogCountByObjIdSXDS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfo>();
                  TList _list532 = iprot.ReadListBegin();
                  for( int _i533 = 0; _i533 < _list532.Count; ++_i533)
                  {
                    SCountInfo _elem534;
                    _elem534 = new SCountInfo();
                    _elem534.Read(iprot);
                    Success.Add(_elem534);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogCountByObjIdSXDS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfo _iter535 in Success)
              {
                _iter535.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogCountByObjIdSXDS_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddChannelLBS_args : TBase
  {
    private ChannelCfgLBS _cfg;

    public ChannelCfgLBS Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public AddChannelLBS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new ChannelCfgLBS();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddChannelLBS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddChannelLBS_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddChannelLBS_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public AddChannelLBS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddChannelLBS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddChannelLBS_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModifyChannelLBS_args : TBase
  {
    private ChannelCfgLBS _cfg;

    public ChannelCfgLBS Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public ModifyChannelLBS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new ChannelCfgLBS();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModifyChannelLBS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModifyChannelLBS_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ModifyChannelLBS_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ModifyChannelLBS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ModifyChannelLBS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ModifyChannelLBS_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryAllChannelLBS_args : TBase
  {

    public QueryAllChannelLBS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryAllChannelLBS_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryAllChannelLBS_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryAllChannelLBS_result : TBase
  {
    private List<ChannelCfgLBS> _success;

    public List<ChannelCfgLBS> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryAllChannelLBS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ChannelCfgLBS>();
                  TList _list536 = iprot.ReadListBegin();
                  for( int _i537 = 0; _i537 < _list536.Count; ++_i537)
                  {
                    ChannelCfgLBS _elem538;
                    _elem538 = new ChannelCfgLBS();
                    _elem538.Read(iprot);
                    Success.Add(_elem538);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryAllChannelLBS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ChannelCfgLBS _iter539 in Success)
              {
                _iter539.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryAllChannelLBS_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryChannelLBS_args : TBase
  {
    private string _channelID;

    public string ChannelID
    {
      get
      {
        return _channelID;
      }
      set
      {
        __isset.channelID = true;
        this._channelID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelID;
    }

    public QueryChannelLBS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryChannelLBS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.channelID) {
          field.Name = "channelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryChannelLBS_args(");
      bool __first = true;
      if (ChannelID != null && __isset.channelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryChannelLBS_result : TBase
  {
    private ChannelCfgLBS _success;

    public ChannelCfgLBS Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryChannelLBS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ChannelCfgLBS();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryChannelLBS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryChannelLBS_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryTargetedAnalysis_args : TBase
  {
    private string _capid;
    private byte[] _capimg;
    private int _threshold;
    private long _btime;
    private long _etime;

    public string Capid
    {
      get
      {
        return _capid;
      }
      set
      {
        __isset.capid = true;
        this._capid = value;
      }
    }

    public byte[] Capimg
    {
      get
      {
        return _capimg;
      }
      set
      {
        __isset.capimg = true;
        this._capimg = value;
      }
    }

    public int Threshold
    {
      get
      {
        return _threshold;
      }
      set
      {
        __isset.threshold = true;
        this._threshold = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool capid;
      public bool capimg;
      public bool threshold;
      public bool btime;
      public bool etime;
    }

    public QueryTargetedAnalysis_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Capid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Capimg = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Threshold = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryTargetedAnalysis_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Capid != null && __isset.capid) {
          field.Name = "capid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Capid);
          oprot.WriteFieldEnd();
        }
        if (Capimg != null && __isset.capimg) {
          field.Name = "capimg";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Capimg);
          oprot.WriteFieldEnd();
        }
        if (__isset.threshold) {
          field.Name = "threshold";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Threshold);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryTargetedAnalysis_args(");
      bool __first = true;
      if (Capid != null && __isset.capid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Capid: ");
        __sb.Append(Capid);
      }
      if (Capimg != null && __isset.capimg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Capimg: ");
        __sb.Append(Capimg);
      }
      if (__isset.threshold) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Threshold: ");
        __sb.Append(Threshold);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryTargetedAnalysis_result : TBase
  {
    private List<TargetedAnalysis> _success;

    public List<TargetedAnalysis> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryTargetedAnalysis_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TargetedAnalysis>();
                  TList _list540 = iprot.ReadListBegin();
                  for( int _i541 = 0; _i541 < _list540.Count; ++_i541)
                  {
                    TargetedAnalysis _elem542;
                    _elem542 = new TargetedAnalysis();
                    _elem542.Read(iprot);
                    Success.Add(_elem542);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryTargetedAnalysis_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TargetedAnalysis _iter543 in Success)
              {
                _iter543.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryTargetedAnalysis_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryKeyAreaSuspectAnalysis_args : TBase
  {
    private long _btime;
    private long _etime;

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool btime;
      public bool etime;
    }

    public QueryKeyAreaSuspectAnalysis_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryKeyAreaSuspectAnalysis_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryKeyAreaSuspectAnalysis_args(");
      bool __first = true;
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryKeyAreaSuspectAnalysis_result : TBase
  {
    private SuspectAnalysisInfo _success;

    public SuspectAnalysisInfo Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryKeyAreaSuspectAnalysis_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SuspectAnalysisInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryKeyAreaSuspectAnalysis_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryKeyAreaSuspectAnalysis_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCrowdedAnalysis_args : TBase
  {
    private long _btime;
    private long _etime;

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool btime;
      public bool etime;
    }

    public QueryCrowdedAnalysis_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCrowdedAnalysis_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCrowdedAnalysis_args(");
      bool __first = true;
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCrowdedAnalysis_result : TBase
  {
    private List<TargetedAnalysis> _success;

    public List<TargetedAnalysis> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCrowdedAnalysis_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TargetedAnalysis>();
                  TList _list544 = iprot.ReadListBegin();
                  for( int _i545 = 0; _i545 < _list544.Count; ++_i545)
                  {
                    TargetedAnalysis _elem546;
                    _elem546 = new TargetedAnalysis();
                    _elem546.Read(iprot);
                    Success.Add(_elem546);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCrowdedAnalysis_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TargetedAnalysis _iter547 in Success)
              {
                _iter547.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCrowdedAnalysis_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryTrackPlayback_args : TBase
  {
    private string _capid;
    private byte[] _capimg;
    private long _btime;
    private long _etime;

    public string Capid
    {
      get
      {
        return _capid;
      }
      set
      {
        __isset.capid = true;
        this._capid = value;
      }
    }

    public byte[] Capimg
    {
      get
      {
        return _capimg;
      }
      set
      {
        __isset.capimg = true;
        this._capimg = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool capid;
      public bool capimg;
      public bool btime;
      public bool etime;
    }

    public QueryTrackPlayback_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Capid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Capimg = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryTrackPlayback_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Capid != null && __isset.capid) {
          field.Name = "capid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Capid);
          oprot.WriteFieldEnd();
        }
        if (Capimg != null && __isset.capimg) {
          field.Name = "capimg";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Capimg);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryTrackPlayback_args(");
      bool __first = true;
      if (Capid != null && __isset.capid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Capid: ");
        __sb.Append(Capid);
      }
      if (Capimg != null && __isset.capimg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Capimg: ");
        __sb.Append(Capimg);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryTrackPlayback_result : TBase
  {
    private List<TrackInfo> _success;

    public List<TrackInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryTrackPlayback_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TrackInfo>();
                  TList _list548 = iprot.ReadListBegin();
                  for( int _i549 = 0; _i549 < _list548.Count; ++_i549)
                  {
                    TrackInfo _elem550;
                    _elem550 = new TrackInfo();
                    _elem550.Read(iprot);
                    Success.Add(_elem550);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryTrackPlayback_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TrackInfo _iter551 in Success)
              {
                _iter551.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryTrackPlayback_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryStaticAnalysis_args : TBase
  {
    private string _capid;
    private byte[] _capimg;
    private long _btime;
    private long _etime;
    private int _threshold;
    private int _maxcount;

    public string Capid
    {
      get
      {
        return _capid;
      }
      set
      {
        __isset.capid = true;
        this._capid = value;
      }
    }

    public byte[] Capimg
    {
      get
      {
        return _capimg;
      }
      set
      {
        __isset.capimg = true;
        this._capimg = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int Threshold
    {
      get
      {
        return _threshold;
      }
      set
      {
        __isset.threshold = true;
        this._threshold = value;
      }
    }

    public int Maxcount
    {
      get
      {
        return _maxcount;
      }
      set
      {
        __isset.maxcount = true;
        this._maxcount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool capid;
      public bool capimg;
      public bool btime;
      public bool etime;
      public bool threshold;
      public bool maxcount;
    }

    public QueryStaticAnalysis_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Capid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Capimg = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Threshold = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Maxcount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryStaticAnalysis_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Capid != null && __isset.capid) {
          field.Name = "capid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Capid);
          oprot.WriteFieldEnd();
        }
        if (Capimg != null && __isset.capimg) {
          field.Name = "capimg";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Capimg);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.threshold) {
          field.Name = "threshold";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Threshold);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxcount) {
          field.Name = "maxcount";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Maxcount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryStaticAnalysis_args(");
      bool __first = true;
      if (Capid != null && __isset.capid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Capid: ");
        __sb.Append(Capid);
      }
      if (Capimg != null && __isset.capimg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Capimg: ");
        __sb.Append(Capimg);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.threshold) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Threshold: ");
        __sb.Append(Threshold);
      }
      if (__isset.maxcount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Maxcount: ");
        __sb.Append(Maxcount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryStaticAnalysis_result : TBase
  {
    private List<RealtimeCapInfoLBS> _success;

    public List<RealtimeCapInfoLBS> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryStaticAnalysis_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<RealtimeCapInfoLBS>();
                  TList _list552 = iprot.ReadListBegin();
                  for( int _i553 = 0; _i553 < _list552.Count; ++_i553)
                  {
                    RealtimeCapInfoLBS _elem554;
                    _elem554 = new RealtimeCapInfoLBS();
                    _elem554.Read(iprot);
                    Success.Add(_elem554);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryStaticAnalysis_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (RealtimeCapInfoLBS _iter555 in Success)
              {
                _iter555.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryStaticAnalysis_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapRecordTotalCountHLBS_args : TBase
  {
    private string _channel;
    private int _channel_type;
    private long _btime;
    private long _etime;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public int Channel_type
    {
      get
      {
        return _channel_type;
      }
      set
      {
        __isset.channel_type = true;
        this._channel_type = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool channel_type;
      public bool btime;
      public bool etime;
    }

    public QueryCapRecordTotalCountHLBS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Channel_type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapRecordTotalCountHLBS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (__isset.channel_type) {
          field.Name = "channel_type";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Channel_type);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapRecordTotalCountHLBS_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (__isset.channel_type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel_type: ");
        __sb.Append(Channel_type);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapRecordTotalCountHLBS_result : TBase
  {
    private List<SCountInfo> _success;

    public List<SCountInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapRecordTotalCountHLBS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfo>();
                  TList _list556 = iprot.ReadListBegin();
                  for( int _i557 = 0; _i557 < _list556.Count; ++_i557)
                  {
                    SCountInfo _elem558;
                    _elem558 = new SCountInfo();
                    _elem558.Read(iprot);
                    Success.Add(_elem558);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapRecordTotalCountHLBS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfo _iter559 in Success)
              {
                _iter559.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapRecordTotalCountHLBS_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogLBS_args : TBase
  {
    private string _channel;
    private int _channel_type;
    private long _btime;
    private long _etime;
    private int _nPageFirstNum;
    private int _nPageNum;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public int Channel_type
    {
      get
      {
        return _channel_type;
      }
      set
      {
        __isset.channel_type = true;
        this._channel_type = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool channel_type;
      public bool btime;
      public bool etime;
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryCapLogLBS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Channel_type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogLBS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (__isset.channel_type) {
          field.Name = "channel_type";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Channel_type);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogLBS_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (__isset.channel_type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel_type: ");
        __sb.Append(Channel_type);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCapLogLBS_result : TBase
  {
    private List<CapFaceLogLBS> _success;

    public List<CapFaceLogLBS> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCapLogLBS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CapFaceLogLBS>();
                  TList _list560 = iprot.ReadListBegin();
                  for( int _i561 = 0; _i561 < _list560.Count; ++_i561)
                  {
                    CapFaceLogLBS _elem562;
                    _elem562 = new CapFaceLogLBS();
                    _elem562.Read(iprot);
                    Success.Add(_elem562);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCapLogLBS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CapFaceLogLBS _iter563 in Success)
              {
                _iter563.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCapLogLBS_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpRecordTotalCountHDSLBS_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private int _channel_type;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int Channel_type
    {
      get
      {
        return _channel_type;
      }
      set
      {
        __isset.channel_type = true;
        this._channel_type = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool channel_type;
    }

    public QueryCmpRecordTotalCountHDSLBS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                Channel_type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpRecordTotalCountHDSLBS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.channel_type) {
          field.Name = "channel_type";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Channel_type);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpRecordTotalCountHDSLBS_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.channel_type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel_type: ");
        __sb.Append(Channel_type);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpRecordTotalCountHDSLBS_result : TBase
  {
    private List<SCountInfo> _success;

    public List<SCountInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpRecordTotalCountHDSLBS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfo>();
                  TList _list564 = iprot.ReadListBegin();
                  for( int _i565 = 0; _i565 < _list564.Count; ++_i565)
                  {
                    SCountInfo _elem566;
                    _elem566 = new SCountInfo();
                    _elem566.Read(iprot);
                    Success.Add(_elem566);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpRecordTotalCountHDSLBS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfo _iter567 in Success)
              {
                _iter567.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpRecordTotalCountHDSLBS_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogDSLBS_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private int _channel_type;
    private int _nPageFirstNum;
    private int _nPageNum;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int Channel_type
    {
      get
      {
        return _channel_type;
      }
      set
      {
        __isset.channel_type = true;
        this._channel_type = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool channel_type;
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryCmpLogDSLBS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                Channel_type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogDSLBS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.channel_type) {
          field.Name = "channel_type";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Channel_type);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogDSLBS_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.channel_type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel_type: ");
        __sb.Append(Channel_type);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogDSLBS_result : TBase
  {
    private List<CmpFaceLogDSLBS> _success;

    public List<CmpFaceLogDSLBS> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogDSLBS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLogDSLBS>();
                  TList _list568 = iprot.ReadListBegin();
                  for( int _i569 = 0; _i569 < _list568.Count; ++_i569)
                  {
                    CmpFaceLogDSLBS _elem570;
                    _elem570 = new CmpFaceLogDSLBS();
                    _elem570.Read(iprot);
                    Success.Add(_elem570);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogDSLBS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLogDSLBS _iter571 in Success)
              {
                _iter571.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogDSLBS_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpRecordTotalCountHDSLBSSX_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private int _channel_type;
    private int _pflag;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int Channel_type
    {
      get
      {
        return _channel_type;
      }
      set
      {
        __isset.channel_type = true;
        this._channel_type = value;
      }
    }

    public int Pflag
    {
      get
      {
        return _pflag;
      }
      set
      {
        __isset.pflag = true;
        this._pflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool channel_type;
      public bool pflag;
    }

    public QueryCmpRecordTotalCountHDSLBSSX_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                Channel_type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                Pflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpRecordTotalCountHDSLBSSX_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.channel_type) {
          field.Name = "channel_type";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Channel_type);
          oprot.WriteFieldEnd();
        }
        if (__isset.pflag) {
          field.Name = "pflag";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Pflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpRecordTotalCountHDSLBSSX_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.channel_type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel_type: ");
        __sb.Append(Channel_type);
      }
      if (__isset.pflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pflag: ");
        __sb.Append(Pflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpRecordTotalCountHDSLBSSX_result : TBase
  {
    private List<SCountInfo> _success;

    public List<SCountInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpRecordTotalCountHDSLBSSX_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfo>();
                  TList _list572 = iprot.ReadListBegin();
                  for( int _i573 = 0; _i573 < _list572.Count; ++_i573)
                  {
                    SCountInfo _elem574;
                    _elem574 = new SCountInfo();
                    _elem574.Read(iprot);
                    Success.Add(_elem574);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpRecordTotalCountHDSLBSSX_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfo _iter575 in Success)
              {
                _iter575.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpRecordTotalCountHDSLBSSX_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogDSLBSSX_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private int _channel_type;
    private int _pflag;
    private int _nPageFirstNum;
    private int _nPageNum;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int Channel_type
    {
      get
      {
        return _channel_type;
      }
      set
      {
        __isset.channel_type = true;
        this._channel_type = value;
      }
    }

    public int Pflag
    {
      get
      {
        return _pflag;
      }
      set
      {
        __isset.pflag = true;
        this._pflag = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool channel_type;
      public bool pflag;
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryCmpLogDSLBSSX_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                Channel_type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                Pflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogDSLBSSX_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.channel_type) {
          field.Name = "channel_type";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Channel_type);
          oprot.WriteFieldEnd();
        }
        if (__isset.pflag) {
          field.Name = "pflag";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Pflag);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogDSLBSSX_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.channel_type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel_type: ");
        __sb.Append(Channel_type);
      }
      if (__isset.pflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pflag: ");
        __sb.Append(Pflag);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogDSLBSSX_result : TBase
  {
    private List<CmpFaceLogDSLBS> _success;

    public List<CmpFaceLogDSLBS> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogDSLBSSX_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLogDSLBS>();
                  TList _list576 = iprot.ReadListBegin();
                  for( int _i577 = 0; _i577 < _list576.Count; ++_i577)
                  {
                    CmpFaceLogDSLBS _elem578;
                    _elem578 = new CmpFaceLogDSLBS();
                    _elem578.Read(iprot);
                    Success.Add(_elem578);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogDSLBSSX_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLogDSLBS _iter579 in Success)
              {
                _iter579.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogDSLBSSX_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryLastRecordInfo_args : TBase
  {

    public QueryLastRecordInfo_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryLastRecordInfo_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryLastRecordInfo_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryLastRecordInfo_result : TBase
  {
    private LastRecordInfo _success;

    public LastRecordInfo Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryLastRecordInfo_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new LastRecordInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryLastRecordInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryLastRecordInfo_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryRealtimeCapInfoQ_args : TBase
  {
    private int _time;

    public int Time
    {
      get
      {
        return _time;
      }
      set
      {
        __isset.time = true;
        this._time = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool time;
    }

    public QueryRealtimeCapInfoQ_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Time = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryRealtimeCapInfoQ_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.time) {
          field.Name = "time";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Time);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryRealtimeCapInfoQ_args(");
      bool __first = true;
      if (__isset.time) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Time: ");
        __sb.Append(Time);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryRealtimeCapInfoQ_result : TBase
  {
    private List<RealtimeCapInfoQ> _success;

    public List<RealtimeCapInfoQ> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryRealtimeCapInfoQ_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<RealtimeCapInfoQ>();
                  TList _list580 = iprot.ReadListBegin();
                  for( int _i581 = 0; _i581 < _list580.Count; ++_i581)
                  {
                    RealtimeCapInfoQ _elem582;
                    _elem582 = new RealtimeCapInfoQ();
                    _elem582.Read(iprot);
                    Success.Add(_elem582);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryRealtimeCapInfoQ_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (RealtimeCapInfoQ _iter583 in Success)
              {
                _iter583.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryRealtimeCapInfoQ_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpdateRealtimeCmpQ_args : TBase
  {
    private List<string> _capid;
    private int _qflag;

    public List<string> Capid
    {
      get
      {
        return _capid;
      }
      set
      {
        __isset.capid = true;
        this._capid = value;
      }
    }

    public int Qflag
    {
      get
      {
        return _qflag;
      }
      set
      {
        __isset.qflag = true;
        this._qflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool capid;
      public bool qflag;
    }

    public UpdateRealtimeCmpQ_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Capid = new List<string>();
                  TList _list584 = iprot.ReadListBegin();
                  for( int _i585 = 0; _i585 < _list584.Count; ++_i585)
                  {
                    string _elem586;
                    _elem586 = iprot.ReadString();
                    Capid.Add(_elem586);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Qflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpdateRealtimeCmpQ_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Capid != null && __isset.capid) {
          field.Name = "capid";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Capid.Count));
            foreach (string _iter587 in Capid)
            {
              oprot.WriteString(_iter587);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.qflag) {
          field.Name = "qflag";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Qflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpdateRealtimeCmpQ_args(");
      bool __first = true;
      if (Capid != null && __isset.capid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Capid: ");
        __sb.Append(Capid);
      }
      if (__isset.qflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Qflag: ");
        __sb.Append(Qflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpdateRealtimeCmpQ_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UpdateRealtimeCmpQ_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpdateRealtimeCmpQ_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpdateRealtimeCmpQ_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryRealtimeCmpInfoQ_args : TBase
  {
    private int _time;
    private int _qflag;

    public int Time
    {
      get
      {
        return _time;
      }
      set
      {
        __isset.time = true;
        this._time = value;
      }
    }

    public int Qflag
    {
      get
      {
        return _qflag;
      }
      set
      {
        __isset.qflag = true;
        this._qflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool time;
      public bool qflag;
    }

    public QueryRealtimeCmpInfoQ_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Time = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Qflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryRealtimeCmpInfoQ_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.time) {
          field.Name = "time";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Time);
          oprot.WriteFieldEnd();
        }
        if (__isset.qflag) {
          field.Name = "qflag";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Qflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryRealtimeCmpInfoQ_args(");
      bool __first = true;
      if (__isset.time) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Time: ");
        __sb.Append(Time);
      }
      if (__isset.qflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Qflag: ");
        __sb.Append(Qflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryRealtimeCmpInfoQ_result : TBase
  {
    private List<RealtimeCmpInfoQ> _success;

    public List<RealtimeCmpInfoQ> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryRealtimeCmpInfoQ_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<RealtimeCmpInfoQ>();
                  TList _list588 = iprot.ReadListBegin();
                  for( int _i589 = 0; _i589 < _list588.Count; ++_i589)
                  {
                    RealtimeCmpInfoQ _elem590;
                    _elem590 = new RealtimeCmpInfoQ();
                    _elem590.Read(iprot);
                    Success.Add(_elem590);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryRealtimeCmpInfoQ_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (RealtimeCmpInfoQ _iter591 in Success)
              {
                _iter591.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryRealtimeCmpInfoQ_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryRealtimeCapInfoQLBS_args : TBase
  {
    private int _time;

    public int Time
    {
      get
      {
        return _time;
      }
      set
      {
        __isset.time = true;
        this._time = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool time;
    }

    public QueryRealtimeCapInfoQLBS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Time = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryRealtimeCapInfoQLBS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.time) {
          field.Name = "time";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Time);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryRealtimeCapInfoQLBS_args(");
      bool __first = true;
      if (__isset.time) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Time: ");
        __sb.Append(Time);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryRealtimeCapInfoQLBS_result : TBase
  {
    private List<RealtimeCapInfoLBS> _success;

    public List<RealtimeCapInfoLBS> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryRealtimeCapInfoQLBS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<RealtimeCapInfoLBS>();
                  TList _list592 = iprot.ReadListBegin();
                  for( int _i593 = 0; _i593 < _list592.Count; ++_i593)
                  {
                    RealtimeCapInfoLBS _elem594;
                    _elem594 = new RealtimeCapInfoLBS();
                    _elem594.Read(iprot);
                    Success.Add(_elem594);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryRealtimeCapInfoQLBS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (RealtimeCapInfoLBS _iter595 in Success)
              {
                _iter595.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryRealtimeCapInfoQLBS_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryRealtimeCmpInfoQLBS_args : TBase
  {
    private int _time;
    private int _qflag;

    public int Time
    {
      get
      {
        return _time;
      }
      set
      {
        __isset.time = true;
        this._time = value;
      }
    }

    public int Qflag
    {
      get
      {
        return _qflag;
      }
      set
      {
        __isset.qflag = true;
        this._qflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool time;
      public bool qflag;
    }

    public QueryRealtimeCmpInfoQLBS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Time = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Qflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryRealtimeCmpInfoQLBS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.time) {
          field.Name = "time";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Time);
          oprot.WriteFieldEnd();
        }
        if (__isset.qflag) {
          field.Name = "qflag";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Qflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryRealtimeCmpInfoQLBS_args(");
      bool __first = true;
      if (__isset.time) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Time: ");
        __sb.Append(Time);
      }
      if (__isset.qflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Qflag: ");
        __sb.Append(Qflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryRealtimeCmpInfoQLBS_result : TBase
  {
    private List<RealtimeCmpInfoLBS> _success;

    public List<RealtimeCmpInfoLBS> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryRealtimeCmpInfoQLBS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<RealtimeCmpInfoLBS>();
                  TList _list596 = iprot.ReadListBegin();
                  for( int _i597 = 0; _i597 < _list596.Count; ++_i597)
                  {
                    RealtimeCmpInfoLBS _elem598;
                    _elem598 = new RealtimeCmpInfoLBS();
                    _elem598.Read(iprot);
                    Success.Add(_elem598);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryRealtimeCmpInfoQLBS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (RealtimeCmpInfoLBS _iter599 in Success)
              {
                _iter599.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryRealtimeCmpInfoQLBS_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpLoadCapFaceMoblie_args : TBase
  {
    private string _channelID;
    private byte[] _img;
    private string _latitude;
    private string _longitude;
    private string _address;
    private long _dtm;

    public string ChannelID
    {
      get
      {
        return _channelID;
      }
      set
      {
        __isset.channelID = true;
        this._channelID = value;
      }
    }

    public byte[] Img
    {
      get
      {
        return _img;
      }
      set
      {
        __isset.img = true;
        this._img = value;
      }
    }

    public string Latitude
    {
      get
      {
        return _latitude;
      }
      set
      {
        __isset.latitude = true;
        this._latitude = value;
      }
    }

    public string Longitude
    {
      get
      {
        return _longitude;
      }
      set
      {
        __isset.longitude = true;
        this._longitude = value;
      }
    }

    public string Address
    {
      get
      {
        return _address;
      }
      set
      {
        __isset.address = true;
        this._address = value;
      }
    }

    public long Dtm
    {
      get
      {
        return _dtm;
      }
      set
      {
        __isset.dtm = true;
        this._dtm = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelID;
      public bool img;
      public bool latitude;
      public bool longitude;
      public bool address;
      public bool dtm;
    }

    public UpLoadCapFaceMoblie_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Img = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Latitude = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Longitude = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Address = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I64) {
                Dtm = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpLoadCapFaceMoblie_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelID != null && __isset.channelID) {
          field.Name = "channelID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelID);
          oprot.WriteFieldEnd();
        }
        if (Img != null && __isset.img) {
          field.Name = "img";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Img);
          oprot.WriteFieldEnd();
        }
        if (Latitude != null && __isset.latitude) {
          field.Name = "latitude";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Latitude);
          oprot.WriteFieldEnd();
        }
        if (Longitude != null && __isset.longitude) {
          field.Name = "longitude";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Longitude);
          oprot.WriteFieldEnd();
        }
        if (Address != null && __isset.address) {
          field.Name = "address";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Address);
          oprot.WriteFieldEnd();
        }
        if (__isset.dtm) {
          field.Name = "dtm";
          field.Type = TType.I64;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Dtm);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpLoadCapFaceMoblie_args(");
      bool __first = true;
      if (ChannelID != null && __isset.channelID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelID: ");
        __sb.Append(ChannelID);
      }
      if (Img != null && __isset.img) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Img: ");
        __sb.Append(Img);
      }
      if (Latitude != null && __isset.latitude) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Latitude: ");
        __sb.Append(Latitude);
      }
      if (Longitude != null && __isset.longitude) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Longitude: ");
        __sb.Append(Longitude);
      }
      if (Address != null && __isset.address) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Address: ");
        __sb.Append(Address);
      }
      if (__isset.dtm) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Dtm: ");
        __sb.Append(Dtm);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpLoadCapFaceMoblie_result : TBase
  {
    private List<CompareImgResult> _success;

    public List<CompareImgResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UpLoadCapFaceMoblie_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CompareImgResult>();
                  TList _list600 = iprot.ReadListBegin();
                  for( int _i601 = 0; _i601 < _list600.Count; ++_i601)
                  {
                    CompareImgResult _elem602;
                    _elem602 = new CompareImgResult();
                    _elem602.Read(iprot);
                    Success.Add(_elem602);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpLoadCapFaceMoblie_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CompareImgResult _iter603 in Success)
              {
                _iter603.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpLoadCapFaceMoblie_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpRecordLBSTotalCountM_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private int _channel_type;
    private int _qflag;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int Channel_type
    {
      get
      {
        return _channel_type;
      }
      set
      {
        __isset.channel_type = true;
        this._channel_type = value;
      }
    }

    public int Qflag
    {
      get
      {
        return _qflag;
      }
      set
      {
        __isset.qflag = true;
        this._qflag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool channel_type;
      public bool qflag;
    }

    public QueryCmpRecordLBSTotalCountM_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                Channel_type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                Qflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpRecordLBSTotalCountM_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.channel_type) {
          field.Name = "channel_type";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Channel_type);
          oprot.WriteFieldEnd();
        }
        if (__isset.qflag) {
          field.Name = "qflag";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Qflag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpRecordLBSTotalCountM_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.channel_type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel_type: ");
        __sb.Append(Channel_type);
      }
      if (__isset.qflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Qflag: ");
        __sb.Append(Qflag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpRecordLBSTotalCountM_result : TBase
  {
    private List<SCountInfo> _success;

    public List<SCountInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpRecordLBSTotalCountM_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SCountInfo>();
                  TList _list604 = iprot.ReadListBegin();
                  for( int _i605 = 0; _i605 < _list604.Count; ++_i605)
                  {
                    SCountInfo _elem606;
                    _elem606 = new SCountInfo();
                    _elem606.Read(iprot);
                    Success.Add(_elem606);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpRecordLBSTotalCountM_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SCountInfo _iter607 in Success)
              {
                _iter607.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpRecordLBSTotalCountM_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogDSLBSM_args : TBase
  {
    private string _channel;
    private string _name;
    private int _type;
    private int _gender;
    private int _bage;
    private int _eage;
    private long _btime;
    private long _etime;
    private int _channel_type;
    private int _qflag;
    private int _nPageFirstNum;
    private int _nPageNum;

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }

    public int Bage
    {
      get
      {
        return _bage;
      }
      set
      {
        __isset.bage = true;
        this._bage = value;
      }
    }

    public int Eage
    {
      get
      {
        return _eage;
      }
      set
      {
        __isset.eage = true;
        this._eage = value;
      }
    }

    public long Btime
    {
      get
      {
        return _btime;
      }
      set
      {
        __isset.btime = true;
        this._btime = value;
      }
    }

    public long Etime
    {
      get
      {
        return _etime;
      }
      set
      {
        __isset.etime = true;
        this._etime = value;
      }
    }

    public int Channel_type
    {
      get
      {
        return _channel_type;
      }
      set
      {
        __isset.channel_type = true;
        this._channel_type = value;
      }
    }

    public int Qflag
    {
      get
      {
        return _qflag;
      }
      set
      {
        __isset.qflag = true;
        this._qflag = value;
      }
    }

    public int NPageFirstNum
    {
      get
      {
        return _nPageFirstNum;
      }
      set
      {
        __isset.nPageFirstNum = true;
        this._nPageFirstNum = value;
      }
    }

    public int NPageNum
    {
      get
      {
        return _nPageNum;
      }
      set
      {
        __isset.nPageNum = true;
        this._nPageNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channel;
      public bool name;
      public bool type;
      public bool gender;
      public bool bage;
      public bool eage;
      public bool btime;
      public bool etime;
      public bool channel_type;
      public bool qflag;
      public bool nPageFirstNum;
      public bool nPageNum;
    }

    public QueryCmpLogDSLBSM_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Gender = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Bage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Eage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Btime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Etime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                Channel_type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                Qflag = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                NPageFirstNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I32) {
                NPageNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogDSLBSM_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.gender) {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Gender);
          oprot.WriteFieldEnd();
        }
        if (__isset.bage) {
          field.Name = "bage";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Bage);
          oprot.WriteFieldEnd();
        }
        if (__isset.eage) {
          field.Name = "eage";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Eage);
          oprot.WriteFieldEnd();
        }
        if (__isset.btime) {
          field.Name = "btime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Btime);
          oprot.WriteFieldEnd();
        }
        if (__isset.etime) {
          field.Name = "etime";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Etime);
          oprot.WriteFieldEnd();
        }
        if (__isset.channel_type) {
          field.Name = "channel_type";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Channel_type);
          oprot.WriteFieldEnd();
        }
        if (__isset.qflag) {
          field.Name = "qflag";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Qflag);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageFirstNum) {
          field.Name = "nPageFirstNum";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageFirstNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.nPageNum) {
          field.Name = "nPageNum";
          field.Type = TType.I32;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NPageNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogDSLBSM_args(");
      bool __first = true;
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (__isset.bage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bage: ");
        __sb.Append(Bage);
      }
      if (__isset.eage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eage: ");
        __sb.Append(Eage);
      }
      if (__isset.btime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Btime: ");
        __sb.Append(Btime);
      }
      if (__isset.etime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Etime: ");
        __sb.Append(Etime);
      }
      if (__isset.channel_type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel_type: ");
        __sb.Append(Channel_type);
      }
      if (__isset.qflag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Qflag: ");
        __sb.Append(Qflag);
      }
      if (__isset.nPageFirstNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageFirstNum: ");
        __sb.Append(NPageFirstNum);
      }
      if (__isset.nPageNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NPageNum: ");
        __sb.Append(NPageNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryCmpLogDSLBSM_result : TBase
  {
    private List<CmpFaceLogDSLBS> _success;

    public List<CmpFaceLogDSLBS> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryCmpLogDSLBSM_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CmpFaceLogDSLBS>();
                  TList _list608 = iprot.ReadListBegin();
                  for( int _i609 = 0; _i609 < _list608.Count; ++_i609)
                  {
                    CmpFaceLogDSLBS _elem610;
                    _elem610 = new CmpFaceLogDSLBS();
                    _elem610.Read(iprot);
                    Success.Add(_elem610);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryCmpLogDSLBSM_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CmpFaceLogDSLBS _iter611 in Success)
              {
                _iter611.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryCmpLogDSLBSM_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
