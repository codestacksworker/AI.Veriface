/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class UIServer {
  public interface Iface {
    int UpdateRealtimeCap(RealtimeCapInfo info, string channelname);
    #if SILVERLIGHT
    IAsyncResult Begin_UpdateRealtimeCap(AsyncCallback callback, object state, RealtimeCapInfo info, string channelname);
    int End_UpdateRealtimeCap(IAsyncResult asyncResult);
    #endif
    int UpdateRealtimeCmp(RealtimeCmpInfo info, string channelname);
    #if SILVERLIGHT
    IAsyncResult Begin_UpdateRealtimeCmp(AsyncCallback callback, object state, RealtimeCmpInfo info, string channelname);
    int End_UpdateRealtimeCmp(IAsyncResult asyncResult);
    #endif
    int UpdateRealtimeCapLBS(RealtimeCapInfoLBS info);
    #if SILVERLIGHT
    IAsyncResult Begin_UpdateRealtimeCapLBS(AsyncCallback callback, object state, RealtimeCapInfoLBS info);
    int End_UpdateRealtimeCapLBS(IAsyncResult asyncResult);
    #endif
    int UpdateRealtimeCmpLBS(RealtimeCmpInfoLBS info);
    #if SILVERLIGHT
    IAsyncResult Begin_UpdateRealtimeCmpLBS(AsyncCallback callback, object state, RealtimeCmpInfoLBS info);
    int End_UpdateRealtimeCmpLBS(IAsyncResult asyncResult);
    #endif
    int UpdateRealtimeCmpEntertainment(CmpFaceLogDS cfg);
    #if SILVERLIGHT
    IAsyncResult Begin_UpdateRealtimeCmpEntertainment(AsyncCallback callback, object state, CmpFaceLogDS cfg);
    int End_UpdateRealtimeCmpEntertainment(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_UpdateRealtimeCap(AsyncCallback callback, object state, RealtimeCapInfo info, string channelname)
    {
      return send_UpdateRealtimeCap(callback, state, info, channelname);
    }

    public int End_UpdateRealtimeCap(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UpdateRealtimeCap();
    }

    #endif

    public int UpdateRealtimeCap(RealtimeCapInfo info, string channelname)
    {
      #if !SILVERLIGHT
      send_UpdateRealtimeCap(info, channelname);
      return recv_UpdateRealtimeCap();

      #else
      var asyncResult = Begin_UpdateRealtimeCap(null, null, info, channelname);
      return End_UpdateRealtimeCap(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UpdateRealtimeCap(AsyncCallback callback, object state, RealtimeCapInfo info, string channelname)
    #else
    public void send_UpdateRealtimeCap(RealtimeCapInfo info, string channelname)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("UpdateRealtimeCap", TMessageType.Call, seqid_));
      UpdateRealtimeCap_args args = new UpdateRealtimeCap_args();
      args.Info = info;
      args.Channelname = channelname;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_UpdateRealtimeCap()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UpdateRealtimeCap_result result = new UpdateRealtimeCap_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateRealtimeCap failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_UpdateRealtimeCmp(AsyncCallback callback, object state, RealtimeCmpInfo info, string channelname)
    {
      return send_UpdateRealtimeCmp(callback, state, info, channelname);
    }

    public int End_UpdateRealtimeCmp(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UpdateRealtimeCmp();
    }

    #endif

    public int UpdateRealtimeCmp(RealtimeCmpInfo info, string channelname)
    {
      #if !SILVERLIGHT
      send_UpdateRealtimeCmp(info, channelname);
      return recv_UpdateRealtimeCmp();

      #else
      var asyncResult = Begin_UpdateRealtimeCmp(null, null, info, channelname);
      return End_UpdateRealtimeCmp(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UpdateRealtimeCmp(AsyncCallback callback, object state, RealtimeCmpInfo info, string channelname)
    #else
    public void send_UpdateRealtimeCmp(RealtimeCmpInfo info, string channelname)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("UpdateRealtimeCmp", TMessageType.Call, seqid_));
      UpdateRealtimeCmp_args args = new UpdateRealtimeCmp_args();
      args.Info = info;
      args.Channelname = channelname;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_UpdateRealtimeCmp()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UpdateRealtimeCmp_result result = new UpdateRealtimeCmp_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateRealtimeCmp failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_UpdateRealtimeCapLBS(AsyncCallback callback, object state, RealtimeCapInfoLBS info)
    {
      return send_UpdateRealtimeCapLBS(callback, state, info);
    }

    public int End_UpdateRealtimeCapLBS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UpdateRealtimeCapLBS();
    }

    #endif

    public int UpdateRealtimeCapLBS(RealtimeCapInfoLBS info)
    {
      #if !SILVERLIGHT
      send_UpdateRealtimeCapLBS(info);
      return recv_UpdateRealtimeCapLBS();

      #else
      var asyncResult = Begin_UpdateRealtimeCapLBS(null, null, info);
      return End_UpdateRealtimeCapLBS(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UpdateRealtimeCapLBS(AsyncCallback callback, object state, RealtimeCapInfoLBS info)
    #else
    public void send_UpdateRealtimeCapLBS(RealtimeCapInfoLBS info)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("UpdateRealtimeCapLBS", TMessageType.Call, seqid_));
      UpdateRealtimeCapLBS_args args = new UpdateRealtimeCapLBS_args();
      args.Info = info;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_UpdateRealtimeCapLBS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UpdateRealtimeCapLBS_result result = new UpdateRealtimeCapLBS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateRealtimeCapLBS failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_UpdateRealtimeCmpLBS(AsyncCallback callback, object state, RealtimeCmpInfoLBS info)
    {
      return send_UpdateRealtimeCmpLBS(callback, state, info);
    }

    public int End_UpdateRealtimeCmpLBS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UpdateRealtimeCmpLBS();
    }

    #endif

    public int UpdateRealtimeCmpLBS(RealtimeCmpInfoLBS info)
    {
      #if !SILVERLIGHT
      send_UpdateRealtimeCmpLBS(info);
      return recv_UpdateRealtimeCmpLBS();

      #else
      var asyncResult = Begin_UpdateRealtimeCmpLBS(null, null, info);
      return End_UpdateRealtimeCmpLBS(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UpdateRealtimeCmpLBS(AsyncCallback callback, object state, RealtimeCmpInfoLBS info)
    #else
    public void send_UpdateRealtimeCmpLBS(RealtimeCmpInfoLBS info)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("UpdateRealtimeCmpLBS", TMessageType.Call, seqid_));
      UpdateRealtimeCmpLBS_args args = new UpdateRealtimeCmpLBS_args();
      args.Info = info;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_UpdateRealtimeCmpLBS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UpdateRealtimeCmpLBS_result result = new UpdateRealtimeCmpLBS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateRealtimeCmpLBS failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_UpdateRealtimeCmpEntertainment(AsyncCallback callback, object state, CmpFaceLogDS cfg)
    {
      return send_UpdateRealtimeCmpEntertainment(callback, state, cfg);
    }

    public int End_UpdateRealtimeCmpEntertainment(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UpdateRealtimeCmpEntertainment();
    }

    #endif

    public int UpdateRealtimeCmpEntertainment(CmpFaceLogDS cfg)
    {
      #if !SILVERLIGHT
      send_UpdateRealtimeCmpEntertainment(cfg);
      return recv_UpdateRealtimeCmpEntertainment();

      #else
      var asyncResult = Begin_UpdateRealtimeCmpEntertainment(null, null, cfg);
      return End_UpdateRealtimeCmpEntertainment(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UpdateRealtimeCmpEntertainment(AsyncCallback callback, object state, CmpFaceLogDS cfg)
    #else
    public void send_UpdateRealtimeCmpEntertainment(CmpFaceLogDS cfg)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("UpdateRealtimeCmpEntertainment", TMessageType.Call, seqid_));
      UpdateRealtimeCmpEntertainment_args args = new UpdateRealtimeCmpEntertainment_args();
      args.Cfg = cfg;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_UpdateRealtimeCmpEntertainment()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UpdateRealtimeCmpEntertainment_result result = new UpdateRealtimeCmpEntertainment_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateRealtimeCmpEntertainment failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["UpdateRealtimeCap"] = UpdateRealtimeCap_Process;
      processMap_["UpdateRealtimeCmp"] = UpdateRealtimeCmp_Process;
      processMap_["UpdateRealtimeCapLBS"] = UpdateRealtimeCapLBS_Process;
      processMap_["UpdateRealtimeCmpLBS"] = UpdateRealtimeCmpLBS_Process;
      processMap_["UpdateRealtimeCmpEntertainment"] = UpdateRealtimeCmpEntertainment_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void UpdateRealtimeCap_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UpdateRealtimeCap_args args = new UpdateRealtimeCap_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UpdateRealtimeCap_result result = new UpdateRealtimeCap_result();
      result.Success = iface_.UpdateRealtimeCap(args.Info, args.Channelname);
      oprot.WriteMessageBegin(new TMessage("UpdateRealtimeCap", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void UpdateRealtimeCmp_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UpdateRealtimeCmp_args args = new UpdateRealtimeCmp_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UpdateRealtimeCmp_result result = new UpdateRealtimeCmp_result();
      result.Success = iface_.UpdateRealtimeCmp(args.Info, args.Channelname);
      oprot.WriteMessageBegin(new TMessage("UpdateRealtimeCmp", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void UpdateRealtimeCapLBS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UpdateRealtimeCapLBS_args args = new UpdateRealtimeCapLBS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UpdateRealtimeCapLBS_result result = new UpdateRealtimeCapLBS_result();
      result.Success = iface_.UpdateRealtimeCapLBS(args.Info);
      oprot.WriteMessageBegin(new TMessage("UpdateRealtimeCapLBS", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void UpdateRealtimeCmpLBS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UpdateRealtimeCmpLBS_args args = new UpdateRealtimeCmpLBS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UpdateRealtimeCmpLBS_result result = new UpdateRealtimeCmpLBS_result();
      result.Success = iface_.UpdateRealtimeCmpLBS(args.Info);
      oprot.WriteMessageBegin(new TMessage("UpdateRealtimeCmpLBS", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void UpdateRealtimeCmpEntertainment_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UpdateRealtimeCmpEntertainment_args args = new UpdateRealtimeCmpEntertainment_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UpdateRealtimeCmpEntertainment_result result = new UpdateRealtimeCmpEntertainment_result();
      result.Success = iface_.UpdateRealtimeCmpEntertainment(args.Cfg);
      oprot.WriteMessageBegin(new TMessage("UpdateRealtimeCmpEntertainment", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpdateRealtimeCap_args : TBase
  {
    private RealtimeCapInfo _info;
    private string _channelname;

    public RealtimeCapInfo Info
    {
      get
      {
        return _info;
      }
      set
      {
        __isset.info = true;
        this._info = value;
      }
    }

    public string Channelname
    {
      get
      {
        return _channelname;
      }
      set
      {
        __isset.channelname = true;
        this._channelname = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool info;
      public bool channelname;
    }

    public UpdateRealtimeCap_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Info = new RealtimeCapInfo();
                Info.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Channelname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpdateRealtimeCap_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Info != null && __isset.info) {
          field.Name = "info";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Info.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Channelname != null && __isset.channelname) {
          field.Name = "channelname";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channelname);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpdateRealtimeCap_args(");
      bool __first = true;
      if (Info != null && __isset.info) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Info: ");
        __sb.Append(Info== null ? "<null>" : Info.ToString());
      }
      if (Channelname != null && __isset.channelname) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channelname: ");
        __sb.Append(Channelname);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpdateRealtimeCap_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UpdateRealtimeCap_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpdateRealtimeCap_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpdateRealtimeCap_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpdateRealtimeCmp_args : TBase
  {
    private RealtimeCmpInfo _info;
    private string _channelname;

    public RealtimeCmpInfo Info
    {
      get
      {
        return _info;
      }
      set
      {
        __isset.info = true;
        this._info = value;
      }
    }

    public string Channelname
    {
      get
      {
        return _channelname;
      }
      set
      {
        __isset.channelname = true;
        this._channelname = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool info;
      public bool channelname;
    }

    public UpdateRealtimeCmp_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Info = new RealtimeCmpInfo();
                Info.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Channelname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpdateRealtimeCmp_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Info != null && __isset.info) {
          field.Name = "info";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Info.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Channelname != null && __isset.channelname) {
          field.Name = "channelname";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channelname);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpdateRealtimeCmp_args(");
      bool __first = true;
      if (Info != null && __isset.info) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Info: ");
        __sb.Append(Info== null ? "<null>" : Info.ToString());
      }
      if (Channelname != null && __isset.channelname) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channelname: ");
        __sb.Append(Channelname);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpdateRealtimeCmp_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UpdateRealtimeCmp_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpdateRealtimeCmp_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpdateRealtimeCmp_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpdateRealtimeCapLBS_args : TBase
  {
    private RealtimeCapInfoLBS _info;

    public RealtimeCapInfoLBS Info
    {
      get
      {
        return _info;
      }
      set
      {
        __isset.info = true;
        this._info = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool info;
    }

    public UpdateRealtimeCapLBS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Info = new RealtimeCapInfoLBS();
                Info.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpdateRealtimeCapLBS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Info != null && __isset.info) {
          field.Name = "info";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Info.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpdateRealtimeCapLBS_args(");
      bool __first = true;
      if (Info != null && __isset.info) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Info: ");
        __sb.Append(Info== null ? "<null>" : Info.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpdateRealtimeCapLBS_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UpdateRealtimeCapLBS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpdateRealtimeCapLBS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpdateRealtimeCapLBS_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpdateRealtimeCmpLBS_args : TBase
  {
    private RealtimeCmpInfoLBS _info;

    public RealtimeCmpInfoLBS Info
    {
      get
      {
        return _info;
      }
      set
      {
        __isset.info = true;
        this._info = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool info;
    }

    public UpdateRealtimeCmpLBS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Info = new RealtimeCmpInfoLBS();
                Info.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpdateRealtimeCmpLBS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Info != null && __isset.info) {
          field.Name = "info";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Info.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpdateRealtimeCmpLBS_args(");
      bool __first = true;
      if (Info != null && __isset.info) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Info: ");
        __sb.Append(Info== null ? "<null>" : Info.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpdateRealtimeCmpLBS_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UpdateRealtimeCmpLBS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpdateRealtimeCmpLBS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpdateRealtimeCmpLBS_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpdateRealtimeCmpEntertainment_args : TBase
  {
    private CmpFaceLogDS _cfg;

    public CmpFaceLogDS Cfg
    {
      get
      {
        return _cfg;
      }
      set
      {
        __isset.cfg = true;
        this._cfg = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cfg;
    }

    public UpdateRealtimeCmpEntertainment_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cfg = new CmpFaceLogDS();
                Cfg.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpdateRealtimeCmpEntertainment_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cfg != null && __isset.cfg) {
          field.Name = "cfg";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cfg.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpdateRealtimeCmpEntertainment_args(");
      bool __first = true;
      if (Cfg != null && __isset.cfg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cfg: ");
        __sb.Append(Cfg== null ? "<null>" : Cfg.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpdateRealtimeCmpEntertainment_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UpdateRealtimeCmpEntertainment_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpdateRealtimeCmpEntertainment_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpdateRealtimeCmpEntertainment_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
